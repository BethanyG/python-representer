## BEGIN NORMALIZED CODE ##
def placeholder_0(placeholder_1):
    return [placeholder_1, placeholder_1 + 1, placeholder_1 + 2]


def placeholder_2(placeholder_3, placeholder_4):
    return placeholder_3 + placeholder_4


def placeholder_5(placeholder_6, placeholder_1):
    return placeholder_1 in placeholder_6


def placeholder_7(placeholder_8):
    return sum(placeholder_8) / len(placeholder_8)


def placeholder_9(placeholder_8):
    placeholder_10 = placeholder_7(placeholder_8)
    if placeholder_7([placeholder_8[0], placeholder_8[-1]]) == placeholder_10:
        placeholder_11 = True
    elif placeholder_8[len(placeholder_8) // 2] == placeholder_10:
        placeholder_11 = True
    else:
        placeholder_11 = False
    return placeholder_11


def placeholder_12(placeholder_8):
    return placeholder_7(placeholder_8[::2]) == placeholder_7(placeholder_8[1::2])


def placeholder_13(placeholder_8):
    if placeholder_8[-1] == 11:
        placeholder_8[-1] *= 2
    return placeholder_8

## END NORMALIZED CODE ##

## BEGIN TREE BEFORE ##
Module(
  [
    Expr(
      Constant(
        'Functions for tracking poker hands and assorted card tasks.\n\nPython list documentation: https://docs.python.org/3/tutorial/datastructures.html\n',
        lineno=1,
        col_offset=0,
        end_lineno=4,
        end_col_offset=3),
      lineno=1,
      col_offset=0,
      end_lineno=4,
      end_col_offset=3),
    FunctionDef(
      'get_rounds',
      arguments(
        [],
        [
          arg(
            'number',
            lineno=7,
            col_offset=15,
            end_lineno=7,
            end_col_offset=21)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Create a list containing the current and next two round numbers.\n\n    :param number: int - current round number.\n    :return: list - current round and the two that follow.\n    ',
            lineno=8,
            col_offset=4,
            end_lineno=12,
            end_col_offset=7),
          lineno=8,
          col_offset=4,
          end_lineno=12,
          end_col_offset=7),
        Return(
          List(
            [
              Name(
                'number',
                Load(),
                lineno=14,
                col_offset=12,
                end_lineno=14,
                end_col_offset=18),
              BinOp(
                Name(
                  'number',
                  Load(),
                  lineno=14,
                  col_offset=20,
                  end_lineno=14,
                  end_col_offset=26),
                Add(),
                Constant(
                  1,
                  lineno=14,
                  col_offset=29,
                  end_lineno=14,
                  end_col_offset=30),
                lineno=14,
                col_offset=20,
                end_lineno=14,
                end_col_offset=30),
              BinOp(
                Name(
                  'number',
                  Load(),
                  lineno=14,
                  col_offset=32,
                  end_lineno=14,
                  end_col_offset=38),
                Add(),
                Constant(
                  2,
                  lineno=14,
                  col_offset=41,
                  end_lineno=14,
                  end_col_offset=42),
                lineno=14,
                col_offset=32,
                end_lineno=14,
                end_col_offset=42)],
            Load(),
            lineno=14,
            col_offset=11,
            end_lineno=14,
            end_col_offset=43),
          lineno=14,
          col_offset=4,
          end_lineno=14,
          end_col_offset=43)],
      [],
      lineno=7,
      col_offset=0,
      end_lineno=14,
      end_col_offset=43),
    FunctionDef(
      'concatenate_rounds',
      arguments(
        [],
        [
          arg(
            'rounds_1',
            lineno=17,
            col_offset=23,
            end_lineno=17,
            end_col_offset=31),
          arg(
            'rounds_2',
            lineno=17,
            col_offset=33,
            end_lineno=17,
            end_col_offset=41)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Concatenate two lists of round numbers.\n\n    :param rounds_1: list - first rounds played.\n    :param rounds_2: list - second set of rounds played.\n    :return: list - all rounds played.\n    ',
            lineno=18,
            col_offset=4,
            end_lineno=23,
            end_col_offset=7),
          lineno=18,
          col_offset=4,
          end_lineno=23,
          end_col_offset=7),
        Return(
          BinOp(
            Name(
              'rounds_1',
              Load(),
              lineno=25,
              col_offset=11,
              end_lineno=25,
              end_col_offset=19),
            Add(),
            Name(
              'rounds_2',
              Load(),
              lineno=25,
              col_offset=22,
              end_lineno=25,
              end_col_offset=30),
            lineno=25,
            col_offset=11,
            end_lineno=25,
            end_col_offset=30),
          lineno=25,
          col_offset=4,
          end_lineno=25,
          end_col_offset=30)],
      [],
      lineno=17,
      col_offset=0,
      end_lineno=25,
      end_col_offset=30),
    FunctionDef(
      'list_contains_round',
      arguments(
        [],
        [
          arg(
            'rounds',
            lineno=28,
            col_offset=24,
            end_lineno=28,
            end_col_offset=30),
          arg(
            'number',
            lineno=28,
            col_offset=32,
            end_lineno=28,
            end_col_offset=38)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Check if the list of rounds contains the specified number.\n\n    :param rounds: list - rounds played.\n    :param number: int - round number.\n    :return: bool - was the round played?\n    ',
            lineno=29,
            col_offset=4,
            end_lineno=34,
            end_col_offset=7),
          lineno=29,
          col_offset=4,
          end_lineno=34,
          end_col_offset=7),
        Return(
          Compare(
            Name(
              'number',
              Load(),
              lineno=36,
              col_offset=11,
              end_lineno=36,
              end_col_offset=17),
            [
              In()],
            [
              Name(
                'rounds',
                Load(),
                lineno=36,
                col_offset=21,
                end_lineno=36,
                end_col_offset=27)],
            lineno=36,
            col_offset=11,
            end_lineno=36,
            end_col_offset=27),
          lineno=36,
          col_offset=4,
          end_lineno=36,
          end_col_offset=27)],
      [],
      lineno=28,
      col_offset=0,
      end_lineno=36,
      end_col_offset=27),
    FunctionDef(
      'card_average',
      arguments(
        [],
        [
          arg(
            'hand',
            lineno=39,
            col_offset=17,
            end_lineno=39,
            end_col_offset=21)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Calculate and returns the average card value from the list.\n\n    :param hand: list - cards in hand.\n    :return: float - average value of the cards in the hand.\n    ',
            lineno=40,
            col_offset=4,
            end_lineno=44,
            end_col_offset=7),
          lineno=40,
          col_offset=4,
          end_lineno=44,
          end_col_offset=7),
        Return(
          BinOp(
            Call(
              Name(
                'sum',
                Load(),
                lineno=46,
                col_offset=11,
                end_lineno=46,
                end_col_offset=14),
              [
                Name(
                  'hand',
                  Load(),
                  lineno=46,
                  col_offset=15,
                  end_lineno=46,
                  end_col_offset=19)],
              [],
              lineno=46,
              col_offset=11,
              end_lineno=46,
              end_col_offset=20),
            Div(),
            Call(
              Name(
                'len',
                Load(),
                lineno=46,
                col_offset=23,
                end_lineno=46,
                end_col_offset=26),
              [
                Name(
                  'hand',
                  Load(),
                  lineno=46,
                  col_offset=27,
                  end_lineno=46,
                  end_col_offset=31)],
              [],
              lineno=46,
              col_offset=23,
              end_lineno=46,
              end_col_offset=32),
            lineno=46,
            col_offset=11,
            end_lineno=46,
            end_col_offset=32),
          lineno=46,
          col_offset=4,
          end_lineno=46,
          end_col_offset=32)],
      [],
      lineno=39,
      col_offset=0,
      end_lineno=46,
      end_col_offset=32),
    FunctionDef(
      'approx_average_is_average',
      arguments(
        [],
        [
          arg(
            'hand',
            lineno=49,
            col_offset=30,
            end_lineno=49,
            end_col_offset=34)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            "Return if an average is using (first + last index values ) OR ('middle' card) == calculated average.\n\n    :param hand: list - cards in hand.\n    :return: bool - does one of the approximate averages equal the `true average`?\n    ",
            lineno=50,
            col_offset=4,
            end_lineno=54,
            end_col_offset=7),
          lineno=50,
          col_offset=4,
          end_lineno=54,
          end_col_offset=7),
        Assign(
          [
            Name(
              'real_average',
              Store(),
              lineno=56,
              col_offset=4,
              end_lineno=56,
              end_col_offset=16)],
          Call(
            Name(
              'card_average',
              Load(),
              lineno=56,
              col_offset=19,
              end_lineno=56,
              end_col_offset=31),
            [
              Name(
                'hand',
                Load(),
                lineno=56,
                col_offset=32,
                end_lineno=56,
                end_col_offset=36)],
            [],
            lineno=56,
            col_offset=19,
            end_lineno=56,
            end_col_offset=37),
          lineno=56,
          col_offset=4,
          end_lineno=56,
          end_col_offset=37),
        If(
          Compare(
            Call(
              Name(
                'card_average',
                Load(),
                lineno=58,
                col_offset=7,
                end_lineno=58,
                end_col_offset=19),
              [
                List(
                  [
                    Subscript(
                      Name(
                        'hand',
                        Load(),
                        lineno=58,
                        col_offset=21,
                        end_lineno=58,
                        end_col_offset=25),
                      Constant(
                        0,
                        lineno=58,
                        col_offset=26,
                        end_lineno=58,
                        end_col_offset=27),
                      Load(),
                      lineno=58,
                      col_offset=21,
                      end_lineno=58,
                      end_col_offset=28),
                    Subscript(
                      Name(
                        'hand',
                        Load(),
                        lineno=58,
                        col_offset=30,
                        end_lineno=58,
                        end_col_offset=34),
                      UnaryOp(
                        USub(),
                        Constant(
                          1,
                          lineno=58,
                          col_offset=36,
                          end_lineno=58,
                          end_col_offset=37),
                        lineno=58,
                        col_offset=35,
                        end_lineno=58,
                        end_col_offset=37),
                      Load(),
                      lineno=58,
                      col_offset=30,
                      end_lineno=58,
                      end_col_offset=38)],
                  Load(),
                  lineno=58,
                  col_offset=20,
                  end_lineno=58,
                  end_col_offset=39)],
              [],
              lineno=58,
              col_offset=7,
              end_lineno=58,
              end_col_offset=40),
            [
              Eq()],
            [
              Name(
                'real_average',
                Load(),
                lineno=58,
                col_offset=44,
                end_lineno=58,
                end_col_offset=56)],
            lineno=58,
            col_offset=7,
            end_lineno=58,
            end_col_offset=56),
          [
            Assign(
              [
                Name(
                  'is_same',
                  Store(),
                  lineno=59,
                  col_offset=8,
                  end_lineno=59,
                  end_col_offset=15)],
              Constant(
                True,
                lineno=59,
                col_offset=18,
                end_lineno=59,
                end_col_offset=22),
              lineno=59,
              col_offset=8,
              end_lineno=59,
              end_col_offset=22)],
          [
            If(
              Compare(
                Subscript(
                  Name(
                    'hand',
                    Load(),
                    lineno=60,
                    col_offset=9,
                    end_lineno=60,
                    end_col_offset=13),
                  BinOp(
                    Call(
                      Name(
                        'len',
                        Load(),
                        lineno=60,
                        col_offset=14,
                        end_lineno=60,
                        end_col_offset=17),
                      [
                        Name(
                          'hand',
                          Load(),
                          lineno=60,
                          col_offset=18,
                          end_lineno=60,
                          end_col_offset=22)],
                      [],
                      lineno=60,
                      col_offset=14,
                      end_lineno=60,
                      end_col_offset=23),
                    FloorDiv(),
                    Constant(
                      2,
                      lineno=60,
                      col_offset=27,
                      end_lineno=60,
                      end_col_offset=28),
                    lineno=60,
                    col_offset=14,
                    end_lineno=60,
                    end_col_offset=28),
                  Load(),
                  lineno=60,
                  col_offset=9,
                  end_lineno=60,
                  end_col_offset=29),
                [
                  Eq()],
                [
                  Name(
                    'real_average',
                    Load(),
                    lineno=60,
                    col_offset=33,
                    end_lineno=60,
                    end_col_offset=45)],
                lineno=60,
                col_offset=9,
                end_lineno=60,
                end_col_offset=45),
              [
                Assign(
                  [
                    Name(
                      'is_same',
                      Store(),
                      lineno=61,
                      col_offset=8,
                      end_lineno=61,
                      end_col_offset=15)],
                  Constant(
                    True,
                    lineno=61,
                    col_offset=18,
                    end_lineno=61,
                    end_col_offset=22),
                  lineno=61,
                  col_offset=8,
                  end_lineno=61,
                  end_col_offset=22)],
              [
                Assign(
                  [
                    Name(
                      'is_same',
                      Store(),
                      lineno=63,
                      col_offset=8,
                      end_lineno=63,
                      end_col_offset=15)],
                  Constant(
                    False,
                    lineno=63,
                    col_offset=18,
                    end_lineno=63,
                    end_col_offset=23),
                  lineno=63,
                  col_offset=8,
                  end_lineno=63,
                  end_col_offset=23)],
              lineno=60,
              col_offset=4,
              end_lineno=63,
              end_col_offset=23)],
          lineno=58,
          col_offset=4,
          end_lineno=63,
          end_col_offset=23),
        Return(
          Name(
            'is_same',
            Load(),
            lineno=65,
            col_offset=11,
            end_lineno=65,
            end_col_offset=18),
          lineno=65,
          col_offset=4,
          end_lineno=65,
          end_col_offset=18)],
      [],
      lineno=49,
      col_offset=0,
      end_lineno=65,
      end_col_offset=18),
    FunctionDef(
      'average_even_is_average_odd',
      arguments(
        [],
        [
          arg(
            'hand',
            lineno=68,
            col_offset=32,
            end_lineno=68,
            end_col_offset=36)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Return if the (average of even indexed card values) == (average of odd indexed card values).\n\n    :param hand: list - cards in hand.\n    :return: bool - are even and odd averages equal?\n    ',
            lineno=69,
            col_offset=4,
            end_lineno=73,
            end_col_offset=7),
          lineno=69,
          col_offset=4,
          end_lineno=73,
          end_col_offset=7),
        Return(
          Compare(
            Call(
              Name(
                'card_average',
                Load(),
                lineno=75,
                col_offset=11,
                end_lineno=75,
                end_col_offset=23),
              [
                Subscript(
                  Name(
                    'hand',
                    Load(),
                    lineno=75,
                    col_offset=24,
                    end_lineno=75,
                    end_col_offset=28),
                  Slice(
                    step=Constant(
                      2,
                      lineno=75,
                      col_offset=31,
                      end_lineno=75,
                      end_col_offset=32),
                    lineno=75,
                    col_offset=29,
                    end_lineno=75,
                    end_col_offset=32),
                  Load(),
                  lineno=75,
                  col_offset=24,
                  end_lineno=75,
                  end_col_offset=33)],
              [],
              lineno=75,
              col_offset=11,
              end_lineno=75,
              end_col_offset=34),
            [
              Eq()],
            [
              Call(
                Name(
                  'card_average',
                  Load(),
                  lineno=75,
                  col_offset=38,
                  end_lineno=75,
                  end_col_offset=50),
                [
                  Subscript(
                    Name(
                      'hand',
                      Load(),
                      lineno=75,
                      col_offset=51,
                      end_lineno=75,
                      end_col_offset=55),
                    Slice(
                      Constant(
                        1,
                        lineno=75,
                        col_offset=56,
                        end_lineno=75,
                        end_col_offset=57),
                      step=Constant(
                        2,
                        lineno=75,
                        col_offset=59,
                        end_lineno=75,
                        end_col_offset=60),
                      lineno=75,
                      col_offset=56,
                      end_lineno=75,
                      end_col_offset=60),
                    Load(),
                    lineno=75,
                    col_offset=51,
                    end_lineno=75,
                    end_col_offset=61)],
                [],
                lineno=75,
                col_offset=38,
                end_lineno=75,
                end_col_offset=62)],
            lineno=75,
            col_offset=11,
            end_lineno=75,
            end_col_offset=62),
          lineno=75,
          col_offset=4,
          end_lineno=75,
          end_col_offset=62)],
      [],
      lineno=68,
      col_offset=0,
      end_lineno=75,
      end_col_offset=62),
    FunctionDef(
      'maybe_double_last',
      arguments(
        [],
        [
          arg(
            'hand',
            lineno=78,
            col_offset=22,
            end_lineno=78,
            end_col_offset=26)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Multiply a Jack card value in the last index position by 2.\n\n    :param hand: list - cards in hand.\n    :return: list - hand with Jacks (if present) value doubled.\n    ',
            lineno=79,
            col_offset=4,
            end_lineno=83,
            end_col_offset=7),
          lineno=79,
          col_offset=4,
          end_lineno=83,
          end_col_offset=7),
        If(
          Compare(
            Subscript(
              Name(
                'hand',
                Load(),
                lineno=85,
                col_offset=7,
                end_lineno=85,
                end_col_offset=11),
              UnaryOp(
                USub(),
                Constant(
                  1,
                  lineno=85,
                  col_offset=13,
                  end_lineno=85,
                  end_col_offset=14),
                lineno=85,
                col_offset=12,
                end_lineno=85,
                end_col_offset=14),
              Load(),
              lineno=85,
              col_offset=7,
              end_lineno=85,
              end_col_offset=15),
            [
              Eq()],
            [
              Constant(
                11,
                lineno=85,
                col_offset=19,
                end_lineno=85,
                end_col_offset=21)],
            lineno=85,
            col_offset=7,
            end_lineno=85,
            end_col_offset=21),
          [
            AugAssign(
              Subscript(
                Name(
                  'hand',
                  Load(),
                  lineno=86,
                  col_offset=8,
                  end_lineno=86,
                  end_col_offset=12),
                UnaryOp(
                  USub(),
                  Constant(
                    1,
                    lineno=86,
                    col_offset=14,
                    end_lineno=86,
                    end_col_offset=15),
                  lineno=86,
                  col_offset=13,
                  end_lineno=86,
                  end_col_offset=15),
                Store(),
                lineno=86,
                col_offset=8,
                end_lineno=86,
                end_col_offset=16),
              Mult(),
              Constant(
                2,
                lineno=86,
                col_offset=20,
                end_lineno=86,
                end_col_offset=21),
              lineno=86,
              col_offset=8,
              end_lineno=86,
              end_col_offset=21)],
          [],
          lineno=85,
          col_offset=4,
          end_lineno=86,
          end_col_offset=21),
        Return(
          Name(
            'hand',
            Load(),
            lineno=88,
            col_offset=11,
            end_lineno=88,
            end_col_offset=15),
          lineno=88,
          col_offset=4,
          end_lineno=88,
          end_col_offset=15)],
      [],
      lineno=78,
      col_offset=0,
      end_lineno=88,
      end_col_offset=15)],
  [])
## END TREE BEFORE ##

## BEGIN NORMALIZED TREE ##
Module(
  [
    FunctionDef(
      'placeholder_0',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=7,
            col_offset=15,
            end_lineno=7,
            end_col_offset=21)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          List(
            [
              Name(
                'placeholder_1',
                Load(),
                lineno=14,
                col_offset=12,
                end_lineno=14,
                end_col_offset=18),
              BinOp(
                Name(
                  'placeholder_1',
                  Load(),
                  lineno=14,
                  col_offset=20,
                  end_lineno=14,
                  end_col_offset=26),
                Add(),
                Constant(
                  1,
                  lineno=14,
                  col_offset=29,
                  end_lineno=14,
                  end_col_offset=30),
                lineno=14,
                col_offset=20,
                end_lineno=14,
                end_col_offset=30),
              BinOp(
                Name(
                  'placeholder_1',
                  Load(),
                  lineno=14,
                  col_offset=32,
                  end_lineno=14,
                  end_col_offset=38),
                Add(),
                Constant(
                  2,
                  lineno=14,
                  col_offset=41,
                  end_lineno=14,
                  end_col_offset=42),
                lineno=14,
                col_offset=32,
                end_lineno=14,
                end_col_offset=42)],
            Load(),
            lineno=14,
            col_offset=11,
            end_lineno=14,
            end_col_offset=43),
          lineno=14,
          col_offset=4,
          end_lineno=14,
          end_col_offset=43)],
      [],
      lineno=7,
      col_offset=0,
      end_lineno=14,
      end_col_offset=43),
    FunctionDef(
      'placeholder_2',
      arguments(
        [],
        [
          arg(
            'placeholder_3',
            lineno=17,
            col_offset=23,
            end_lineno=17,
            end_col_offset=31),
          arg(
            'placeholder_4',
            lineno=17,
            col_offset=33,
            end_lineno=17,
            end_col_offset=41)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BinOp(
            Name(
              'placeholder_3',
              Load(),
              lineno=25,
              col_offset=11,
              end_lineno=25,
              end_col_offset=19),
            Add(),
            Name(
              'placeholder_4',
              Load(),
              lineno=25,
              col_offset=22,
              end_lineno=25,
              end_col_offset=30),
            lineno=25,
            col_offset=11,
            end_lineno=25,
            end_col_offset=30),
          lineno=25,
          col_offset=4,
          end_lineno=25,
          end_col_offset=30)],
      [],
      lineno=17,
      col_offset=0,
      end_lineno=25,
      end_col_offset=30),
    FunctionDef(
      'placeholder_5',
      arguments(
        [],
        [
          arg(
            'placeholder_6',
            lineno=28,
            col_offset=24,
            end_lineno=28,
            end_col_offset=30),
          arg(
            'placeholder_1',
            lineno=28,
            col_offset=32,
            end_lineno=28,
            end_col_offset=38)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          Compare(
            Name(
              'placeholder_1',
              Load(),
              lineno=36,
              col_offset=11,
              end_lineno=36,
              end_col_offset=17),
            [
              In()],
            [
              Name(
                'placeholder_6',
                Load(),
                lineno=36,
                col_offset=21,
                end_lineno=36,
                end_col_offset=27)],
            lineno=36,
            col_offset=11,
            end_lineno=36,
            end_col_offset=27),
          lineno=36,
          col_offset=4,
          end_lineno=36,
          end_col_offset=27)],
      [],
      lineno=28,
      col_offset=0,
      end_lineno=36,
      end_col_offset=27),
    FunctionDef(
      'placeholder_7',
      arguments(
        [],
        [
          arg(
            'placeholder_8',
            lineno=39,
            col_offset=17,
            end_lineno=39,
            end_col_offset=21)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BinOp(
            Call(
              Name(
                'sum',
                Load(),
                lineno=46,
                col_offset=11,
                end_lineno=46,
                end_col_offset=14),
              [
                Name(
                  'placeholder_8',
                  Load(),
                  lineno=46,
                  col_offset=15,
                  end_lineno=46,
                  end_col_offset=19)],
              [],
              lineno=46,
              col_offset=11,
              end_lineno=46,
              end_col_offset=20),
            Div(),
            Call(
              Name(
                'len',
                Load(),
                lineno=46,
                col_offset=23,
                end_lineno=46,
                end_col_offset=26),
              [
                Name(
                  'placeholder_8',
                  Load(),
                  lineno=46,
                  col_offset=27,
                  end_lineno=46,
                  end_col_offset=31)],
              [],
              lineno=46,
              col_offset=23,
              end_lineno=46,
              end_col_offset=32),
            lineno=46,
            col_offset=11,
            end_lineno=46,
            end_col_offset=32),
          lineno=46,
          col_offset=4,
          end_lineno=46,
          end_col_offset=32)],
      [],
      lineno=39,
      col_offset=0,
      end_lineno=46,
      end_col_offset=32),
    FunctionDef(
      'placeholder_9',
      arguments(
        [],
        [
          arg(
            'placeholder_8',
            lineno=49,
            col_offset=30,
            end_lineno=49,
            end_col_offset=34)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'placeholder_10',
              Store(),
              lineno=56,
              col_offset=4,
              end_lineno=56,
              end_col_offset=16)],
          Call(
            Name(
              'placeholder_7',
              Load(),
              lineno=56,
              col_offset=19,
              end_lineno=56,
              end_col_offset=31),
            [
              Name(
                'placeholder_8',
                Load(),
                lineno=56,
                col_offset=32,
                end_lineno=56,
                end_col_offset=36)],
            [],
            lineno=56,
            col_offset=19,
            end_lineno=56,
            end_col_offset=37),
          lineno=56,
          col_offset=4,
          end_lineno=56,
          end_col_offset=37),
        If(
          Compare(
            Call(
              Name(
                'placeholder_7',
                Load(),
                lineno=58,
                col_offset=7,
                end_lineno=58,
                end_col_offset=19),
              [
                List(
                  [
                    Subscript(
                      Name(
                        'placeholder_8',
                        Load(),
                        lineno=58,
                        col_offset=21,
                        end_lineno=58,
                        end_col_offset=25),
                      Constant(
                        0,
                        lineno=58,
                        col_offset=26,
                        end_lineno=58,
                        end_col_offset=27),
                      Load(),
                      lineno=58,
                      col_offset=21,
                      end_lineno=58,
                      end_col_offset=28),
                    Subscript(
                      Name(
                        'placeholder_8',
                        Load(),
                        lineno=58,
                        col_offset=30,
                        end_lineno=58,
                        end_col_offset=34),
                      UnaryOp(
                        USub(),
                        Constant(
                          1,
                          lineno=58,
                          col_offset=36,
                          end_lineno=58,
                          end_col_offset=37),
                        lineno=58,
                        col_offset=35,
                        end_lineno=58,
                        end_col_offset=37),
                      Load(),
                      lineno=58,
                      col_offset=30,
                      end_lineno=58,
                      end_col_offset=38)],
                  Load(),
                  lineno=58,
                  col_offset=20,
                  end_lineno=58,
                  end_col_offset=39)],
              [],
              lineno=58,
              col_offset=7,
              end_lineno=58,
              end_col_offset=40),
            [
              Eq()],
            [
              Name(
                'placeholder_10',
                Load(),
                lineno=58,
                col_offset=44,
                end_lineno=58,
                end_col_offset=56)],
            lineno=58,
            col_offset=7,
            end_lineno=58,
            end_col_offset=56),
          [
            Assign(
              [
                Name(
                  'placeholder_11',
                  Store(),
                  lineno=59,
                  col_offset=8,
                  end_lineno=59,
                  end_col_offset=15)],
              Constant(
                True,
                lineno=59,
                col_offset=18,
                end_lineno=59,
                end_col_offset=22),
              lineno=59,
              col_offset=8,
              end_lineno=59,
              end_col_offset=22)],
          [
            If(
              Compare(
                Subscript(
                  Name(
                    'placeholder_8',
                    Load(),
                    lineno=60,
                    col_offset=9,
                    end_lineno=60,
                    end_col_offset=13),
                  BinOp(
                    Call(
                      Name(
                        'len',
                        Load(),
                        lineno=60,
                        col_offset=14,
                        end_lineno=60,
                        end_col_offset=17),
                      [
                        Name(
                          'placeholder_8',
                          Load(),
                          lineno=60,
                          col_offset=18,
                          end_lineno=60,
                          end_col_offset=22)],
                      [],
                      lineno=60,
                      col_offset=14,
                      end_lineno=60,
                      end_col_offset=23),
                    FloorDiv(),
                    Constant(
                      2,
                      lineno=60,
                      col_offset=27,
                      end_lineno=60,
                      end_col_offset=28),
                    lineno=60,
                    col_offset=14,
                    end_lineno=60,
                    end_col_offset=28),
                  Load(),
                  lineno=60,
                  col_offset=9,
                  end_lineno=60,
                  end_col_offset=29),
                [
                  Eq()],
                [
                  Name(
                    'placeholder_10',
                    Load(),
                    lineno=60,
                    col_offset=33,
                    end_lineno=60,
                    end_col_offset=45)],
                lineno=60,
                col_offset=9,
                end_lineno=60,
                end_col_offset=45),
              [
                Assign(
                  [
                    Name(
                      'placeholder_11',
                      Store(),
                      lineno=61,
                      col_offset=8,
                      end_lineno=61,
                      end_col_offset=15)],
                  Constant(
                    True,
                    lineno=61,
                    col_offset=18,
                    end_lineno=61,
                    end_col_offset=22),
                  lineno=61,
                  col_offset=8,
                  end_lineno=61,
                  end_col_offset=22)],
              [
                Assign(
                  [
                    Name(
                      'placeholder_11',
                      Store(),
                      lineno=63,
                      col_offset=8,
                      end_lineno=63,
                      end_col_offset=15)],
                  Constant(
                    False,
                    lineno=63,
                    col_offset=18,
                    end_lineno=63,
                    end_col_offset=23),
                  lineno=63,
                  col_offset=8,
                  end_lineno=63,
                  end_col_offset=23)],
              lineno=60,
              col_offset=4,
              end_lineno=63,
              end_col_offset=23)],
          lineno=58,
          col_offset=4,
          end_lineno=63,
          end_col_offset=23),
        Return(
          Name(
            'placeholder_11',
            Load(),
            lineno=65,
            col_offset=11,
            end_lineno=65,
            end_col_offset=18),
          lineno=65,
          col_offset=4,
          end_lineno=65,
          end_col_offset=18)],
      [],
      lineno=49,
      col_offset=0,
      end_lineno=65,
      end_col_offset=18),
    FunctionDef(
      'placeholder_12',
      arguments(
        [],
        [
          arg(
            'placeholder_8',
            lineno=68,
            col_offset=32,
            end_lineno=68,
            end_col_offset=36)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          Compare(
            Call(
              Name(
                'placeholder_7',
                Load(),
                lineno=75,
                col_offset=11,
                end_lineno=75,
                end_col_offset=23),
              [
                Subscript(
                  Name(
                    'placeholder_8',
                    Load(),
                    lineno=75,
                    col_offset=24,
                    end_lineno=75,
                    end_col_offset=28),
                  Slice(
                    step=Constant(
                      2,
                      lineno=75,
                      col_offset=31,
                      end_lineno=75,
                      end_col_offset=32),
                    lineno=75,
                    col_offset=29,
                    end_lineno=75,
                    end_col_offset=32),
                  Load(),
                  lineno=75,
                  col_offset=24,
                  end_lineno=75,
                  end_col_offset=33)],
              [],
              lineno=75,
              col_offset=11,
              end_lineno=75,
              end_col_offset=34),
            [
              Eq()],
            [
              Call(
                Name(
                  'placeholder_7',
                  Load(),
                  lineno=75,
                  col_offset=38,
                  end_lineno=75,
                  end_col_offset=50),
                [
                  Subscript(
                    Name(
                      'placeholder_8',
                      Load(),
                      lineno=75,
                      col_offset=51,
                      end_lineno=75,
                      end_col_offset=55),
                    Slice(
                      Constant(
                        1,
                        lineno=75,
                        col_offset=56,
                        end_lineno=75,
                        end_col_offset=57),
                      step=Constant(
                        2,
                        lineno=75,
                        col_offset=59,
                        end_lineno=75,
                        end_col_offset=60),
                      lineno=75,
                      col_offset=56,
                      end_lineno=75,
                      end_col_offset=60),
                    Load(),
                    lineno=75,
                    col_offset=51,
                    end_lineno=75,
                    end_col_offset=61)],
                [],
                lineno=75,
                col_offset=38,
                end_lineno=75,
                end_col_offset=62)],
            lineno=75,
            col_offset=11,
            end_lineno=75,
            end_col_offset=62),
          lineno=75,
          col_offset=4,
          end_lineno=75,
          end_col_offset=62)],
      [],
      lineno=68,
      col_offset=0,
      end_lineno=75,
      end_col_offset=62),
    FunctionDef(
      'placeholder_13',
      arguments(
        [],
        [
          arg(
            'placeholder_8',
            lineno=78,
            col_offset=22,
            end_lineno=78,
            end_col_offset=26)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        If(
          Compare(
            Subscript(
              Name(
                'placeholder_8',
                Load(),
                lineno=85,
                col_offset=7,
                end_lineno=85,
                end_col_offset=11),
              UnaryOp(
                USub(),
                Constant(
                  1,
                  lineno=85,
                  col_offset=13,
                  end_lineno=85,
                  end_col_offset=14),
                lineno=85,
                col_offset=12,
                end_lineno=85,
                end_col_offset=14),
              Load(),
              lineno=85,
              col_offset=7,
              end_lineno=85,
              end_col_offset=15),
            [
              Eq()],
            [
              Constant(
                11,
                lineno=85,
                col_offset=19,
                end_lineno=85,
                end_col_offset=21)],
            lineno=85,
            col_offset=7,
            end_lineno=85,
            end_col_offset=21),
          [
            AugAssign(
              Subscript(
                Name(
                  'placeholder_8',
                  Load(),
                  lineno=86,
                  col_offset=8,
                  end_lineno=86,
                  end_col_offset=12),
                UnaryOp(
                  USub(),
                  Constant(
                    1,
                    lineno=86,
                    col_offset=14,
                    end_lineno=86,
                    end_col_offset=15),
                  lineno=86,
                  col_offset=13,
                  end_lineno=86,
                  end_col_offset=15),
                Store(),
                lineno=86,
                col_offset=8,
                end_lineno=86,
                end_col_offset=16),
              Mult(),
              Constant(
                2,
                lineno=86,
                col_offset=20,
                end_lineno=86,
                end_col_offset=21),
              lineno=86,
              col_offset=8,
              end_lineno=86,
              end_col_offset=21)],
          [],
          lineno=85,
          col_offset=4,
          end_lineno=86,
          end_col_offset=21),
        Return(
          Name(
            'placeholder_8',
            Load(),
            lineno=88,
            col_offset=11,
            end_lineno=88,
            end_col_offset=15),
          lineno=88,
          col_offset=4,
          end_lineno=88,
          end_col_offset=15)],
      [],
      lineno=78,
      col_offset=0,
      end_lineno=88,
      end_col_offset=15)],
  [])
## END NORMALIZED TREE ##