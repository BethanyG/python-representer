## BEGIN NORMALIZED CODE ##
def placeholder_0(placeholder_1):
    return (placeholder_1 + 3) % 24


def placeholder_2(placeholder_3):
    return round(placeholder_3 / 1000, 1)


def placeholder_4(placeholder_3):
    return placeholder_2(placeholder_3) // 3600


def placeholder_5(placeholder_6):
    return placeholder_6 / 100


def placeholder_7(placeholder_3, placeholder_6, placeholder_8):
    return placeholder_8 * (placeholder_4(placeholder_3) / placeholder_5(placeholder_6))

## END NORMALIZED CODE ##

## BEGIN TREE BEFORE ##
Module(
  [
    Expr(
      Constant(
        'Functions to help the company calculate their power usage.',
        lineno=1,
        col_offset=0,
        end_lineno=1,
        end_col_offset=64),
      lineno=1,
      col_offset=0,
      end_lineno=1,
      end_col_offset=64),
    FunctionDef(
      'get_extra_hours',
      arguments(
        [],
        [
          arg(
            'hours',
            lineno=4,
            col_offset=20,
            end_lineno=4,
            end_col_offset=25)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Return the number of hours.\n\n    :param: hours: int - number of hours.\n    :return: int - number of "extra" hours.\n    ',
            lineno=5,
            col_offset=4,
            end_lineno=9,
            end_col_offset=7),
          lineno=5,
          col_offset=4,
          end_lineno=9,
          end_col_offset=7),
        Return(
          BinOp(
            BinOp(
              Name(
                'hours',
                Load(),
                lineno=11,
                col_offset=12,
                end_lineno=11,
                end_col_offset=17),
              Add(),
              Constant(
                3,
                lineno=11,
                col_offset=20,
                end_lineno=11,
                end_col_offset=21),
              lineno=11,
              col_offset=12,
              end_lineno=11,
              end_col_offset=21),
            Mod(),
            Constant(
              24,
              lineno=11,
              col_offset=25,
              end_lineno=11,
              end_col_offset=27),
            lineno=11,
            col_offset=11,
            end_lineno=11,
            end_col_offset=27),
          lineno=11,
          col_offset=4,
          end_lineno=11,
          end_col_offset=27)],
      [],
      lineno=4,
      col_offset=0,
      end_lineno=11,
      end_col_offset=27),
    FunctionDef(
      'get_kW_amount',
      arguments(
        [],
        [
          arg(
            'watts',
            lineno=14,
            col_offset=18,
            end_lineno=14,
            end_col_offset=23)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Return the kW amount of a given watt amount.\n\n    :param: watts: int - watt amount.\n    :return: float - kW amount.\n    ',
            lineno=15,
            col_offset=4,
            end_lineno=19,
            end_col_offset=7),
          lineno=15,
          col_offset=4,
          end_lineno=19,
          end_col_offset=7),
        Return(
          Call(
            Name(
              'round',
              Load(),
              lineno=22,
              col_offset=11,
              end_lineno=22,
              end_col_offset=16),
            [
              BinOp(
                Name(
                  'watts',
                  Load(),
                  lineno=22,
                  col_offset=17,
                  end_lineno=22,
                  end_col_offset=22),
                Div(),
                Constant(
                  1000,
                  lineno=22,
                  col_offset=25,
                  end_lineno=22,
                  end_col_offset=29),
                lineno=22,
                col_offset=17,
                end_lineno=22,
                end_col_offset=29),
              Constant(
                1,
                lineno=22,
                col_offset=31,
                end_lineno=22,
                end_col_offset=32)],
            [],
            lineno=22,
            col_offset=11,
            end_lineno=22,
            end_col_offset=33),
          lineno=22,
          col_offset=4,
          end_lineno=22,
          end_col_offset=33)],
      [],
      lineno=14,
      col_offset=0,
      end_lineno=22,
      end_col_offset=33),
    FunctionDef(
      'get_kwh_amount',
      arguments(
        [],
        [
          arg(
            'watts',
            lineno=25,
            col_offset=19,
            end_lineno=25,
            end_col_offset=24)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Return the kWh amount of a given watt amount and hours.\n\n    :param: watts: int - watt amount.\n    :return: int - kilowatt hour amount.\n    ',
            lineno=26,
            col_offset=4,
            end_lineno=30,
            end_col_offset=7),
          lineno=26,
          col_offset=4,
          end_lineno=30,
          end_col_offset=7),
        Return(
          BinOp(
            Call(
              Name(
                'get_kW_amount',
                Load(),
                lineno=31,
                col_offset=11,
                end_lineno=31,
                end_col_offset=24),
              [
                Name(
                  'watts',
                  Load(),
                  lineno=31,
                  col_offset=25,
                  end_lineno=31,
                  end_col_offset=30)],
              [],
              lineno=31,
              col_offset=11,
              end_lineno=31,
              end_col_offset=31),
            FloorDiv(),
            Constant(
              3600,
              lineno=31,
              col_offset=35,
              end_lineno=31,
              end_col_offset=39),
            lineno=31,
            col_offset=11,
            end_lineno=31,
            end_col_offset=39),
          lineno=31,
          col_offset=4,
          end_lineno=31,
          end_col_offset=39)],
      [],
      lineno=25,
      col_offset=0,
      end_lineno=31,
      end_col_offset=39),
    FunctionDef(
      'get_efficiency',
      arguments(
        [],
        [
          arg(
            'power_factor',
            lineno=34,
            col_offset=19,
            end_lineno=34,
            end_col_offset=31)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Return the efficiency calculated from the power factor.\n\n    :param: power_factor: float.\n    :return: float - efficiency.\n    ',
            lineno=35,
            col_offset=4,
            end_lineno=39,
            end_col_offset=7),
          lineno=35,
          col_offset=4,
          end_lineno=39,
          end_col_offset=7),
        Return(
          BinOp(
            Name(
              'power_factor',
              Load(),
              lineno=40,
              col_offset=11,
              end_lineno=40,
              end_col_offset=23),
            Div(),
            Constant(
              100,
              lineno=40,
              col_offset=26,
              end_lineno=40,
              end_col_offset=29),
            lineno=40,
            col_offset=11,
            end_lineno=40,
            end_col_offset=29),
          lineno=40,
          col_offset=4,
          end_lineno=40,
          end_col_offset=29)],
      [],
      lineno=34,
      col_offset=0,
      end_lineno=40,
      end_col_offset=29),
    FunctionDef(
      'get_cost',
      arguments(
        [],
        [
          arg(
            'watts',
            lineno=43,
            col_offset=13,
            end_lineno=43,
            end_col_offset=18),
          arg(
            'power_factor',
            lineno=43,
            col_offset=20,
            end_lineno=43,
            end_col_offset=32),
          arg(
            'price',
            lineno=43,
            col_offset=34,
            end_lineno=43,
            end_col_offset=39)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Calculate the cost of a given kWh value, efficiency and price.\n\n    :param: watts: int - watt value.\n    :param: power_factor: float - efficiency.\n    :param: price: float - price of kWh.\n    :return: float - cost of kWh.\n    ',
            lineno=44,
            col_offset=4,
            end_lineno=50,
            end_col_offset=7),
          lineno=44,
          col_offset=4,
          end_lineno=50,
          end_col_offset=7),
        Return(
          BinOp(
            Name(
              'price',
              Load(),
              lineno=51,
              col_offset=11,
              end_lineno=51,
              end_col_offset=16),
            Mult(),
            BinOp(
              Call(
                Name(
                  'get_kwh_amount',
                  Load(),
                  lineno=51,
                  col_offset=20,
                  end_lineno=51,
                  end_col_offset=34),
                [
                  Name(
                    'watts',
                    Load(),
                    lineno=51,
                    col_offset=35,
                    end_lineno=51,
                    end_col_offset=40)],
                [],
                lineno=51,
                col_offset=20,
                end_lineno=51,
                end_col_offset=41),
              Div(),
              Call(
                Name(
                  'get_efficiency',
                  Load(),
                  lineno=51,
                  col_offset=44,
                  end_lineno=51,
                  end_col_offset=58),
                [
                  Name(
                    'power_factor',
                    Load(),
                    lineno=51,
                    col_offset=59,
                    end_lineno=51,
                    end_col_offset=71)],
                [],
                lineno=51,
                col_offset=44,
                end_lineno=51,
                end_col_offset=72),
              lineno=51,
              col_offset=20,
              end_lineno=51,
              end_col_offset=72),
            lineno=51,
            col_offset=11,
            end_lineno=51,
            end_col_offset=73),
          lineno=51,
          col_offset=4,
          end_lineno=51,
          end_col_offset=73)],
      [],
      lineno=43,
      col_offset=0,
      end_lineno=51,
      end_col_offset=73)],
  [])
## END TREE BEFORE ##

## BEGIN NORMALIZED TREE ##
Module(
  [
    FunctionDef(
      'placeholder_0',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=4,
            col_offset=20,
            end_lineno=4,
            end_col_offset=25)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BinOp(
            BinOp(
              Name(
                'placeholder_1',
                Load(),
                lineno=11,
                col_offset=12,
                end_lineno=11,
                end_col_offset=17),
              Add(),
              Constant(
                3,
                lineno=11,
                col_offset=20,
                end_lineno=11,
                end_col_offset=21),
              lineno=11,
              col_offset=12,
              end_lineno=11,
              end_col_offset=21),
            Mod(),
            Constant(
              24,
              lineno=11,
              col_offset=25,
              end_lineno=11,
              end_col_offset=27),
            lineno=11,
            col_offset=11,
            end_lineno=11,
            end_col_offset=27),
          lineno=11,
          col_offset=4,
          end_lineno=11,
          end_col_offset=27)],
      [],
      lineno=4,
      col_offset=0,
      end_lineno=11,
      end_col_offset=27),
    FunctionDef(
      'placeholder_2',
      arguments(
        [],
        [
          arg(
            'placeholder_3',
            lineno=14,
            col_offset=18,
            end_lineno=14,
            end_col_offset=23)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          Call(
            Name(
              'round',
              Load(),
              lineno=22,
              col_offset=11,
              end_lineno=22,
              end_col_offset=16),
            [
              BinOp(
                Name(
                  'placeholder_3',
                  Load(),
                  lineno=22,
                  col_offset=17,
                  end_lineno=22,
                  end_col_offset=22),
                Div(),
                Constant(
                  1000,
                  lineno=22,
                  col_offset=25,
                  end_lineno=22,
                  end_col_offset=29),
                lineno=22,
                col_offset=17,
                end_lineno=22,
                end_col_offset=29),
              Constant(
                1,
                lineno=22,
                col_offset=31,
                end_lineno=22,
                end_col_offset=32)],
            [],
            lineno=22,
            col_offset=11,
            end_lineno=22,
            end_col_offset=33),
          lineno=22,
          col_offset=4,
          end_lineno=22,
          end_col_offset=33)],
      [],
      lineno=14,
      col_offset=0,
      end_lineno=22,
      end_col_offset=33),
    FunctionDef(
      'placeholder_4',
      arguments(
        [],
        [
          arg(
            'placeholder_3',
            lineno=25,
            col_offset=19,
            end_lineno=25,
            end_col_offset=24)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BinOp(
            Call(
              Name(
                'placeholder_2',
                Load(),
                lineno=31,
                col_offset=11,
                end_lineno=31,
                end_col_offset=24),
              [
                Name(
                  'placeholder_3',
                  Load(),
                  lineno=31,
                  col_offset=25,
                  end_lineno=31,
                  end_col_offset=30)],
              [],
              lineno=31,
              col_offset=11,
              end_lineno=31,
              end_col_offset=31),
            FloorDiv(),
            Constant(
              3600,
              lineno=31,
              col_offset=35,
              end_lineno=31,
              end_col_offset=39),
            lineno=31,
            col_offset=11,
            end_lineno=31,
            end_col_offset=39),
          lineno=31,
          col_offset=4,
          end_lineno=31,
          end_col_offset=39)],
      [],
      lineno=25,
      col_offset=0,
      end_lineno=31,
      end_col_offset=39),
    FunctionDef(
      'placeholder_5',
      arguments(
        [],
        [
          arg(
            'placeholder_6',
            lineno=34,
            col_offset=19,
            end_lineno=34,
            end_col_offset=31)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BinOp(
            Name(
              'placeholder_6',
              Load(),
              lineno=40,
              col_offset=11,
              end_lineno=40,
              end_col_offset=23),
            Div(),
            Constant(
              100,
              lineno=40,
              col_offset=26,
              end_lineno=40,
              end_col_offset=29),
            lineno=40,
            col_offset=11,
            end_lineno=40,
            end_col_offset=29),
          lineno=40,
          col_offset=4,
          end_lineno=40,
          end_col_offset=29)],
      [],
      lineno=34,
      col_offset=0,
      end_lineno=40,
      end_col_offset=29),
    FunctionDef(
      'placeholder_7',
      arguments(
        [],
        [
          arg(
            'placeholder_3',
            lineno=43,
            col_offset=13,
            end_lineno=43,
            end_col_offset=18),
          arg(
            'placeholder_6',
            lineno=43,
            col_offset=20,
            end_lineno=43,
            end_col_offset=32),
          arg(
            'placeholder_8',
            lineno=43,
            col_offset=34,
            end_lineno=43,
            end_col_offset=39)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BinOp(
            Name(
              'placeholder_8',
              Load(),
              lineno=51,
              col_offset=11,
              end_lineno=51,
              end_col_offset=16),
            Mult(),
            BinOp(
              Call(
                Name(
                  'placeholder_4',
                  Load(),
                  lineno=51,
                  col_offset=20,
                  end_lineno=51,
                  end_col_offset=34),
                [
                  Name(
                    'placeholder_3',
                    Load(),
                    lineno=51,
                    col_offset=35,
                    end_lineno=51,
                    end_col_offset=40)],
                [],
                lineno=51,
                col_offset=20,
                end_lineno=51,
                end_col_offset=41),
              Div(),
              Call(
                Name(
                  'placeholder_5',
                  Load(),
                  lineno=51,
                  col_offset=44,
                  end_lineno=51,
                  end_col_offset=58),
                [
                  Name(
                    'placeholder_6',
                    Load(),
                    lineno=51,
                    col_offset=59,
                    end_lineno=51,
                    end_col_offset=71)],
                [],
                lineno=51,
                col_offset=44,
                end_lineno=51,
                end_col_offset=72),
              lineno=51,
              col_offset=20,
              end_lineno=51,
              end_col_offset=72),
            lineno=51,
            col_offset=11,
            end_lineno=51,
            end_col_offset=73),
          lineno=51,
          col_offset=4,
          end_lineno=51,
          end_col_offset=73)],
      [],
      lineno=43,
      col_offset=0,
      end_lineno=51,
      end_col_offset=73)],
  [])
## END NORMALIZED TREE ##