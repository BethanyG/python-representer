# BEGIN TREE BEFORE
Module(
  [
    FunctionDef(
      'parse_octal',
      arguments(
        [],
        [
          arg(
            'digits',
            lineno=1,
            col_offset=16,
            end_lineno=1,
            end_col_offset=22)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'digits',
              Store(),
              lineno=2,
              col_offset=4,
              end_lineno=2,
              end_col_offset=10)],
          Call(
            Name(
              '_validate_octal',
              Load(),
              lineno=2,
              col_offset=13,
              end_lineno=2,
              end_col_offset=28),
            [
              Name(
                'digits',
                Load(),
                lineno=2,
                col_offset=29,
                end_lineno=2,
                end_col_offset=35)],
            [],
            lineno=2,
            col_offset=13,
            end_lineno=2,
            end_col_offset=36),
          lineno=2,
          col_offset=4,
          end_lineno=2,
          end_col_offset=36),
        Return(
          Call(
            Name(
              'sum',
              Load(),
              lineno=3,
              col_offset=11,
              end_lineno=3,
              end_col_offset=14),
            [
              GeneratorExp(
                BinOp(
                  Call(
                    Name(
                      'int',
                      Load(),
                      lineno=3,
                      col_offset=15,
                      end_lineno=3,
                      end_col_offset=18),
                    [
                      Name(
                        'digit',
                        Load(),
                        lineno=3,
                        col_offset=19,
                        end_lineno=3,
                        end_col_offset=24)],
                    [],
                    lineno=3,
                    col_offset=15,
                    end_lineno=3,
                    end_col_offset=25),
                  Mult(),
                  BinOp(
                    Constant(
                      8,
                      lineno=3,
                      col_offset=28,
                      end_lineno=3,
                      end_col_offset=29),
                    Pow(),
                    Name(
                      'idx',
                      Load(),
                      lineno=3,
                      col_offset=33,
                      end_lineno=3,
                      end_col_offset=36),
                    lineno=3,
                    col_offset=28,
                    end_lineno=3,
                    end_col_offset=36),
                  lineno=3,
                  col_offset=15,
                  end_lineno=3,
                  end_col_offset=36),
                [
                  comprehension(
                    Tuple(
                      [
                        Name(
                          'idx',
                          Store(),
                          lineno=4,
                          col_offset=20,
                          end_lineno=4,
                          end_col_offset=23),
                        Name(
                          'digit',
                          Store(),
                          lineno=4,
                          col_offset=25,
                          end_lineno=4,
                          end_col_offset=30)],
                      Store(),
                      lineno=4,
                      col_offset=19,
                      end_lineno=4,
                      end_col_offset=31),
                    Call(
                      Name(
                        'enumerate',
                        Load(),
                        lineno=4,
                        col_offset=35,
                        end_lineno=4,
                        end_col_offset=44),
                      [
                        Call(
                          Name(
                            'reversed',
                            Load(),
                            lineno=4,
                            col_offset=45,
                            end_lineno=4,
                            end_col_offset=53),
                          [
                            Name(
                              'digits',
                              Load(),
                              lineno=4,
                              col_offset=54,
                              end_lineno=4,
                              end_col_offset=60)],
                          [],
                          lineno=4,
                          col_offset=45,
                          end_lineno=4,
                          end_col_offset=61)],
                      [],
                      lineno=4,
                      col_offset=35,
                      end_lineno=4,
                      end_col_offset=62),
                    [],
                    0)],
                lineno=3,
                col_offset=14,
                end_lineno=4,
                end_col_offset=63)],
            [],
            lineno=3,
            col_offset=11,
            end_lineno=4,
            end_col_offset=63),
          lineno=3,
          col_offset=4,
          end_lineno=4,
          end_col_offset=63)],
      [],
      lineno=1,
      col_offset=0,
      end_lineno=4,
      end_col_offset=63),
    FunctionDef(
      '_validate_octal',
      arguments(
        [],
        [
          arg(
            'digits',
            lineno=7,
            col_offset=20,
            end_lineno=7,
            end_col_offset=26)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        For(
          Name(
            'digit',
            Store(),
            lineno=8,
            col_offset=8,
            end_lineno=8,
            end_col_offset=13),
          Name(
            'digits',
            Load(),
            lineno=8,
            col_offset=17,
            end_lineno=8,
            end_col_offset=23),
          [
            If(
              UnaryOp(
                Not(),
                Compare(
                  Constant(
                    '0',
                    lineno=9,
                    col_offset=15,
                    end_lineno=9,
                    end_col_offset=18),
                  [
                    LtE(),
                    Lt()],
                  [
                    Name(
                      'digit',
                      Load(),
                      lineno=9,
                      col_offset=22,
                      end_lineno=9,
                      end_col_offset=27),
                    Constant(
                      '8',
                      lineno=9,
                      col_offset=30,
                      end_lineno=9,
                      end_col_offset=33)],
                  lineno=9,
                  col_offset=15,
                  end_lineno=9,
                  end_col_offset=33),
                lineno=9,
                col_offset=11,
                end_lineno=9,
                end_col_offset=33),
              [
                Raise(
                  Call(
                    Name(
                      'ValueError',
                      Load(),
                      lineno=10,
                      col_offset=18,
                      end_lineno=10,
                      end_col_offset=28),
                    [
                      BinOp(
                        Constant(
                          'Invalid octal digit: ',
                          lineno=10,
                          col_offset=29,
                          end_lineno=10,
                          end_col_offset=52),
                        Add(),
                        Name(
                          'digit',
                          Load(),
                          lineno=10,
                          col_offset=55,
                          end_lineno=10,
                          end_col_offset=60),
                        lineno=10,
                        col_offset=29,
                        end_lineno=10,
                        end_col_offset=60)],
                    [],
                    lineno=10,
                    col_offset=18,
                    end_lineno=10,
                    end_col_offset=61),
                  lineno=10,
                  col_offset=12,
                  end_lineno=10,
                  end_col_offset=61)],
              [],
              lineno=9,
              col_offset=8,
              end_lineno=10,
              end_col_offset=61)],
          [],
          lineno=8,
          col_offset=4,
          end_lineno=10,
          end_col_offset=61),
        Return(
          Name(
            'digits',
            Load(),
            lineno=11,
            col_offset=11,
            end_lineno=11,
            end_col_offset=17),
          lineno=11,
          col_offset=4,
          end_lineno=11,
          end_col_offset=17)],
      [],
      lineno=7,
      col_offset=0,
      end_lineno=11,
      end_col_offset=17)],
  [])

# BEGIN TREE AFTER
Module(
  [
    FunctionDef(
      'placeholder_0',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=1,
            col_offset=16,
            end_lineno=1,
            end_col_offset=22)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'placeholder_1',
              Store(),
              lineno=2,
              col_offset=4,
              end_lineno=2,
              end_col_offset=10)],
          Call(
            Name(
              '_validate_octal',
              Load(),
              lineno=2,
              col_offset=13,
              end_lineno=2,
              end_col_offset=28),
            [
              Name(
                'placeholder_1',
                Load(),
                lineno=2,
                col_offset=29,
                end_lineno=2,
                end_col_offset=35)],
            [],
            lineno=2,
            col_offset=13,
            end_lineno=2,
            end_col_offset=36),
          lineno=2,
          col_offset=4,
          end_lineno=2,
          end_col_offset=36),
        Return(
          Call(
            Name(
              'sum',
              Load(),
              lineno=3,
              col_offset=11,
              end_lineno=3,
              end_col_offset=14),
            [
              GeneratorExp(
                BinOp(
                  Call(
                    Name(
                      'int',
                      Load(),
                      lineno=3,
                      col_offset=15,
                      end_lineno=3,
                      end_col_offset=18),
                    [
                      Name(
                        'placeholder_3',
                        Load(),
                        lineno=3,
                        col_offset=19,
                        end_lineno=3,
                        end_col_offset=24)],
                    [],
                    lineno=3,
                    col_offset=15,
                    end_lineno=3,
                    end_col_offset=25),
                  Mult(),
                  BinOp(
                    Constant(
                      8,
                      lineno=3,
                      col_offset=28,
                      end_lineno=3,
                      end_col_offset=29),
                    Pow(),
                    Name(
                      'placeholder_2',
                      Load(),
                      lineno=3,
                      col_offset=33,
                      end_lineno=3,
                      end_col_offset=36),
                    lineno=3,
                    col_offset=28,
                    end_lineno=3,
                    end_col_offset=36),
                  lineno=3,
                  col_offset=15,
                  end_lineno=3,
                  end_col_offset=36),
                [
                  comprehension(
                    Tuple(
                      [
                        Name(
                          'placeholder_2',
                          Store(),
                          lineno=4,
                          col_offset=20,
                          end_lineno=4,
                          end_col_offset=23),
                        Name(
                          'placeholder_3',
                          Store(),
                          lineno=4,
                          col_offset=25,
                          end_lineno=4,
                          end_col_offset=30)],
                      Store(),
                      lineno=4,
                      col_offset=19,
                      end_lineno=4,
                      end_col_offset=31),
                    Call(
                      Name(
                        'enumerate',
                        Load(),
                        lineno=4,
                        col_offset=35,
                        end_lineno=4,
                        end_col_offset=44),
                      [
                        Call(
                          Name(
                            'reversed',
                            Load(),
                            lineno=4,
                            col_offset=45,
                            end_lineno=4,
                            end_col_offset=53),
                          [
                            Name(
                              'placeholder_1',
                              Load(),
                              lineno=4,
                              col_offset=54,
                              end_lineno=4,
                              end_col_offset=60)],
                          [],
                          lineno=4,
                          col_offset=45,
                          end_lineno=4,
                          end_col_offset=61)],
                      [],
                      lineno=4,
                      col_offset=35,
                      end_lineno=4,
                      end_col_offset=62),
                    [],
                    0)],
                lineno=3,
                col_offset=14,
                end_lineno=4,
                end_col_offset=63)],
            [],
            lineno=3,
            col_offset=11,
            end_lineno=4,
            end_col_offset=63),
          lineno=3,
          col_offset=4,
          end_lineno=4,
          end_col_offset=63)],
      [],
      lineno=1,
      col_offset=0,
      end_lineno=4,
      end_col_offset=63),
    FunctionDef(
      'placeholder_4',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=7,
            col_offset=20,
            end_lineno=7,
            end_col_offset=26)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        For(
          Name(
            'placeholder_3',
            Store(),
            lineno=8,
            col_offset=8,
            end_lineno=8,
            end_col_offset=13),
          Name(
            'placeholder_1',
            Load(),
            lineno=8,
            col_offset=17,
            end_lineno=8,
            end_col_offset=23),
          [
            If(
              UnaryOp(
                Not(),
                Compare(
                  Constant(
                    '0',
                    lineno=9,
                    col_offset=15,
                    end_lineno=9,
                    end_col_offset=18),
                  [
                    LtE(),
                    Lt()],
                  [
                    Name(
                      'placeholder_3',
                      Load(),
                      lineno=9,
                      col_offset=22,
                      end_lineno=9,
                      end_col_offset=27),
                    Constant(
                      '8',
                      lineno=9,
                      col_offset=30,
                      end_lineno=9,
                      end_col_offset=33)],
                  lineno=9,
                  col_offset=15,
                  end_lineno=9,
                  end_col_offset=33),
                lineno=9,
                col_offset=11,
                end_lineno=9,
                end_col_offset=33),
              [
                Raise(
                  Call(
                    Name(
                      'ValueError',
                      Load(),
                      lineno=10,
                      col_offset=18,
                      end_lineno=10,
                      end_col_offset=28),
                    [
                      BinOp(
                        Constant(
                          'Invalid octal digit: ',
                          lineno=10,
                          col_offset=29,
                          end_lineno=10,
                          end_col_offset=52),
                        Add(),
                        Name(
                          'placeholder_3',
                          Load(),
                          lineno=10,
                          col_offset=55,
                          end_lineno=10,
                          end_col_offset=60),
                        lineno=10,
                        col_offset=29,
                        end_lineno=10,
                        end_col_offset=60)],
                    [],
                    lineno=10,
                    col_offset=18,
                    end_lineno=10,
                    end_col_offset=61),
                  lineno=10,
                  col_offset=12,
                  end_lineno=10,
                  end_col_offset=61)],
              [],
              lineno=9,
              col_offset=8,
              end_lineno=10,
              end_col_offset=61)],
          [],
          lineno=8,
          col_offset=4,
          end_lineno=10,
          end_col_offset=61),
        Return(
          Name(
            'placeholder_1',
            Load(),
            lineno=11,
            col_offset=11,
            end_lineno=11,
            end_col_offset=17),
          lineno=11,
          col_offset=4,
          end_lineno=11,
          end_col_offset=17)],
      [],
      lineno=7,
      col_offset=0,
      end_lineno=11,
      end_col_offset=17)],
  [])

# BEGIN NORMALIZED CODE AFTER
def placeholder_0(placeholder_1):
    placeholder_1 = _validate_octal(placeholder_1)
    return sum(
        (
            int(placeholder_3) * 8**placeholder_2
            for placeholder_2, placeholder_3 in enumerate(reversed(placeholder_1))
        )
    )


def placeholder_4(placeholder_1):
    for placeholder_3 in placeholder_1:
        if not "0" <= placeholder_3 < "8":
            raise ValueError("Invalid octal digit: " + placeholder_3)
    return placeholder_1
