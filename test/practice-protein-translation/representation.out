# BEGIN TREE BEFORE
Module(
  [
    Assign(
      [
        Name(
          'CODONS',
          Store(),
          lineno=1,
          col_offset=0,
          end_lineno=1,
          end_col_offset=6)],
      Dict(
        [
          Constant(
            'AUG',
            lineno=1,
            col_offset=10,
            end_lineno=1,
            end_col_offset=15),
          Constant(
            'UUU',
            lineno=1,
            col_offset=31,
            end_lineno=1,
            end_col_offset=36),
          Constant(
            'UUC',
            lineno=2,
            col_offset=10,
            end_lineno=2,
            end_col_offset=15),
          Constant(
            'UUA',
            lineno=2,
            col_offset=34,
            end_lineno=2,
            end_col_offset=39),
          Constant(
            'UUG',
            lineno=2,
            col_offset=52,
            end_lineno=2,
            end_col_offset=57),
          Constant(
            'UCU',
            lineno=3,
            col_offset=10,
            end_lineno=3,
            end_col_offset=15),
          Constant(
            'UCC',
            lineno=3,
            col_offset=27,
            end_lineno=3,
            end_col_offset=32),
          Constant(
            'UCA',
            lineno=3,
            col_offset=44,
            end_lineno=3,
            end_col_offset=49),
          Constant(
            'UCG',
            lineno=4,
            col_offset=10,
            end_lineno=4,
            end_col_offset=15),
          Constant(
            'UAU',
            lineno=4,
            col_offset=27,
            end_lineno=4,
            end_col_offset=32),
          Constant(
            'UAC',
            lineno=4,
            col_offset=46,
            end_lineno=4,
            end_col_offset=51),
          Constant(
            'UGU',
            lineno=5,
            col_offset=10,
            end_lineno=5,
            end_col_offset=15),
          Constant(
            'UGC',
            lineno=5,
            col_offset=29,
            end_lineno=5,
            end_col_offset=34),
          Constant(
            'UGG',
            lineno=5,
            col_offset=48,
            end_lineno=5,
            end_col_offset=53),
          Constant(
            'UAA',
            lineno=6,
            col_offset=10,
            end_lineno=6,
            end_col_offset=15),
          Constant(
            'UAG',
            lineno=6,
            col_offset=25,
            end_lineno=6,
            end_col_offset=30),
          Constant(
            'UGA',
            lineno=6,
            col_offset=40,
            end_lineno=6,
            end_col_offset=45)],
        [
          Constant(
            'Methionine',
            lineno=1,
            col_offset=17,
            end_lineno=1,
            end_col_offset=29),
          Constant(
            'Phenylalanine',
            lineno=1,
            col_offset=38,
            end_lineno=1,
            end_col_offset=53),
          Constant(
            'Phenylalanine',
            lineno=2,
            col_offset=17,
            end_lineno=2,
            end_col_offset=32),
          Constant(
            'Leucine',
            lineno=2,
            col_offset=41,
            end_lineno=2,
            end_col_offset=50),
          Constant(
            'Leucine',
            lineno=2,
            col_offset=59,
            end_lineno=2,
            end_col_offset=68),
          Constant(
            'Serine',
            lineno=3,
            col_offset=17,
            end_lineno=3,
            end_col_offset=25),
          Constant(
            'Serine',
            lineno=3,
            col_offset=34,
            end_lineno=3,
            end_col_offset=42),
          Constant(
            'Serine',
            lineno=3,
            col_offset=51,
            end_lineno=3,
            end_col_offset=59),
          Constant(
            'Serine',
            lineno=4,
            col_offset=17,
            end_lineno=4,
            end_col_offset=25),
          Constant(
            'Tyrosine',
            lineno=4,
            col_offset=34,
            end_lineno=4,
            end_col_offset=44),
          Constant(
            'Tyrosine',
            lineno=4,
            col_offset=53,
            end_lineno=4,
            end_col_offset=63),
          Constant(
            'Cysteine',
            lineno=5,
            col_offset=17,
            end_lineno=5,
            end_col_offset=27),
          Constant(
            'Cysteine',
            lineno=5,
            col_offset=36,
            end_lineno=5,
            end_col_offset=46),
          Constant(
            'Tryptophan',
            lineno=5,
            col_offset=55,
            end_lineno=5,
            end_col_offset=67),
          Constant(
            'STOP',
            lineno=6,
            col_offset=17,
            end_lineno=6,
            end_col_offset=23),
          Constant(
            'STOP',
            lineno=6,
            col_offset=32,
            end_lineno=6,
            end_col_offset=38),
          Constant(
            'STOP',
            lineno=6,
            col_offset=47,
            end_lineno=6,
            end_col_offset=53)],
        lineno=1,
        col_offset=9,
        end_lineno=6,
        end_col_offset=54),
      lineno=1,
      col_offset=0,
      end_lineno=6,
      end_col_offset=54),
    FunctionDef(
      'of_codon',
      arguments(
        [],
        [
          arg(
            'codon',
            lineno=9,
            col_offset=13,
            end_lineno=9,
            end_col_offset=18)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        If(
          Compare(
            Name(
              'codon',
              Load(),
              lineno=10,
              col_offset=7,
              end_lineno=10,
              end_col_offset=12),
            [
              NotIn()],
            [
              Name(
                'CODONS',
                Load(),
                lineno=10,
                col_offset=20,
                end_lineno=10,
                end_col_offset=26)],
            lineno=10,
            col_offset=7,
            end_lineno=10,
            end_col_offset=26),
          [
            Raise(
              Call(
                Name(
                  'ValueError',
                  Load(),
                  lineno=11,
                  col_offset=14,
                  end_lineno=11,
                  end_col_offset=24),
                [
                  JoinedStr(
                    [
                      Constant(
                        'Invalid codon: ',
                        lineno=11,
                        col_offset=25,
                        end_lineno=11,
                        end_col_offset=50),
                      FormattedValue(
                        Name(
                          'codon',
                          Load(),
                          lineno=11,
                          col_offset=43,
                          end_lineno=11,
                          end_col_offset=48),
                        -1,
                        lineno=11,
                        col_offset=25,
                        end_lineno=11,
                        end_col_offset=50)],
                    lineno=11,
                    col_offset=25,
                    end_lineno=11,
                    end_col_offset=50)],
                [],
                lineno=11,
                col_offset=14,
                end_lineno=11,
                end_col_offset=51),
              lineno=11,
              col_offset=8,
              end_lineno=11,
              end_col_offset=51)],
          [],
          lineno=10,
          col_offset=4,
          end_lineno=11,
          end_col_offset=51),
        Return(
          Subscript(
            Name(
              'CODONS',
              Load(),
              lineno=12,
              col_offset=11,
              end_lineno=12,
              end_col_offset=17),
            Name(
              'codon',
              Load(),
              lineno=12,
              col_offset=18,
              end_lineno=12,
              end_col_offset=23),
            Load(),
            lineno=12,
            col_offset=11,
            end_lineno=12,
            end_col_offset=24),
          lineno=12,
          col_offset=4,
          end_lineno=12,
          end_col_offset=24)],
      [],
      lineno=9,
      col_offset=0,
      end_lineno=12,
      end_col_offset=24),
    FunctionDef(
      'proteins',
      arguments(
        [],
        [
          arg(
            'strand',
            lineno=15,
            col_offset=13,
            end_lineno=15,
            end_col_offset=19)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'protein_list',
              Store(),
              lineno=16,
              col_offset=4,
              end_lineno=16,
              end_col_offset=16)],
          List(
            [],
            Load(),
            lineno=16,
            col_offset=19,
            end_lineno=16,
            end_col_offset=21),
          lineno=16,
          col_offset=4,
          end_lineno=16,
          end_col_offset=21),
        For(
          Name(
            'codon',
            Store(),
            lineno=17,
            col_offset=8,
            end_lineno=17,
            end_col_offset=13),
          Call(
            Name(
              'map',
              Load(),
              lineno=17,
              col_offset=17,
              end_lineno=17,
              end_col_offset=20),
            [
              Name(
                'of_codon',
                Load(),
                lineno=17,
                col_offset=21,
                end_lineno=17,
                end_col_offset=29),
              Call(
                Name(
                  '_chunkstring',
                  Load(),
                  lineno=17,
                  col_offset=31,
                  end_lineno=17,
                  end_col_offset=43),
                [
                  Name(
                    'strand',
                    Load(),
                    lineno=17,
                    col_offset=44,
                    end_lineno=17,
                    end_col_offset=50),
                  Constant(
                    3,
                    lineno=17,
                    col_offset=52,
                    end_lineno=17,
                    end_col_offset=53)],
                [],
                lineno=17,
                col_offset=31,
                end_lineno=17,
                end_col_offset=54)],
            [],
            lineno=17,
            col_offset=17,
            end_lineno=17,
            end_col_offset=55),
          [
            If(
              Compare(
                Name(
                  'codon',
                  Load(),
                  lineno=18,
                  col_offset=11,
                  end_lineno=18,
                  end_col_offset=16),
                [
                  Eq()],
                [
                  Constant(
                    'STOP',
                    lineno=18,
                    col_offset=20,
                    end_lineno=18,
                    end_col_offset=26)],
                lineno=18,
                col_offset=11,
                end_lineno=18,
                end_col_offset=26),
              [
                Break(
                  lineno=19,
                  col_offset=12,
                  end_lineno=19,
                  end_col_offset=17)],
              [],
              lineno=18,
              col_offset=8,
              end_lineno=19,
              end_col_offset=17),
            Expr(
              Call(
                Attribute(
                  Name(
                    'protein_list',
                    Load(),
                    lineno=20,
                    col_offset=8,
                    end_lineno=20,
                    end_col_offset=20),
                  'append',
                  Load(),
                  lineno=20,
                  col_offset=8,
                  end_lineno=20,
                  end_col_offset=27),
                [
                  Name(
                    'codon',
                    Load(),
                    lineno=20,
                    col_offset=28,
                    end_lineno=20,
                    end_col_offset=33)],
                [],
                lineno=20,
                col_offset=8,
                end_lineno=20,
                end_col_offset=34),
              lineno=20,
              col_offset=8,
              end_lineno=20,
              end_col_offset=34)],
          [],
          lineno=17,
          col_offset=4,
          end_lineno=20,
          end_col_offset=34),
        Return(
          Name(
            'protein_list',
            Load(),
            lineno=21,
            col_offset=11,
            end_lineno=21,
            end_col_offset=23),
          lineno=21,
          col_offset=4,
          end_lineno=21,
          end_col_offset=23)],
      [],
      lineno=15,
      col_offset=0,
      end_lineno=21,
      end_col_offset=23),
    FunctionDef(
      '_chunkstring',
      arguments(
        [],
        [
          arg(
            'string',
            lineno=24,
            col_offset=17,
            end_lineno=24,
            end_col_offset=23),
          arg(
            'number',
            lineno=24,
            col_offset=25,
            end_lineno=24,
            end_col_offset=31)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          GeneratorExp(
            Subscript(
              Name(
                'string',
                Load(),
                lineno=25,
                col_offset=12,
                end_lineno=25,
                end_col_offset=18),
              Slice(
                Name(
                  'idx',
                  Load(),
                  lineno=25,
                  col_offset=19,
                  end_lineno=25,
                  end_col_offset=22),
                BinOp(
                  Name(
                    'number',
                    Load(),
                    lineno=25,
                    col_offset=23,
                    end_lineno=25,
                    end_col_offset=29),
                  Add(),
                  Name(
                    'idx',
                    Load(),
                    lineno=25,
                    col_offset=32,
                    end_lineno=25,
                    end_col_offset=35),
                  lineno=25,
                  col_offset=23,
                  end_lineno=25,
                  end_col_offset=35),
                lineno=25,
                col_offset=19,
                end_lineno=25,
                end_col_offset=35),
              Load(),
              lineno=25,
              col_offset=12,
              end_lineno=25,
              end_col_offset=36),
            [
              comprehension(
                Name(
                  'idx',
                  Store(),
                  lineno=25,
                  col_offset=41,
                  end_lineno=25,
                  end_col_offset=44),
                Call(
                  Name(
                    'range',
                    Load(),
                    lineno=25,
                    col_offset=48,
                    end_lineno=25,
                    end_col_offset=53),
                  [
                    Constant(
                      0,
                      lineno=25,
                      col_offset=54,
                      end_lineno=25,
                      end_col_offset=55),
                    Call(
                      Name(
                        'len',
                        Load(),
                        lineno=25,
                        col_offset=57,
                        end_lineno=25,
                        end_col_offset=60),
                      [
                        Name(
                          'string',
                          Load(),
                          lineno=25,
                          col_offset=61,
                          end_lineno=25,
                          end_col_offset=67)],
                      [],
                      lineno=25,
                      col_offset=57,
                      end_lineno=25,
                      end_col_offset=68),
                    Name(
                      'number',
                      Load(),
                      lineno=25,
                      col_offset=70,
                      end_lineno=25,
                      end_col_offset=76)],
                  [],
                  lineno=25,
                  col_offset=48,
                  end_lineno=25,
                  end_col_offset=77),
                [],
                0)],
            lineno=25,
            col_offset=11,
            end_lineno=25,
            end_col_offset=78),
          lineno=25,
          col_offset=4,
          end_lineno=25,
          end_col_offset=78)],
      [],
      lineno=24,
      col_offset=0,
      end_lineno=25,
      end_col_offset=78)],
  [])

# BEGIN TREE AFTER
Module(
  [
    Assign(
      [
        Name(
          'placeholder_0',
          Store(),
          lineno=1,
          col_offset=0,
          end_lineno=1,
          end_col_offset=6)],
      Dict(
        [
          Constant(
            'AUG',
            lineno=1,
            col_offset=10,
            end_lineno=1,
            end_col_offset=15),
          Constant(
            'UUU',
            lineno=1,
            col_offset=31,
            end_lineno=1,
            end_col_offset=36),
          Constant(
            'UUC',
            lineno=2,
            col_offset=10,
            end_lineno=2,
            end_col_offset=15),
          Constant(
            'UUA',
            lineno=2,
            col_offset=34,
            end_lineno=2,
            end_col_offset=39),
          Constant(
            'UUG',
            lineno=2,
            col_offset=52,
            end_lineno=2,
            end_col_offset=57),
          Constant(
            'UCU',
            lineno=3,
            col_offset=10,
            end_lineno=3,
            end_col_offset=15),
          Constant(
            'UCC',
            lineno=3,
            col_offset=27,
            end_lineno=3,
            end_col_offset=32),
          Constant(
            'UCA',
            lineno=3,
            col_offset=44,
            end_lineno=3,
            end_col_offset=49),
          Constant(
            'UCG',
            lineno=4,
            col_offset=10,
            end_lineno=4,
            end_col_offset=15),
          Constant(
            'UAU',
            lineno=4,
            col_offset=27,
            end_lineno=4,
            end_col_offset=32),
          Constant(
            'UAC',
            lineno=4,
            col_offset=46,
            end_lineno=4,
            end_col_offset=51),
          Constant(
            'UGU',
            lineno=5,
            col_offset=10,
            end_lineno=5,
            end_col_offset=15),
          Constant(
            'UGC',
            lineno=5,
            col_offset=29,
            end_lineno=5,
            end_col_offset=34),
          Constant(
            'UGG',
            lineno=5,
            col_offset=48,
            end_lineno=5,
            end_col_offset=53),
          Constant(
            'UAA',
            lineno=6,
            col_offset=10,
            end_lineno=6,
            end_col_offset=15),
          Constant(
            'UAG',
            lineno=6,
            col_offset=25,
            end_lineno=6,
            end_col_offset=30),
          Constant(
            'UGA',
            lineno=6,
            col_offset=40,
            end_lineno=6,
            end_col_offset=45)],
        [
          Constant(
            'Methionine',
            lineno=1,
            col_offset=17,
            end_lineno=1,
            end_col_offset=29),
          Constant(
            'Phenylalanine',
            lineno=1,
            col_offset=38,
            end_lineno=1,
            end_col_offset=53),
          Constant(
            'Phenylalanine',
            lineno=2,
            col_offset=17,
            end_lineno=2,
            end_col_offset=32),
          Constant(
            'Leucine',
            lineno=2,
            col_offset=41,
            end_lineno=2,
            end_col_offset=50),
          Constant(
            'Leucine',
            lineno=2,
            col_offset=59,
            end_lineno=2,
            end_col_offset=68),
          Constant(
            'Serine',
            lineno=3,
            col_offset=17,
            end_lineno=3,
            end_col_offset=25),
          Constant(
            'Serine',
            lineno=3,
            col_offset=34,
            end_lineno=3,
            end_col_offset=42),
          Constant(
            'Serine',
            lineno=3,
            col_offset=51,
            end_lineno=3,
            end_col_offset=59),
          Constant(
            'Serine',
            lineno=4,
            col_offset=17,
            end_lineno=4,
            end_col_offset=25),
          Constant(
            'Tyrosine',
            lineno=4,
            col_offset=34,
            end_lineno=4,
            end_col_offset=44),
          Constant(
            'Tyrosine',
            lineno=4,
            col_offset=53,
            end_lineno=4,
            end_col_offset=63),
          Constant(
            'Cysteine',
            lineno=5,
            col_offset=17,
            end_lineno=5,
            end_col_offset=27),
          Constant(
            'Cysteine',
            lineno=5,
            col_offset=36,
            end_lineno=5,
            end_col_offset=46),
          Constant(
            'Tryptophan',
            lineno=5,
            col_offset=55,
            end_lineno=5,
            end_col_offset=67),
          Constant(
            'STOP',
            lineno=6,
            col_offset=17,
            end_lineno=6,
            end_col_offset=23),
          Constant(
            'STOP',
            lineno=6,
            col_offset=32,
            end_lineno=6,
            end_col_offset=38),
          Constant(
            'STOP',
            lineno=6,
            col_offset=47,
            end_lineno=6,
            end_col_offset=53)],
        lineno=1,
        col_offset=9,
        end_lineno=6,
        end_col_offset=54),
      lineno=1,
      col_offset=0,
      end_lineno=6,
      end_col_offset=54),
    FunctionDef(
      'placeholder_1',
      arguments(
        [],
        [
          arg(
            'placeholder_2',
            lineno=9,
            col_offset=13,
            end_lineno=9,
            end_col_offset=18)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        If(
          Compare(
            Name(
              'placeholder_2',
              Load(),
              lineno=10,
              col_offset=7,
              end_lineno=10,
              end_col_offset=12),
            [
              NotIn()],
            [
              Name(
                'placeholder_0',
                Load(),
                lineno=10,
                col_offset=20,
                end_lineno=10,
                end_col_offset=26)],
            lineno=10,
            col_offset=7,
            end_lineno=10,
            end_col_offset=26),
          [
            Raise(
              Call(
                Name(
                  'ValueError',
                  Load(),
                  lineno=11,
                  col_offset=14,
                  end_lineno=11,
                  end_col_offset=24),
                [
                  JoinedStr(
                    [
                      Constant(
                        'Invalid codon: ',
                        lineno=11,
                        col_offset=25,
                        end_lineno=11,
                        end_col_offset=50),
                      FormattedValue(
                        Name(
                          'placeholder_2',
                          Load(),
                          lineno=11,
                          col_offset=43,
                          end_lineno=11,
                          end_col_offset=48),
                        -1,
                        lineno=11,
                        col_offset=25,
                        end_lineno=11,
                        end_col_offset=50)],
                    lineno=11,
                    col_offset=25,
                    end_lineno=11,
                    end_col_offset=50)],
                [],
                lineno=11,
                col_offset=14,
                end_lineno=11,
                end_col_offset=51),
              lineno=11,
              col_offset=8,
              end_lineno=11,
              end_col_offset=51)],
          [],
          lineno=10,
          col_offset=4,
          end_lineno=11,
          end_col_offset=51),
        Return(
          Subscript(
            Name(
              'placeholder_0',
              Load(),
              lineno=12,
              col_offset=11,
              end_lineno=12,
              end_col_offset=17),
            Name(
              'placeholder_2',
              Load(),
              lineno=12,
              col_offset=18,
              end_lineno=12,
              end_col_offset=23),
            Load(),
            lineno=12,
            col_offset=11,
            end_lineno=12,
            end_col_offset=24),
          lineno=12,
          col_offset=4,
          end_lineno=12,
          end_col_offset=24)],
      [],
      lineno=9,
      col_offset=0,
      end_lineno=12,
      end_col_offset=24),
    FunctionDef(
      'placeholder_3',
      arguments(
        [],
        [
          arg(
            'placeholder_4',
            lineno=15,
            col_offset=13,
            end_lineno=15,
            end_col_offset=19)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'placeholder_5',
              Store(),
              lineno=16,
              col_offset=4,
              end_lineno=16,
              end_col_offset=16)],
          List(
            [],
            Load(),
            lineno=16,
            col_offset=19,
            end_lineno=16,
            end_col_offset=21),
          lineno=16,
          col_offset=4,
          end_lineno=16,
          end_col_offset=21),
        For(
          Name(
            'placeholder_2',
            Store(),
            lineno=17,
            col_offset=8,
            end_lineno=17,
            end_col_offset=13),
          Call(
            Name(
              'map',
              Load(),
              lineno=17,
              col_offset=17,
              end_lineno=17,
              end_col_offset=20),
            [
              Name(
                'placeholder_1',
                Load(),
                lineno=17,
                col_offset=21,
                end_lineno=17,
                end_col_offset=29),
              Call(
                Name(
                  '_chunkstring',
                  Load(),
                  lineno=17,
                  col_offset=31,
                  end_lineno=17,
                  end_col_offset=43),
                [
                  Name(
                    'placeholder_4',
                    Load(),
                    lineno=17,
                    col_offset=44,
                    end_lineno=17,
                    end_col_offset=50),
                  Constant(
                    3,
                    lineno=17,
                    col_offset=52,
                    end_lineno=17,
                    end_col_offset=53)],
                [],
                lineno=17,
                col_offset=31,
                end_lineno=17,
                end_col_offset=54)],
            [],
            lineno=17,
            col_offset=17,
            end_lineno=17,
            end_col_offset=55),
          [
            If(
              Compare(
                Name(
                  'placeholder_2',
                  Load(),
                  lineno=18,
                  col_offset=11,
                  end_lineno=18,
                  end_col_offset=16),
                [
                  Eq()],
                [
                  Constant(
                    'STOP',
                    lineno=18,
                    col_offset=20,
                    end_lineno=18,
                    end_col_offset=26)],
                lineno=18,
                col_offset=11,
                end_lineno=18,
                end_col_offset=26),
              [
                Break(
                  lineno=19,
                  col_offset=12,
                  end_lineno=19,
                  end_col_offset=17)],
              [],
              lineno=18,
              col_offset=8,
              end_lineno=19,
              end_col_offset=17),
            Expr(
              Call(
                Attribute(
                  Name(
                    'placeholder_5',
                    Load(),
                    lineno=20,
                    col_offset=8,
                    end_lineno=20,
                    end_col_offset=20),
                  'append',
                  Load(),
                  lineno=20,
                  col_offset=8,
                  end_lineno=20,
                  end_col_offset=27),
                [
                  Name(
                    'placeholder_2',
                    Load(),
                    lineno=20,
                    col_offset=28,
                    end_lineno=20,
                    end_col_offset=33)],
                [],
                lineno=20,
                col_offset=8,
                end_lineno=20,
                end_col_offset=34),
              lineno=20,
              col_offset=8,
              end_lineno=20,
              end_col_offset=34)],
          [],
          lineno=17,
          col_offset=4,
          end_lineno=20,
          end_col_offset=34),
        Return(
          Name(
            'placeholder_5',
            Load(),
            lineno=21,
            col_offset=11,
            end_lineno=21,
            end_col_offset=23),
          lineno=21,
          col_offset=4,
          end_lineno=21,
          end_col_offset=23)],
      [],
      lineno=15,
      col_offset=0,
      end_lineno=21,
      end_col_offset=23),
    FunctionDef(
      'placeholder_6',
      arguments(
        [],
        [
          arg(
            'placeholder_7',
            lineno=24,
            col_offset=17,
            end_lineno=24,
            end_col_offset=23),
          arg(
            'placeholder_8',
            lineno=24,
            col_offset=25,
            end_lineno=24,
            end_col_offset=31)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          GeneratorExp(
            Subscript(
              Name(
                'placeholder_7',
                Load(),
                lineno=25,
                col_offset=12,
                end_lineno=25,
                end_col_offset=18),
              Slice(
                Name(
                  'placeholder_9',
                  Load(),
                  lineno=25,
                  col_offset=19,
                  end_lineno=25,
                  end_col_offset=22),
                BinOp(
                  Name(
                    'placeholder_8',
                    Load(),
                    lineno=25,
                    col_offset=23,
                    end_lineno=25,
                    end_col_offset=29),
                  Add(),
                  Name(
                    'placeholder_9',
                    Load(),
                    lineno=25,
                    col_offset=32,
                    end_lineno=25,
                    end_col_offset=35),
                  lineno=25,
                  col_offset=23,
                  end_lineno=25,
                  end_col_offset=35),
                lineno=25,
                col_offset=19,
                end_lineno=25,
                end_col_offset=35),
              Load(),
              lineno=25,
              col_offset=12,
              end_lineno=25,
              end_col_offset=36),
            [
              comprehension(
                Name(
                  'placeholder_9',
                  Store(),
                  lineno=25,
                  col_offset=41,
                  end_lineno=25,
                  end_col_offset=44),
                Call(
                  Name(
                    'range',
                    Load(),
                    lineno=25,
                    col_offset=48,
                    end_lineno=25,
                    end_col_offset=53),
                  [
                    Constant(
                      0,
                      lineno=25,
                      col_offset=54,
                      end_lineno=25,
                      end_col_offset=55),
                    Call(
                      Name(
                        'len',
                        Load(),
                        lineno=25,
                        col_offset=57,
                        end_lineno=25,
                        end_col_offset=60),
                      [
                        Name(
                          'placeholder_7',
                          Load(),
                          lineno=25,
                          col_offset=61,
                          end_lineno=25,
                          end_col_offset=67)],
                      [],
                      lineno=25,
                      col_offset=57,
                      end_lineno=25,
                      end_col_offset=68),
                    Name(
                      'placeholder_8',
                      Load(),
                      lineno=25,
                      col_offset=70,
                      end_lineno=25,
                      end_col_offset=76)],
                  [],
                  lineno=25,
                  col_offset=48,
                  end_lineno=25,
                  end_col_offset=77),
                [],
                0)],
            lineno=25,
            col_offset=11,
            end_lineno=25,
            end_col_offset=78),
          lineno=25,
          col_offset=4,
          end_lineno=25,
          end_col_offset=78)],
      [],
      lineno=24,
      col_offset=0,
      end_lineno=25,
      end_col_offset=78)],
  [])

# BEGIN NORMALIZED CODE AFTER
placeholder_0 = {
    "AUG": "Methionine",
    "UUU": "Phenylalanine",
    "UUC": "Phenylalanine",
    "UUA": "Leucine",
    "UUG": "Leucine",
    "UCU": "Serine",
    "UCC": "Serine",
    "UCA": "Serine",
    "UCG": "Serine",
    "UAU": "Tyrosine",
    "UAC": "Tyrosine",
    "UGU": "Cysteine",
    "UGC": "Cysteine",
    "UGG": "Tryptophan",
    "UAA": "STOP",
    "UAG": "STOP",
    "UGA": "STOP",
}


def placeholder_1(placeholder_2):
    if placeholder_2 not in placeholder_0:
        raise ValueError(f"Invalid codon: {placeholder_2}")
    return placeholder_0[placeholder_2]


def placeholder_3(placeholder_4):
    placeholder_5 = []
    for placeholder_2 in map(placeholder_1, _chunkstring(placeholder_4, 3)):
        if placeholder_2 == "STOP":
            break
        placeholder_5.append(placeholder_2)
    return placeholder_5


def placeholder_6(placeholder_7, placeholder_8):
    return (
        placeholder_7[placeholder_9 : placeholder_8 + placeholder_9]
        for placeholder_9 in range(0, len(placeholder_7), placeholder_8)
    )
