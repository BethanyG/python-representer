# BEGIN TREE BEFORE
Module(
  [
    Expr(
      Constant(
        'Functions to help Azara and Rui locate pirate treasure.',
        lineno=1,
        col_offset=0,
        end_lineno=1,
        end_col_offset=61),
      lineno=1,
      col_offset=0,
      end_lineno=1,
      end_col_offset=61),
    FunctionDef(
      'get_coordinate',
      arguments(
        [],
        [
          arg(
            'record',
            lineno=4,
            col_offset=19,
            end_lineno=4,
            end_col_offset=25)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Return coordinate value from a tuple containing the treasure name, and treasure coordinate.\n\n    :param record: tuple - with a (treasure, coordinate) pair.\n    :return: str - the extracted map coordinate.\n    ',
            lineno=5,
            col_offset=4,
            end_lineno=9,
            end_col_offset=7),
          lineno=5,
          col_offset=4,
          end_lineno=9,
          end_col_offset=7),
        Return(
          Subscript(
            Name(
              'record',
              Load(),
              lineno=11,
              col_offset=11,
              end_lineno=11,
              end_col_offset=17),
            Constant(
              1,
              lineno=11,
              col_offset=18,
              end_lineno=11,
              end_col_offset=19),
            Load(),
            lineno=11,
            col_offset=11,
            end_lineno=11,
            end_col_offset=20),
          lineno=11,
          col_offset=4,
          end_lineno=11,
          end_col_offset=20)],
      [],
      lineno=4,
      col_offset=0,
      end_lineno=11,
      end_col_offset=20),
    FunctionDef(
      'convert_coordinate',
      arguments(
        [],
        [
          arg(
            'coordinate',
            lineno=14,
            col_offset=23,
            end_lineno=14,
            end_col_offset=33)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Split the given coordinate into tuple containing its individual components.\n\n    :param coordinate: str - a string map coordinate\n    :return: tuple - the string coordinate split into its individual components.\n    ',
            lineno=15,
            col_offset=4,
            end_lineno=19,
            end_col_offset=7),
          lineno=15,
          col_offset=4,
          end_lineno=19,
          end_col_offset=7),
        Return(
          Call(
            Name(
              'tuple',
              Load(),
              lineno=21,
              col_offset=11,
              end_lineno=21,
              end_col_offset=16),
            [
              Name(
                'coordinate',
                Load(),
                lineno=21,
                col_offset=17,
                end_lineno=21,
                end_col_offset=27)],
            [],
            lineno=21,
            col_offset=11,
            end_lineno=21,
            end_col_offset=28),
          lineno=21,
          col_offset=4,
          end_lineno=21,
          end_col_offset=28)],
      [],
      lineno=14,
      col_offset=0,
      end_lineno=21,
      end_col_offset=28),
    FunctionDef(
      'compare_records',
      arguments(
        [],
        [
          arg(
            'azara_record',
            lineno=24,
            col_offset=20,
            end_lineno=24,
            end_col_offset=32),
          arg(
            'rui_record',
            lineno=24,
            col_offset=34,
            end_lineno=24,
            end_col_offset=44)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Compare two record types and determine if their coordinates match.\n\n    :param azara_record: tuple - a (treasure, coordinate) pair.\n    :param rui_record: tuple - a (location, tuple(coordinate_1, coordinate_2), quadrant) trio.\n    :return: bool - do the coordinates match?\n    ',
            lineno=25,
            col_offset=4,
            end_lineno=30,
            end_col_offset=7),
          lineno=25,
          col_offset=4,
          end_lineno=30,
          end_col_offset=7),
        Return(
          Compare(
            Call(
              Name(
                'convert_coordinate',
                Load(),
                lineno=32,
                col_offset=11,
                end_lineno=32,
                end_col_offset=29),
              [
                Subscript(
                  Name(
                    'azara_record',
                    Load(),
                    lineno=32,
                    col_offset=30,
                    end_lineno=32,
                    end_col_offset=42),
                  Constant(
                    1,
                    lineno=32,
                    col_offset=43,
                    end_lineno=32,
                    end_col_offset=44),
                  Load(),
                  lineno=32,
                  col_offset=30,
                  end_lineno=32,
                  end_col_offset=45)],
              [],
              lineno=32,
              col_offset=11,
              end_lineno=32,
              end_col_offset=46),
            [
              In()],
            [
              Name(
                'rui_record',
                Load(),
                lineno=32,
                col_offset=50,
                end_lineno=32,
                end_col_offset=60)],
            lineno=32,
            col_offset=11,
            end_lineno=32,
            end_col_offset=60),
          lineno=32,
          col_offset=4,
          end_lineno=32,
          end_col_offset=60)],
      [],
      lineno=24,
      col_offset=0,
      end_lineno=32,
      end_col_offset=60),
    FunctionDef(
      'create_record',
      arguments(
        [],
        [
          arg(
            'azara_record',
            lineno=35,
            col_offset=18,
            end_lineno=35,
            end_col_offset=30),
          arg(
            'rui_record',
            lineno=35,
            col_offset=32,
            end_lineno=35,
            end_col_offset=42)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Combine the two record types (if possible) and create a combined record group.\n\n    :param azara_record: tuple - a (treasure, coordinate) pair.\n    :param rui_record: tuple - a (location, coordinate, quadrant) trio.\n    :return: tuple or str - the combined record (if compatible), or the string "not a match" (if incompatible).\n    ',
            lineno=36,
            col_offset=4,
            end_lineno=41,
            end_col_offset=7),
          lineno=36,
          col_offset=4,
          end_lineno=41,
          end_col_offset=7),
        Assign(
          [
            Name(
              'result',
              Store(),
              lineno=43,
              col_offset=4,
              end_lineno=43,
              end_col_offset=10)],
          Constant(
            'not a match',
            lineno=43,
            col_offset=13,
            end_lineno=43,
            end_col_offset=26),
          lineno=43,
          col_offset=4,
          end_lineno=43,
          end_col_offset=26),
        If(
          Call(
            Name(
              'compare_records',
              Load(),
              lineno=45,
              col_offset=7,
              end_lineno=45,
              end_col_offset=22),
            [
              Name(
                'azara_record',
                Load(),
                lineno=45,
                col_offset=23,
                end_lineno=45,
                end_col_offset=35),
              Name(
                'rui_record',
                Load(),
                lineno=45,
                col_offset=37,
                end_lineno=45,
                end_col_offset=47)],
            [],
            lineno=45,
            col_offset=7,
            end_lineno=45,
            end_col_offset=48),
          [
            Assign(
              [
                Name(
                  'result',
                  Store(),
                  lineno=46,
                  col_offset=8,
                  end_lineno=46,
                  end_col_offset=14)],
              BinOp(
                Name(
                  'azara_record',
                  Load(),
                  lineno=46,
                  col_offset=17,
                  end_lineno=46,
                  end_col_offset=29),
                Add(),
                Name(
                  'rui_record',
                  Load(),
                  lineno=46,
                  col_offset=32,
                  end_lineno=46,
                  end_col_offset=42),
                lineno=46,
                col_offset=17,
                end_lineno=46,
                end_col_offset=42),
              lineno=46,
              col_offset=8,
              end_lineno=46,
              end_col_offset=42)],
          [],
          lineno=45,
          col_offset=4,
          end_lineno=46,
          end_col_offset=42),
        Return(
          Name(
            'result',
            Load(),
            lineno=48,
            col_offset=11,
            end_lineno=48,
            end_col_offset=17),
          lineno=48,
          col_offset=4,
          end_lineno=48,
          end_col_offset=17)],
      [],
      lineno=35,
      col_offset=0,
      end_lineno=48,
      end_col_offset=17),
    FunctionDef(
      'clean_up',
      arguments(
        [],
        [
          arg(
            'combined_record_group',
            lineno=51,
            col_offset=13,
            end_lineno=51,
            end_col_offset=34)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Clean up a combined record group into a multi-line string of single records.\n\n    :param combined_record_group: tuple - everything from both participants.\n    :return: str - everything "cleaned", excess coordinates and information are removed.\n\n    The return statement should be a multi-lined string with items separated by newlines.\n\n    (see HINTS.md for an example).\n    ',
            lineno=52,
            col_offset=4,
            end_lineno=60,
            end_col_offset=7),
          lineno=52,
          col_offset=4,
          end_lineno=60,
          end_col_offset=7),
        Assign(
          [
            Name(
              'report',
              Store(),
              lineno=62,
              col_offset=4,
              end_lineno=62,
              end_col_offset=10)],
          Constant(
            '',
            lineno=62,
            col_offset=13,
            end_lineno=62,
            end_col_offset=15),
          lineno=62,
          col_offset=4,
          end_lineno=62,
          end_col_offset=15),
        For(
          Name(
            'item',
            Store(),
            lineno=64,
            col_offset=8,
            end_lineno=64,
            end_col_offset=12),
          Name(
            'combined_record_group',
            Load(),
            lineno=64,
            col_offset=16,
            end_lineno=64,
            end_col_offset=37),
          [
            AugAssign(
              Name(
                'report',
                Store(),
                lineno=65,
                col_offset=8,
                end_lineno=65,
                end_col_offset=14),
              Add(),
              JoinedStr(
                [
                  FormattedValue(
                    Tuple(
                      [
                        Subscript(
                          Name(
                            'item',
                            Load(),
                            lineno=65,
                            col_offset=22,
                            end_lineno=65,
                            end_col_offset=26),
                          Constant(
                            0,
                            lineno=65,
                            col_offset=27,
                            end_lineno=65,
                            end_col_offset=28),
                          Load(),
                          lineno=65,
                          col_offset=22,
                          end_lineno=65,
                          end_col_offset=29),
                        Subscript(
                          Name(
                            'item',
                            Load(),
                            lineno=65,
                            col_offset=31,
                            end_lineno=65,
                            end_col_offset=35),
                          Constant(
                            2,
                            lineno=65,
                            col_offset=36,
                            end_lineno=65,
                            end_col_offset=37),
                          Load(),
                          lineno=65,
                          col_offset=31,
                          end_lineno=65,
                          end_col_offset=38),
                        Subscript(
                          Name(
                            'item',
                            Load(),
                            lineno=65,
                            col_offset=40,
                            end_lineno=65,
                            end_col_offset=44),
                          Constant(
                            3,
                            lineno=65,
                            col_offset=45,
                            end_lineno=65,
                            end_col_offset=46),
                          Load(),
                          lineno=65,
                          col_offset=40,
                          end_lineno=65,
                          end_col_offset=47),
                        Subscript(
                          Name(
                            'item',
                            Load(),
                            lineno=65,
                            col_offset=49,
                            end_lineno=65,
                            end_col_offset=53),
                          Constant(
                            4,
                            lineno=65,
                            col_offset=54,
                            end_lineno=65,
                            end_col_offset=55),
                          Load(),
                          lineno=65,
                          col_offset=49,
                          end_lineno=65,
                          end_col_offset=56)],
                      Load(),
                      lineno=65,
                      col_offset=21,
                      end_lineno=65,
                      end_col_offset=57),
                    -1,
                    lineno=65,
                    col_offset=18,
                    end_lineno=65,
                    end_col_offset=61),
                  Constant(
                    '\n',
                    lineno=65,
                    col_offset=18,
                    end_lineno=65,
                    end_col_offset=61)],
                lineno=65,
                col_offset=18,
                end_lineno=65,
                end_col_offset=61),
              lineno=65,
              col_offset=8,
              end_lineno=65,
              end_col_offset=61)],
          [],
          lineno=64,
          col_offset=4,
          end_lineno=65,
          end_col_offset=61),
        Return(
          Name(
            'report',
            Load(),
            lineno=67,
            col_offset=11,
            end_lineno=67,
            end_col_offset=17),
          lineno=67,
          col_offset=4,
          end_lineno=67,
          end_col_offset=17)],
      [],
      lineno=51,
      col_offset=0,
      end_lineno=67,
      end_col_offset=17)],
  [])

# BEGIN TREE AFTER
Module(
  [
    FunctionDef(
      'placeholder_0',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=4,
            col_offset=19,
            end_lineno=4,
            end_col_offset=25)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          Subscript(
            Name(
              'placeholder_1',
              Load(),
              lineno=11,
              col_offset=11,
              end_lineno=11,
              end_col_offset=17),
            Constant(
              1,
              lineno=11,
              col_offset=18,
              end_lineno=11,
              end_col_offset=19),
            Load(),
            lineno=11,
            col_offset=11,
            end_lineno=11,
            end_col_offset=20),
          lineno=11,
          col_offset=4,
          end_lineno=11,
          end_col_offset=20)],
      [],
      lineno=4,
      col_offset=0,
      end_lineno=11,
      end_col_offset=20),
    FunctionDef(
      'placeholder_2',
      arguments(
        [],
        [
          arg(
            'placeholder_3',
            lineno=14,
            col_offset=23,
            end_lineno=14,
            end_col_offset=33)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          Call(
            Name(
              'tuple',
              Load(),
              lineno=21,
              col_offset=11,
              end_lineno=21,
              end_col_offset=16),
            [
              Name(
                'placeholder_3',
                Load(),
                lineno=21,
                col_offset=17,
                end_lineno=21,
                end_col_offset=27)],
            [],
            lineno=21,
            col_offset=11,
            end_lineno=21,
            end_col_offset=28),
          lineno=21,
          col_offset=4,
          end_lineno=21,
          end_col_offset=28)],
      [],
      lineno=14,
      col_offset=0,
      end_lineno=21,
      end_col_offset=28),
    FunctionDef(
      'placeholder_4',
      arguments(
        [],
        [
          arg(
            'placeholder_5',
            lineno=24,
            col_offset=20,
            end_lineno=24,
            end_col_offset=32),
          arg(
            'placeholder_6',
            lineno=24,
            col_offset=34,
            end_lineno=24,
            end_col_offset=44)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          Compare(
            Call(
              Name(
                'placeholder_2',
                Load(),
                lineno=32,
                col_offset=11,
                end_lineno=32,
                end_col_offset=29),
              [
                Subscript(
                  Name(
                    'placeholder_5',
                    Load(),
                    lineno=32,
                    col_offset=30,
                    end_lineno=32,
                    end_col_offset=42),
                  Constant(
                    1,
                    lineno=32,
                    col_offset=43,
                    end_lineno=32,
                    end_col_offset=44),
                  Load(),
                  lineno=32,
                  col_offset=30,
                  end_lineno=32,
                  end_col_offset=45)],
              [],
              lineno=32,
              col_offset=11,
              end_lineno=32,
              end_col_offset=46),
            [
              In()],
            [
              Name(
                'placeholder_6',
                Load(),
                lineno=32,
                col_offset=50,
                end_lineno=32,
                end_col_offset=60)],
            lineno=32,
            col_offset=11,
            end_lineno=32,
            end_col_offset=60),
          lineno=32,
          col_offset=4,
          end_lineno=32,
          end_col_offset=60)],
      [],
      lineno=24,
      col_offset=0,
      end_lineno=32,
      end_col_offset=60),
    FunctionDef(
      'placeholder_7',
      arguments(
        [],
        [
          arg(
            'placeholder_5',
            lineno=35,
            col_offset=18,
            end_lineno=35,
            end_col_offset=30),
          arg(
            'placeholder_6',
            lineno=35,
            col_offset=32,
            end_lineno=35,
            end_col_offset=42)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'placeholder_8',
              Store(),
              lineno=43,
              col_offset=4,
              end_lineno=43,
              end_col_offset=10)],
          Constant(
            'not a match',
            lineno=43,
            col_offset=13,
            end_lineno=43,
            end_col_offset=26),
          lineno=43,
          col_offset=4,
          end_lineno=43,
          end_col_offset=26),
        If(
          Call(
            Name(
              'placeholder_4',
              Load(),
              lineno=45,
              col_offset=7,
              end_lineno=45,
              end_col_offset=22),
            [
              Name(
                'placeholder_5',
                Load(),
                lineno=45,
                col_offset=23,
                end_lineno=45,
                end_col_offset=35),
              Name(
                'placeholder_6',
                Load(),
                lineno=45,
                col_offset=37,
                end_lineno=45,
                end_col_offset=47)],
            [],
            lineno=45,
            col_offset=7,
            end_lineno=45,
            end_col_offset=48),
          [
            Assign(
              [
                Name(
                  'placeholder_8',
                  Store(),
                  lineno=46,
                  col_offset=8,
                  end_lineno=46,
                  end_col_offset=14)],
              BinOp(
                Name(
                  'placeholder_5',
                  Load(),
                  lineno=46,
                  col_offset=17,
                  end_lineno=46,
                  end_col_offset=29),
                Add(),
                Name(
                  'placeholder_6',
                  Load(),
                  lineno=46,
                  col_offset=32,
                  end_lineno=46,
                  end_col_offset=42),
                lineno=46,
                col_offset=17,
                end_lineno=46,
                end_col_offset=42),
              lineno=46,
              col_offset=8,
              end_lineno=46,
              end_col_offset=42)],
          [],
          lineno=45,
          col_offset=4,
          end_lineno=46,
          end_col_offset=42),
        Return(
          Name(
            'placeholder_8',
            Load(),
            lineno=48,
            col_offset=11,
            end_lineno=48,
            end_col_offset=17),
          lineno=48,
          col_offset=4,
          end_lineno=48,
          end_col_offset=17)],
      [],
      lineno=35,
      col_offset=0,
      end_lineno=48,
      end_col_offset=17),
    FunctionDef(
      'placeholder_9',
      arguments(
        [],
        [
          arg(
            'placeholder_10',
            lineno=51,
            col_offset=13,
            end_lineno=51,
            end_col_offset=34)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'placeholder_11',
              Store(),
              lineno=62,
              col_offset=4,
              end_lineno=62,
              end_col_offset=10)],
          Constant(
            '',
            lineno=62,
            col_offset=13,
            end_lineno=62,
            end_col_offset=15),
          lineno=62,
          col_offset=4,
          end_lineno=62,
          end_col_offset=15),
        For(
          Name(
            'placeholder_12',
            Store(),
            lineno=64,
            col_offset=8,
            end_lineno=64,
            end_col_offset=12),
          Name(
            'placeholder_10',
            Load(),
            lineno=64,
            col_offset=16,
            end_lineno=64,
            end_col_offset=37),
          [
            AugAssign(
              Name(
                'placeholder_11',
                Store(),
                lineno=65,
                col_offset=8,
                end_lineno=65,
                end_col_offset=14),
              Add(),
              JoinedStr(
                [
                  FormattedValue(
                    Tuple(
                      [
                        Subscript(
                          Name(
                            'placeholder_12',
                            Load(),
                            lineno=65,
                            col_offset=22,
                            end_lineno=65,
                            end_col_offset=26),
                          Constant(
                            0,
                            lineno=65,
                            col_offset=27,
                            end_lineno=65,
                            end_col_offset=28),
                          Load(),
                          lineno=65,
                          col_offset=22,
                          end_lineno=65,
                          end_col_offset=29),
                        Subscript(
                          Name(
                            'placeholder_12',
                            Load(),
                            lineno=65,
                            col_offset=31,
                            end_lineno=65,
                            end_col_offset=35),
                          Constant(
                            2,
                            lineno=65,
                            col_offset=36,
                            end_lineno=65,
                            end_col_offset=37),
                          Load(),
                          lineno=65,
                          col_offset=31,
                          end_lineno=65,
                          end_col_offset=38),
                        Subscript(
                          Name(
                            'placeholder_12',
                            Load(),
                            lineno=65,
                            col_offset=40,
                            end_lineno=65,
                            end_col_offset=44),
                          Constant(
                            3,
                            lineno=65,
                            col_offset=45,
                            end_lineno=65,
                            end_col_offset=46),
                          Load(),
                          lineno=65,
                          col_offset=40,
                          end_lineno=65,
                          end_col_offset=47),
                        Subscript(
                          Name(
                            'placeholder_12',
                            Load(),
                            lineno=65,
                            col_offset=49,
                            end_lineno=65,
                            end_col_offset=53),
                          Constant(
                            4,
                            lineno=65,
                            col_offset=54,
                            end_lineno=65,
                            end_col_offset=55),
                          Load(),
                          lineno=65,
                          col_offset=49,
                          end_lineno=65,
                          end_col_offset=56)],
                      Load(),
                      lineno=65,
                      col_offset=21,
                      end_lineno=65,
                      end_col_offset=57),
                    -1,
                    lineno=65,
                    col_offset=18,
                    end_lineno=65,
                    end_col_offset=61),
                  Constant(
                    '\n',
                    lineno=65,
                    col_offset=18,
                    end_lineno=65,
                    end_col_offset=61)],
                lineno=65,
                col_offset=18,
                end_lineno=65,
                end_col_offset=61),
              lineno=65,
              col_offset=8,
              end_lineno=65,
              end_col_offset=61)],
          [],
          lineno=64,
          col_offset=4,
          end_lineno=65,
          end_col_offset=61),
        Return(
          Name(
            'placeholder_11',
            Load(),
            lineno=67,
            col_offset=11,
            end_lineno=67,
            end_col_offset=17),
          lineno=67,
          col_offset=4,
          end_lineno=67,
          end_col_offset=17)],
      [],
      lineno=51,
      col_offset=0,
      end_lineno=67,
      end_col_offset=17)],
  [])

# BEGIN NORMALIZED CODE AFTER
def placeholder_0(placeholder_1):
    return placeholder_1[1]


def placeholder_2(placeholder_3):
    return tuple(placeholder_3)


def placeholder_4(placeholder_5, placeholder_6):
    return placeholder_2(placeholder_5[1]) in placeholder_6


def placeholder_7(placeholder_5, placeholder_6):
    placeholder_8 = "not a match"
    if placeholder_4(placeholder_5, placeholder_6):
        placeholder_8 = placeholder_5 + placeholder_6
    return placeholder_8


def placeholder_9(placeholder_10):
    placeholder_11 = ""
    for placeholder_12 in placeholder_10:
        placeholder_11 += f"{(placeholder_12[0], placeholder_12[2], placeholder_12[3], placeholder_12[4])}\n"
    return placeholder_11
