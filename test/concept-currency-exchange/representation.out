## BEGIN NORMALIZED CODE ##
def placeholder_0(placeholder_1, placeholder_2):
    return placeholder_1 / placeholder_2


def placeholder_3(placeholder_1, placeholder_4):
    return placeholder_1 - placeholder_4


def placeholder_5(placeholder_6, placeholder_7):
    return placeholder_6 * placeholder_7


def placeholder_8(placeholder_9, placeholder_6):
    return int(placeholder_9) // placeholder_6


def placeholder_10(placeholder_9, placeholder_6):
    return placeholder_9 % placeholder_6


def placeholder_11(placeholder_1, placeholder_2, placeholder_12, placeholder_6):
    placeholder_13 = placeholder_2 / 100 * placeholder_12
    placeholder_14 = placeholder_0(placeholder_1, placeholder_2 + placeholder_13)
    placeholder_7 = placeholder_8(placeholder_14, placeholder_6)
    placeholder_15 = placeholder_5(placeholder_6, placeholder_7)
    return placeholder_15

## END NORMALIZED CODE ##

## BEGIN TREE BEFORE ##
Module(
  [
    FunctionDef(
      'exchange_money',
      arguments(
        [],
        [
          arg(
            'budget',
            lineno=1,
            col_offset=19,
            end_lineno=1,
            end_col_offset=25),
          arg(
            'exchange_rate',
            lineno=1,
            col_offset=27,
            end_lineno=1,
            end_col_offset=40)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            '\n\n    :param budget: float - amount of money you are planning to exchange.\n    :param exchange_rate: float - unit value of the foreign currency.\n    :return: float - exchanged value of the foreign currency you can receive.\n    ',
            lineno=2,
            col_offset=4,
            end_lineno=7,
            end_col_offset=7),
          lineno=2,
          col_offset=4,
          end_lineno=7,
          end_col_offset=7),
        Return(
          BinOp(
            Name(
              'budget',
              Load(),
              lineno=9,
              col_offset=11,
              end_lineno=9,
              end_col_offset=17),
            Div(),
            Name(
              'exchange_rate',
              Load(),
              lineno=9,
              col_offset=20,
              end_lineno=9,
              end_col_offset=33),
            lineno=9,
            col_offset=11,
            end_lineno=9,
            end_col_offset=33),
          lineno=9,
          col_offset=4,
          end_lineno=9,
          end_col_offset=33)],
      [],
      lineno=1,
      col_offset=0,
      end_lineno=9,
      end_col_offset=33),
    FunctionDef(
      'get_change',
      arguments(
        [],
        [
          arg(
            'budget',
            lineno=12,
            col_offset=15,
            end_lineno=12,
            end_col_offset=21),
          arg(
            'exchanging_value',
            lineno=12,
            col_offset=23,
            end_lineno=12,
            end_col_offset=39)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            '\n\n    :param budget: float - amount of money you own.\n    :param exchanging_value: float - amount of your money you want to exchange now.\n    :return: float - amount left of your starting currency after exchanging.\n    ',
            lineno=13,
            col_offset=4,
            end_lineno=18,
            end_col_offset=7),
          lineno=13,
          col_offset=4,
          end_lineno=18,
          end_col_offset=7),
        Return(
          BinOp(
            Name(
              'budget',
              Load(),
              lineno=20,
              col_offset=11,
              end_lineno=20,
              end_col_offset=17),
            Sub(),
            Name(
              'exchanging_value',
              Load(),
              lineno=20,
              col_offset=20,
              end_lineno=20,
              end_col_offset=36),
            lineno=20,
            col_offset=11,
            end_lineno=20,
            end_col_offset=36),
          lineno=20,
          col_offset=4,
          end_lineno=20,
          end_col_offset=36)],
      [],
      lineno=12,
      col_offset=0,
      end_lineno=20,
      end_col_offset=36),
    FunctionDef(
      'get_value_of_bills',
      arguments(
        [],
        [
          arg(
            'denomination',
            lineno=23,
            col_offset=23,
            end_lineno=23,
            end_col_offset=35),
          arg(
            'number_of_bills',
            lineno=23,
            col_offset=37,
            end_lineno=23,
            end_col_offset=52)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            '\n\n    :param denomination: int - the value of a bill.\n    :param number_of_bills: int - total number of bills.\n    :return: int - calculated value of the bills.\n    ',
            lineno=24,
            col_offset=4,
            end_lineno=29,
            end_col_offset=7),
          lineno=24,
          col_offset=4,
          end_lineno=29,
          end_col_offset=7),
        Return(
          BinOp(
            Name(
              'denomination',
              Load(),
              lineno=31,
              col_offset=11,
              end_lineno=31,
              end_col_offset=23),
            Mult(),
            Name(
              'number_of_bills',
              Load(),
              lineno=31,
              col_offset=26,
              end_lineno=31,
              end_col_offset=41),
            lineno=31,
            col_offset=11,
            end_lineno=31,
            end_col_offset=41),
          lineno=31,
          col_offset=4,
          end_lineno=31,
          end_col_offset=41)],
      [],
      lineno=23,
      col_offset=0,
      end_lineno=31,
      end_col_offset=41),
    FunctionDef(
      'get_number_of_bills',
      arguments(
        [],
        [
          arg(
            'amount',
            lineno=34,
            col_offset=24,
            end_lineno=34,
            end_col_offset=30),
          arg(
            'denomination',
            lineno=34,
            col_offset=32,
            end_lineno=34,
            end_col_offset=44)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            '\n\n    :param amount: float - the total starting value.\n    :param denomination: int - the value of a single bill.\n    :return: int - number of bills that can be obtained from the amount.\n    ',
            lineno=35,
            col_offset=4,
            end_lineno=40,
            end_col_offset=7),
          lineno=35,
          col_offset=4,
          end_lineno=40,
          end_col_offset=7),
        Return(
          BinOp(
            Call(
              Name(
                'int',
                Load(),
                lineno=42,
                col_offset=11,
                end_lineno=42,
                end_col_offset=14),
              [
                Name(
                  'amount',
                  Load(),
                  lineno=42,
                  col_offset=15,
                  end_lineno=42,
                  end_col_offset=21)],
              [],
              lineno=42,
              col_offset=11,
              end_lineno=42,
              end_col_offset=22),
            FloorDiv(),
            Name(
              'denomination',
              Load(),
              lineno=42,
              col_offset=26,
              end_lineno=42,
              end_col_offset=38),
            lineno=42,
            col_offset=11,
            end_lineno=42,
            end_col_offset=38),
          lineno=42,
          col_offset=4,
          end_lineno=42,
          end_col_offset=38)],
      [],
      lineno=34,
      col_offset=0,
      end_lineno=42,
      end_col_offset=38),
    FunctionDef(
      'get_leftover_of_bills',
      arguments(
        [],
        [
          arg(
            'amount',
            lineno=45,
            col_offset=26,
            end_lineno=45,
            end_col_offset=32),
          arg(
            'denomination',
            lineno=45,
            col_offset=34,
            end_lineno=45,
            end_col_offset=46)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            '\n\n    :param amount: float - the total starting value.\n    :param denomination: int - the value of a single bill.\n    :return: float - the amount that is "leftover", given the current denomination.\n    ',
            lineno=46,
            col_offset=4,
            end_lineno=51,
            end_col_offset=7),
          lineno=46,
          col_offset=4,
          end_lineno=51,
          end_col_offset=7),
        Return(
          BinOp(
            Name(
              'amount',
              Load(),
              lineno=53,
              col_offset=11,
              end_lineno=53,
              end_col_offset=17),
            Mod(),
            Name(
              'denomination',
              Load(),
              lineno=53,
              col_offset=20,
              end_lineno=53,
              end_col_offset=32),
            lineno=53,
            col_offset=11,
            end_lineno=53,
            end_col_offset=32),
          lineno=53,
          col_offset=4,
          end_lineno=53,
          end_col_offset=32)],
      [],
      lineno=45,
      col_offset=0,
      end_lineno=53,
      end_col_offset=32),
    FunctionDef(
      'exchangeable_value',
      arguments(
        [],
        [
          arg(
            'budget',
            lineno=56,
            col_offset=23,
            end_lineno=56,
            end_col_offset=29),
          arg(
            'exchange_rate',
            lineno=56,
            col_offset=31,
            end_lineno=56,
            end_col_offset=44),
          arg(
            'spread',
            lineno=56,
            col_offset=46,
            end_lineno=56,
            end_col_offset=52),
          arg(
            'denomination',
            lineno=56,
            col_offset=54,
            end_lineno=56,
            end_col_offset=66)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            '\n\n    :param budget: float - the amount of your money you are planning to exchange.\n    :param exchange_rate: float - the unit value of the foreign currency.\n    :param spread: int - percentage that is taken as an exchange fee.\n    :param denomination: int - the value of a single bill.\n    :return: int - maximum value you can get.\n    ',
            lineno=57,
            col_offset=4,
            end_lineno=64,
            end_col_offset=7),
          lineno=57,
          col_offset=4,
          end_lineno=64,
          end_col_offset=7),
        Assign(
          [
            Name(
              'exchange_fee',
              Store(),
              lineno=66,
              col_offset=4,
              end_lineno=66,
              end_col_offset=16)],
          BinOp(
            BinOp(
              Name(
                'exchange_rate',
                Load(),
                lineno=66,
                col_offset=20,
                end_lineno=66,
                end_col_offset=33),
              Div(),
              Constant(
                100,
                lineno=66,
                col_offset=36,
                end_lineno=66,
                end_col_offset=39),
              lineno=66,
              col_offset=20,
              end_lineno=66,
              end_col_offset=39),
            Mult(),
            Name(
              'spread',
              Load(),
              lineno=66,
              col_offset=43,
              end_lineno=66,
              end_col_offset=49),
            lineno=66,
            col_offset=19,
            end_lineno=66,
            end_col_offset=49),
          lineno=66,
          col_offset=4,
          end_lineno=66,
          end_col_offset=49),
        Assign(
          [
            Name(
              'exchange_value',
              Store(),
              lineno=67,
              col_offset=4,
              end_lineno=67,
              end_col_offset=18)],
          Call(
            Name(
              'exchange_money',
              Load(),
              lineno=67,
              col_offset=21,
              end_lineno=67,
              end_col_offset=35),
            [
              Name(
                'budget',
                Load(),
                lineno=67,
                col_offset=36,
                end_lineno=67,
                end_col_offset=42),
              BinOp(
                Name(
                  'exchange_rate',
                  Load(),
                  lineno=67,
                  col_offset=44,
                  end_lineno=67,
                  end_col_offset=57),
                Add(),
                Name(
                  'exchange_fee',
                  Load(),
                  lineno=67,
                  col_offset=60,
                  end_lineno=67,
                  end_col_offset=72),
                lineno=67,
                col_offset=44,
                end_lineno=67,
                end_col_offset=72)],
            [],
            lineno=67,
            col_offset=21,
            end_lineno=67,
            end_col_offset=73),
          lineno=67,
          col_offset=4,
          end_lineno=67,
          end_col_offset=73),
        Assign(
          [
            Name(
              'number_of_bills',
              Store(),
              lineno=68,
              col_offset=4,
              end_lineno=68,
              end_col_offset=19)],
          Call(
            Name(
              'get_number_of_bills',
              Load(),
              lineno=68,
              col_offset=22,
              end_lineno=68,
              end_col_offset=41),
            [
              Name(
                'exchange_value',
                Load(),
                lineno=68,
                col_offset=42,
                end_lineno=68,
                end_col_offset=56),
              Name(
                'denomination',
                Load(),
                lineno=68,
                col_offset=58,
                end_lineno=68,
                end_col_offset=70)],
            [],
            lineno=68,
            col_offset=22,
            end_lineno=68,
            end_col_offset=71),
          lineno=68,
          col_offset=4,
          end_lineno=68,
          end_col_offset=71),
        Assign(
          [
            Name(
              'value_of_bills',
              Store(),
              lineno=69,
              col_offset=4,
              end_lineno=69,
              end_col_offset=18)],
          Call(
            Name(
              'get_value_of_bills',
              Load(),
              lineno=69,
              col_offset=21,
              end_lineno=69,
              end_col_offset=39),
            [
              Name(
                'denomination',
                Load(),
                lineno=69,
                col_offset=40,
                end_lineno=69,
                end_col_offset=52),
              Name(
                'number_of_bills',
                Load(),
                lineno=69,
                col_offset=54,
                end_lineno=69,
                end_col_offset=69)],
            [],
            lineno=69,
            col_offset=21,
            end_lineno=69,
            end_col_offset=70),
          lineno=69,
          col_offset=4,
          end_lineno=69,
          end_col_offset=70),
        Return(
          Name(
            'value_of_bills',
            Load(),
            lineno=70,
            col_offset=11,
            end_lineno=70,
            end_col_offset=25),
          lineno=70,
          col_offset=4,
          end_lineno=70,
          end_col_offset=25)],
      [],
      lineno=56,
      col_offset=0,
      end_lineno=70,
      end_col_offset=25)],
  [])
## END TREE BEFORE ##

## BEGIN NORMALIZED TREE ##
Module(
  [
    FunctionDef(
      'placeholder_0',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=1,
            col_offset=19,
            end_lineno=1,
            end_col_offset=25),
          arg(
            'placeholder_2',
            lineno=1,
            col_offset=27,
            end_lineno=1,
            end_col_offset=40)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BinOp(
            Name(
              'placeholder_1',
              Load(),
              lineno=9,
              col_offset=11,
              end_lineno=9,
              end_col_offset=17),
            Div(),
            Name(
              'placeholder_2',
              Load(),
              lineno=9,
              col_offset=20,
              end_lineno=9,
              end_col_offset=33),
            lineno=9,
            col_offset=11,
            end_lineno=9,
            end_col_offset=33),
          lineno=9,
          col_offset=4,
          end_lineno=9,
          end_col_offset=33)],
      [],
      lineno=1,
      col_offset=0,
      end_lineno=9,
      end_col_offset=33),
    FunctionDef(
      'placeholder_3',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=12,
            col_offset=15,
            end_lineno=12,
            end_col_offset=21),
          arg(
            'placeholder_4',
            lineno=12,
            col_offset=23,
            end_lineno=12,
            end_col_offset=39)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BinOp(
            Name(
              'placeholder_1',
              Load(),
              lineno=20,
              col_offset=11,
              end_lineno=20,
              end_col_offset=17),
            Sub(),
            Name(
              'placeholder_4',
              Load(),
              lineno=20,
              col_offset=20,
              end_lineno=20,
              end_col_offset=36),
            lineno=20,
            col_offset=11,
            end_lineno=20,
            end_col_offset=36),
          lineno=20,
          col_offset=4,
          end_lineno=20,
          end_col_offset=36)],
      [],
      lineno=12,
      col_offset=0,
      end_lineno=20,
      end_col_offset=36),
    FunctionDef(
      'placeholder_5',
      arguments(
        [],
        [
          arg(
            'placeholder_6',
            lineno=23,
            col_offset=23,
            end_lineno=23,
            end_col_offset=35),
          arg(
            'placeholder_7',
            lineno=23,
            col_offset=37,
            end_lineno=23,
            end_col_offset=52)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BinOp(
            Name(
              'placeholder_6',
              Load(),
              lineno=31,
              col_offset=11,
              end_lineno=31,
              end_col_offset=23),
            Mult(),
            Name(
              'placeholder_7',
              Load(),
              lineno=31,
              col_offset=26,
              end_lineno=31,
              end_col_offset=41),
            lineno=31,
            col_offset=11,
            end_lineno=31,
            end_col_offset=41),
          lineno=31,
          col_offset=4,
          end_lineno=31,
          end_col_offset=41)],
      [],
      lineno=23,
      col_offset=0,
      end_lineno=31,
      end_col_offset=41),
    FunctionDef(
      'placeholder_8',
      arguments(
        [],
        [
          arg(
            'placeholder_9',
            lineno=34,
            col_offset=24,
            end_lineno=34,
            end_col_offset=30),
          arg(
            'placeholder_6',
            lineno=34,
            col_offset=32,
            end_lineno=34,
            end_col_offset=44)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BinOp(
            Call(
              Name(
                'int',
                Load(),
                lineno=42,
                col_offset=11,
                end_lineno=42,
                end_col_offset=14),
              [
                Name(
                  'placeholder_9',
                  Load(),
                  lineno=42,
                  col_offset=15,
                  end_lineno=42,
                  end_col_offset=21)],
              [],
              lineno=42,
              col_offset=11,
              end_lineno=42,
              end_col_offset=22),
            FloorDiv(),
            Name(
              'placeholder_6',
              Load(),
              lineno=42,
              col_offset=26,
              end_lineno=42,
              end_col_offset=38),
            lineno=42,
            col_offset=11,
            end_lineno=42,
            end_col_offset=38),
          lineno=42,
          col_offset=4,
          end_lineno=42,
          end_col_offset=38)],
      [],
      lineno=34,
      col_offset=0,
      end_lineno=42,
      end_col_offset=38),
    FunctionDef(
      'placeholder_10',
      arguments(
        [],
        [
          arg(
            'placeholder_9',
            lineno=45,
            col_offset=26,
            end_lineno=45,
            end_col_offset=32),
          arg(
            'placeholder_6',
            lineno=45,
            col_offset=34,
            end_lineno=45,
            end_col_offset=46)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BinOp(
            Name(
              'placeholder_9',
              Load(),
              lineno=53,
              col_offset=11,
              end_lineno=53,
              end_col_offset=17),
            Mod(),
            Name(
              'placeholder_6',
              Load(),
              lineno=53,
              col_offset=20,
              end_lineno=53,
              end_col_offset=32),
            lineno=53,
            col_offset=11,
            end_lineno=53,
            end_col_offset=32),
          lineno=53,
          col_offset=4,
          end_lineno=53,
          end_col_offset=32)],
      [],
      lineno=45,
      col_offset=0,
      end_lineno=53,
      end_col_offset=32),
    FunctionDef(
      'placeholder_11',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=56,
            col_offset=23,
            end_lineno=56,
            end_col_offset=29),
          arg(
            'placeholder_2',
            lineno=56,
            col_offset=31,
            end_lineno=56,
            end_col_offset=44),
          arg(
            'placeholder_12',
            lineno=56,
            col_offset=46,
            end_lineno=56,
            end_col_offset=52),
          arg(
            'placeholder_6',
            lineno=56,
            col_offset=54,
            end_lineno=56,
            end_col_offset=66)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'placeholder_13',
              Store(),
              lineno=66,
              col_offset=4,
              end_lineno=66,
              end_col_offset=16)],
          BinOp(
            BinOp(
              Name(
                'placeholder_2',
                Load(),
                lineno=66,
                col_offset=20,
                end_lineno=66,
                end_col_offset=33),
              Div(),
              Constant(
                100,
                lineno=66,
                col_offset=36,
                end_lineno=66,
                end_col_offset=39),
              lineno=66,
              col_offset=20,
              end_lineno=66,
              end_col_offset=39),
            Mult(),
            Name(
              'placeholder_12',
              Load(),
              lineno=66,
              col_offset=43,
              end_lineno=66,
              end_col_offset=49),
            lineno=66,
            col_offset=19,
            end_lineno=66,
            end_col_offset=49),
          lineno=66,
          col_offset=4,
          end_lineno=66,
          end_col_offset=49),
        Assign(
          [
            Name(
              'placeholder_14',
              Store(),
              lineno=67,
              col_offset=4,
              end_lineno=67,
              end_col_offset=18)],
          Call(
            Name(
              'placeholder_0',
              Load(),
              lineno=67,
              col_offset=21,
              end_lineno=67,
              end_col_offset=35),
            [
              Name(
                'placeholder_1',
                Load(),
                lineno=67,
                col_offset=36,
                end_lineno=67,
                end_col_offset=42),
              BinOp(
                Name(
                  'placeholder_2',
                  Load(),
                  lineno=67,
                  col_offset=44,
                  end_lineno=67,
                  end_col_offset=57),
                Add(),
                Name(
                  'placeholder_13',
                  Load(),
                  lineno=67,
                  col_offset=60,
                  end_lineno=67,
                  end_col_offset=72),
                lineno=67,
                col_offset=44,
                end_lineno=67,
                end_col_offset=72)],
            [],
            lineno=67,
            col_offset=21,
            end_lineno=67,
            end_col_offset=73),
          lineno=67,
          col_offset=4,
          end_lineno=67,
          end_col_offset=73),
        Assign(
          [
            Name(
              'placeholder_7',
              Store(),
              lineno=68,
              col_offset=4,
              end_lineno=68,
              end_col_offset=19)],
          Call(
            Name(
              'placeholder_8',
              Load(),
              lineno=68,
              col_offset=22,
              end_lineno=68,
              end_col_offset=41),
            [
              Name(
                'placeholder_14',
                Load(),
                lineno=68,
                col_offset=42,
                end_lineno=68,
                end_col_offset=56),
              Name(
                'placeholder_6',
                Load(),
                lineno=68,
                col_offset=58,
                end_lineno=68,
                end_col_offset=70)],
            [],
            lineno=68,
            col_offset=22,
            end_lineno=68,
            end_col_offset=71),
          lineno=68,
          col_offset=4,
          end_lineno=68,
          end_col_offset=71),
        Assign(
          [
            Name(
              'placeholder_15',
              Store(),
              lineno=69,
              col_offset=4,
              end_lineno=69,
              end_col_offset=18)],
          Call(
            Name(
              'placeholder_5',
              Load(),
              lineno=69,
              col_offset=21,
              end_lineno=69,
              end_col_offset=39),
            [
              Name(
                'placeholder_6',
                Load(),
                lineno=69,
                col_offset=40,
                end_lineno=69,
                end_col_offset=52),
              Name(
                'placeholder_7',
                Load(),
                lineno=69,
                col_offset=54,
                end_lineno=69,
                end_col_offset=69)],
            [],
            lineno=69,
            col_offset=21,
            end_lineno=69,
            end_col_offset=70),
          lineno=69,
          col_offset=4,
          end_lineno=69,
          end_col_offset=70),
        Return(
          Name(
            'placeholder_15',
            Load(),
            lineno=70,
            col_offset=11,
            end_lineno=70,
            end_col_offset=25),
          lineno=70,
          col_offset=4,
          end_lineno=70,
          end_col_offset=25)],
      [],
      lineno=56,
      col_offset=0,
      end_lineno=70,
      end_col_offset=25)],
  [])
## END NORMALIZED TREE ##