# BEGIN TREE BEFORE
Module(
  [
    Expr(
      Constant(
        'Functions to prevent a nuclear meltdown.',
        lineno=1,
        col_offset=0,
        end_lineno=1,
        end_col_offset=46),
      lineno=1,
      col_offset=0,
      end_lineno=1,
      end_col_offset=46),
    FunctionDef(
      'is_criticality_balanced',
      arguments(
        [],
        [
          arg(
            'temperature',
            BinOp(
              Name(
                'int',
                Load(),
                lineno=5,
                col_offset=21,
                end_lineno=5,
                end_col_offset=24),
              BitOr(),
              Name(
                'float',
                Load(),
                lineno=5,
                col_offset=27,
                end_lineno=5,
                end_col_offset=32),
              lineno=5,
              col_offset=21,
              end_lineno=5,
              end_col_offset=32),
            lineno=5,
            col_offset=8,
            end_lineno=5,
            end_col_offset=32),
          arg(
            'neutrons_emitted',
            BinOp(
              Name(
                'int',
                Load(),
                lineno=6,
                col_offset=26,
                end_lineno=6,
                end_col_offset=29),
              BitOr(),
              Name(
                'float',
                Load(),
                lineno=6,
                col_offset=32,
                end_lineno=6,
                end_col_offset=37),
              lineno=6,
              col_offset=26,
              end_lineno=6,
              end_col_offset=37),
            lineno=6,
            col_offset=8,
            end_lineno=6,
            end_col_offset=37)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Verify criticality is balanced.\n\n    :param temperature: int or float - temperature value in kelvin.\n    :param neutrons_emitted: int or float - number of neutrons emitted per second.\n    :return: bool - is criticality balanced?\n\n    A reactor is said to be critical if it satisfies the following conditions:\n    - The temperature is less than 800 K.\n    - The number of neutrons emitted per second is greater than 500.\n    - The product of temperature and neutrons emitted per second is less than 500000.\n    ',
            lineno=8,
            col_offset=4,
            end_lineno=18,
            end_col_offset=7),
          lineno=8,
          col_offset=4,
          end_lineno=18,
          end_col_offset=7),
        Return(
          BoolOp(
            And(),
            [
              Compare(
                Name(
                  'temperature',
                  Load(),
                  lineno=20,
                  col_offset=11,
                  end_lineno=20,
                  end_col_offset=22),
                [
                  Lt()],
                [
                  Constant(
                    800,
                    lineno=20,
                    col_offset=25,
                    end_lineno=20,
                    end_col_offset=28)],
                lineno=20,
                col_offset=11,
                end_lineno=20,
                end_col_offset=28),
              Compare(
                Name(
                  'neutrons_emitted',
                  Load(),
                  lineno=20,
                  col_offset=33,
                  end_lineno=20,
                  end_col_offset=49),
                [
                  Gt()],
                [
                  Constant(
                    500,
                    lineno=20,
                    col_offset=52,
                    end_lineno=20,
                    end_col_offset=55)],
                lineno=20,
                col_offset=33,
                end_lineno=20,
                end_col_offset=55),
              Compare(
                BinOp(
                  Name(
                    'temperature',
                    Load(),
                    lineno=20,
                    col_offset=62,
                    end_lineno=20,
                    end_col_offset=73),
                  Mult(),
                  Name(
                    'neutrons_emitted',
                    Load(),
                    lineno=20,
                    col_offset=76,
                    end_lineno=20,
                    end_col_offset=92),
                  lineno=20,
                  col_offset=62,
                  end_lineno=20,
                  end_col_offset=92),
                [
                  Lt()],
                [
                  Constant(
                    500000,
                    lineno=20,
                    col_offset=96,
                    end_lineno=20,
                    end_col_offset=103)],
                lineno=20,
                col_offset=61,
                end_lineno=20,
                end_col_offset=103)],
            lineno=20,
            col_offset=11,
            end_lineno=20,
            end_col_offset=104),
          lineno=20,
          col_offset=4,
          end_lineno=20,
          end_col_offset=104)],
      [],
      Name(
        'bool',
        Load(),
        lineno=7,
        col_offset=5,
        end_lineno=7,
        end_col_offset=9),
      lineno=4,
      col_offset=0,
      end_lineno=20,
      end_col_offset=104),
    FunctionDef(
      'reactor_efficiency',
      arguments(
        [],
        [
          arg(
            'voltage',
            BinOp(
              Name(
                'int',
                Load(),
                lineno=24,
                col_offset=17,
                end_lineno=24,
                end_col_offset=20),
              BitOr(),
              Name(
                'float',
                Load(),
                lineno=24,
                col_offset=23,
                end_lineno=24,
                end_col_offset=28),
              lineno=24,
              col_offset=17,
              end_lineno=24,
              end_col_offset=28),
            lineno=24,
            col_offset=8,
            end_lineno=24,
            end_col_offset=28),
          arg(
            'current',
            BinOp(
              Name(
                'int',
                Load(),
                lineno=25,
                col_offset=17,
                end_lineno=25,
                end_col_offset=20),
              BitOr(),
              Name(
                'float',
                Load(),
                lineno=25,
                col_offset=23,
                end_lineno=25,
                end_col_offset=28),
              lineno=25,
              col_offset=17,
              end_lineno=25,
              end_col_offset=28),
            lineno=25,
            col_offset=8,
            end_lineno=25,
            end_col_offset=28),
          arg(
            'theoretical_max_power',
            BinOp(
              Name(
                'int',
                Load(),
                lineno=26,
                col_offset=31,
                end_lineno=26,
                end_col_offset=34),
              BitOr(),
              Name(
                'float',
                Load(),
                lineno=26,
                col_offset=37,
                end_lineno=26,
                end_col_offset=42),
              lineno=26,
              col_offset=31,
              end_lineno=26,
              end_col_offset=42),
            lineno=26,
            col_offset=8,
            end_lineno=26,
            end_col_offset=42)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            "Assess reactor efficiency zone.\n\n    :param voltage: int or float - voltage value.\n    :param current: int or float - current value.\n    :param theoretical_max_power: int or float - power that corresponds to a 100% efficiency.\n    :return: str - one of ('green', 'orange', 'red', or 'black').\n\n    Efficiency can be grouped into 4 bands:\n\n    1. green -> efficiency of 80% or more,\n    2. orange -> efficiency of less than 80% but at least 60%,\n    3. red -> efficiency below 60%, but still 30% or more,\n    4. black ->  less than 30% efficient.\n\n    The percentage value is calculated as\n    (generated power/ theoretical max power)*100\n    where generated power = voltage * current\n    ",
            lineno=28,
            col_offset=4,
            end_lineno=45,
            end_col_offset=7),
          lineno=28,
          col_offset=4,
          end_lineno=45,
          end_col_offset=7),
        AnnAssign(
          Name(
            'power',
            Store(),
            lineno=47,
            col_offset=4,
            end_lineno=47,
            end_col_offset=9),
          BinOp(
            Name(
              'int',
              Load(),
              lineno=47,
              col_offset=12,
              end_lineno=47,
              end_col_offset=15),
            BitOr(),
            Name(
              'float',
              Load(),
              lineno=47,
              col_offset=18,
              end_lineno=47,
              end_col_offset=23),
            lineno=47,
            col_offset=12,
            end_lineno=47,
            end_col_offset=23),
          BinOp(
            Name(
              'voltage',
              Load(),
              lineno=47,
              col_offset=26,
              end_lineno=47,
              end_col_offset=33),
            Mult(),
            Name(
              'current',
              Load(),
              lineno=47,
              col_offset=36,
              end_lineno=47,
              end_col_offset=43),
            lineno=47,
            col_offset=26,
            end_lineno=47,
            end_col_offset=43),
          1,
          lineno=47,
          col_offset=4,
          end_lineno=47,
          end_col_offset=43),
        AnnAssign(
          Name(
            'efficiency',
            Store(),
            lineno=48,
            col_offset=4,
            end_lineno=48,
            end_col_offset=14),
          Name(
            'float',
            Load(),
            lineno=48,
            col_offset=17,
            end_lineno=48,
            end_col_offset=22),
          BinOp(
            BinOp(
              Name(
                'power',
                Load(),
                lineno=48,
                col_offset=26,
                end_lineno=48,
                end_col_offset=31),
              Div(),
              Name(
                'theoretical_max_power',
                Load(),
                lineno=48,
                col_offset=34,
                end_lineno=48,
                end_col_offset=55),
              lineno=48,
              col_offset=26,
              end_lineno=48,
              end_col_offset=55),
            Mult(),
            Constant(
              100,
              lineno=48,
              col_offset=59,
              end_lineno=48,
              end_col_offset=62),
            lineno=48,
            col_offset=25,
            end_lineno=48,
            end_col_offset=62),
          1,
          lineno=48,
          col_offset=4,
          end_lineno=48,
          end_col_offset=62),
        If(
          Compare(
            Name(
              'efficiency',
              Load(),
              lineno=50,
              col_offset=7,
              end_lineno=50,
              end_col_offset=17),
            [
              GtE()],
            [
              Constant(
                80,
                lineno=50,
                col_offset=21,
                end_lineno=50,
                end_col_offset=23)],
            lineno=50,
            col_offset=7,
            end_lineno=50,
            end_col_offset=23),
          [
            Return(
              Constant(
                'green',
                lineno=51,
                col_offset=15,
                end_lineno=51,
                end_col_offset=22),
              lineno=51,
              col_offset=8,
              end_lineno=51,
              end_col_offset=22)],
          [],
          lineno=50,
          col_offset=4,
          end_lineno=51,
          end_col_offset=22),
        If(
          Compare(
            Name(
              'efficiency',
              Load(),
              lineno=52,
              col_offset=7,
              end_lineno=52,
              end_col_offset=17),
            [
              GtE()],
            [
              Constant(
                60,
                lineno=52,
                col_offset=21,
                end_lineno=52,
                end_col_offset=23)],
            lineno=52,
            col_offset=7,
            end_lineno=52,
            end_col_offset=23),
          [
            Return(
              Constant(
                'orange',
                lineno=53,
                col_offset=15,
                end_lineno=53,
                end_col_offset=23),
              lineno=53,
              col_offset=8,
              end_lineno=53,
              end_col_offset=23)],
          [],
          lineno=52,
          col_offset=4,
          end_lineno=53,
          end_col_offset=23),
        If(
          Compare(
            Name(
              'efficiency',
              Load(),
              lineno=54,
              col_offset=7,
              end_lineno=54,
              end_col_offset=17),
            [
              GtE()],
            [
              Constant(
                30,
                lineno=54,
                col_offset=21,
                end_lineno=54,
                end_col_offset=23)],
            lineno=54,
            col_offset=7,
            end_lineno=54,
            end_col_offset=23),
          [
            Expr(
              Call(
                Name(
                  'print',
                  Load(),
                  lineno=55,
                  col_offset=8,
                  end_lineno=55,
                  end_col_offset=13),
                [
                  Name(
                    'efficiency',
                    Load(),
                    lineno=55,
                    col_offset=14,
                    end_lineno=55,
                    end_col_offset=24)],
                [],
                lineno=55,
                col_offset=8,
                end_lineno=55,
                end_col_offset=25),
              lineno=55,
              col_offset=8,
              end_lineno=55,
              end_col_offset=25),
            Return(
              Constant(
                'red',
                lineno=56,
                col_offset=15,
                end_lineno=56,
                end_col_offset=20),
              lineno=56,
              col_offset=8,
              end_lineno=56,
              end_col_offset=20)],
          [],
          lineno=54,
          col_offset=4,
          end_lineno=56,
          end_col_offset=20),
        Return(
          Constant(
            'black',
            lineno=57,
            col_offset=11,
            end_lineno=57,
            end_col_offset=18),
          lineno=57,
          col_offset=4,
          end_lineno=57,
          end_col_offset=18)],
      [],
      Name(
        'str',
        Load(),
        lineno=27,
        col_offset=5,
        end_lineno=27,
        end_col_offset=8),
      lineno=23,
      col_offset=0,
      end_lineno=57,
      end_col_offset=18),
    FunctionDef(
      'fail_safe',
      arguments(
        [],
        [
          arg(
            'temperature',
            BinOp(
              Name(
                'int',
                Load(),
                lineno=61,
                col_offset=21,
                end_lineno=61,
                end_col_offset=24),
              BitOr(),
              Name(
                'float',
                Load(),
                lineno=61,
                col_offset=27,
                end_lineno=61,
                end_col_offset=32),
              lineno=61,
              col_offset=21,
              end_lineno=61,
              end_col_offset=32),
            lineno=61,
            col_offset=8,
            end_lineno=61,
            end_col_offset=32),
          arg(
            'neutrons_produced_per_second',
            BinOp(
              Name(
                'int',
                Load(),
                lineno=62,
                col_offset=38,
                end_lineno=62,
                end_col_offset=41),
              BitOr(),
              Name(
                'float',
                Load(),
                lineno=62,
                col_offset=44,
                end_lineno=62,
                end_col_offset=49),
              lineno=62,
              col_offset=38,
              end_lineno=62,
              end_col_offset=49),
            lineno=62,
            col_offset=8,
            end_lineno=62,
            end_col_offset=49),
          arg(
            'threshold',
            BinOp(
              Name(
                'int',
                Load(),
                lineno=63,
                col_offset=19,
                end_lineno=63,
                end_col_offset=22),
              BitOr(),
              Name(
                'float',
                Load(),
                lineno=63,
                col_offset=25,
                end_lineno=63,
                end_col_offset=30),
              lineno=63,
              col_offset=19,
              end_lineno=63,
              end_col_offset=30),
            lineno=63,
            col_offset=8,
            end_lineno=63,
            end_col_offset=30)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            "Assess and return status code for the reactor.\n\n    :param temperature: int or float - value of the temperature in kelvin.\n    :param neutrons_produced_per_second: int or float - neutron flux.\n    :param threshold: int or float - threshold for category.\n    :return: str - one of ('LOW', 'NORMAL', 'DANGER').\n\n    1. 'LOW' -> `temperature * neutrons per second` < 90% of `threshold`\n    2. 'NORMAL' -> `temperature * neutrons per second` +/- 10% of `threshold`\n    3. 'DANGER' -> `temperature * neutrons per second` is not in the above-stated ranges\n    ",
            lineno=65,
            col_offset=4,
            end_lineno=75,
            end_col_offset=7),
          lineno=65,
          col_offset=4,
          end_lineno=75,
          end_col_offset=7),
        AnnAssign(
          Name(
            'criticality',
            Store(),
            lineno=76,
            col_offset=4,
            end_lineno=76,
            end_col_offset=15),
          BinOp(
            Name(
              'int',
              Load(),
              lineno=76,
              col_offset=18,
              end_lineno=76,
              end_col_offset=21),
            BitOr(),
            Name(
              'float',
              Load(),
              lineno=76,
              col_offset=24,
              end_lineno=76,
              end_col_offset=29),
            lineno=76,
            col_offset=18,
            end_lineno=76,
            end_col_offset=29),
          BinOp(
            Name(
              'temperature',
              Load(),
              lineno=76,
              col_offset=32,
              end_lineno=76,
              end_col_offset=43),
            Mult(),
            Name(
              'neutrons_produced_per_second',
              Load(),
              lineno=76,
              col_offset=46,
              end_lineno=76,
              end_col_offset=74),
            lineno=76,
            col_offset=32,
            end_lineno=76,
            end_col_offset=74),
          1,
          lineno=76,
          col_offset=4,
          end_lineno=76,
          end_col_offset=74),
        Match(
          Name(
            'criticality',
            Load(),
            lineno=78,
            col_offset=10,
            end_lineno=78,
            end_col_offset=21),
          [
            match_case(
              MatchAs(
                name='n',
                lineno=79,
                col_offset=13,
                end_lineno=79,
                end_col_offset=14),
              Compare(
                Name(
                  'n',
                  Load(),
                  lineno=79,
                  col_offset=18,
                  end_lineno=79,
                  end_col_offset=19),
                [
                  Lt()],
                [
                  BinOp(
                    Name(
                      'threshold',
                      Load(),
                      lineno=79,
                      col_offset=22,
                      end_lineno=79,
                      end_col_offset=31),
                    Mult(),
                    Constant(
                      0.9,
                      lineno=79,
                      col_offset=34,
                      end_lineno=79,
                      end_col_offset=37),
                    lineno=79,
                    col_offset=22,
                    end_lineno=79,
                    end_col_offset=37)],
                lineno=79,
                col_offset=18,
                end_lineno=79,
                end_col_offset=37),
              [
                Return(
                  Constant(
                    'LOW',
                    lineno=80,
                    col_offset=19,
                    end_lineno=80,
                    end_col_offset=24),
                  lineno=80,
                  col_offset=12,
                  end_lineno=80,
                  end_col_offset=24)]),
            match_case(
              MatchAs(
                name='n',
                lineno=81,
                col_offset=13,
                end_lineno=81,
                end_col_offset=14),
              Compare(
                Name(
                  'n',
                  Load(),
                  lineno=81,
                  col_offset=18,
                  end_lineno=81,
                  end_col_offset=19),
                [
                  Gt()],
                [
                  BinOp(
                    Name(
                      'threshold',
                      Load(),
                      lineno=81,
                      col_offset=22,
                      end_lineno=81,
                      end_col_offset=31),
                    Mult(),
                    Constant(
                      1.1,
                      lineno=81,
                      col_offset=34,
                      end_lineno=81,
                      end_col_offset=37),
                    lineno=81,
                    col_offset=22,
                    end_lineno=81,
                    end_col_offset=37)],
                lineno=81,
                col_offset=18,
                end_lineno=81,
                end_col_offset=37),
              [
                Return(
                  Constant(
                    'DANGER',
                    lineno=82,
                    col_offset=19,
                    end_lineno=82,
                    end_col_offset=27),
                  lineno=82,
                  col_offset=12,
                  end_lineno=82,
                  end_col_offset=27)]),
            match_case(
              MatchAs(
                lineno=83,
                col_offset=13,
                end_lineno=83,
                end_col_offset=14),
              body=[
                Return(
                  Constant(
                    'NORMAL',
                    lineno=84,
                    col_offset=19,
                    end_lineno=84,
                    end_col_offset=27),
                  lineno=84,
                  col_offset=12,
                  end_lineno=84,
                  end_col_offset=27)])],
          lineno=78,
          col_offset=4,
          end_lineno=84,
          end_col_offset=27)],
      [],
      Name(
        'str',
        Load(),
        lineno=64,
        col_offset=5,
        end_lineno=64,
        end_col_offset=8),
      lineno=60,
      col_offset=0,
      end_lineno=84,
      end_col_offset=27)],
  [])

# BEGIN TREE AFTER
Module(
  [
    FunctionDef(
      'placeholder_0',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=5,
            col_offset=8,
            end_lineno=5,
            end_col_offset=32),
          arg(
            'placeholder_2',
            lineno=6,
            col_offset=8,
            end_lineno=6,
            end_col_offset=37)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BoolOp(
            And(),
            [
              Compare(
                Name(
                  'placeholder_1',
                  Load(),
                  lineno=20,
                  col_offset=11,
                  end_lineno=20,
                  end_col_offset=22),
                [
                  Lt()],
                [
                  Constant(
                    800,
                    lineno=20,
                    col_offset=25,
                    end_lineno=20,
                    end_col_offset=28)],
                lineno=20,
                col_offset=11,
                end_lineno=20,
                end_col_offset=28),
              Compare(
                Name(
                  'placeholder_2',
                  Load(),
                  lineno=20,
                  col_offset=33,
                  end_lineno=20,
                  end_col_offset=49),
                [
                  Gt()],
                [
                  Constant(
                    500,
                    lineno=20,
                    col_offset=52,
                    end_lineno=20,
                    end_col_offset=55)],
                lineno=20,
                col_offset=33,
                end_lineno=20,
                end_col_offset=55),
              Compare(
                BinOp(
                  Name(
                    'placeholder_1',
                    Load(),
                    lineno=20,
                    col_offset=62,
                    end_lineno=20,
                    end_col_offset=73),
                  Mult(),
                  Name(
                    'placeholder_2',
                    Load(),
                    lineno=20,
                    col_offset=76,
                    end_lineno=20,
                    end_col_offset=92),
                  lineno=20,
                  col_offset=62,
                  end_lineno=20,
                  end_col_offset=92),
                [
                  Lt()],
                [
                  Constant(
                    500000,
                    lineno=20,
                    col_offset=96,
                    end_lineno=20,
                    end_col_offset=103)],
                lineno=20,
                col_offset=61,
                end_lineno=20,
                end_col_offset=103)],
            lineno=20,
            col_offset=11,
            end_lineno=20,
            end_col_offset=104),
          lineno=20,
          col_offset=4,
          end_lineno=20,
          end_col_offset=104)],
      [],
      lineno=4,
      col_offset=0,
      end_lineno=20,
      end_col_offset=104),
    FunctionDef(
      'placeholder_3',
      arguments(
        [],
        [
          arg(
            'placeholder_4',
            lineno=24,
            col_offset=8,
            end_lineno=24,
            end_col_offset=28),
          arg(
            'placeholder_5',
            lineno=25,
            col_offset=8,
            end_lineno=25,
            end_col_offset=28),
          arg(
            'placeholder_6',
            lineno=26,
            col_offset=8,
            end_lineno=26,
            end_col_offset=42)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'placeholder_7',
              Store(),
              lineno=47,
              col_offset=4,
              end_lineno=47,
              end_col_offset=9)],
          BinOp(
            Name(
              'placeholder_4',
              Load(),
              lineno=47,
              col_offset=26,
              end_lineno=47,
              end_col_offset=33),
            Mult(),
            Name(
              'placeholder_5',
              Load(),
              lineno=47,
              col_offset=36,
              end_lineno=47,
              end_col_offset=43),
            lineno=47,
            col_offset=26,
            end_lineno=47,
            end_col_offset=43),
          lineno=47),
        Assign(
          [
            Name(
              'placeholder_8',
              Store(),
              lineno=48,
              col_offset=4,
              end_lineno=48,
              end_col_offset=14)],
          BinOp(
            BinOp(
              Name(
                'placeholder_7',
                Load(),
                lineno=48,
                col_offset=26,
                end_lineno=48,
                end_col_offset=31),
              Div(),
              Name(
                'placeholder_6',
                Load(),
                lineno=48,
                col_offset=34,
                end_lineno=48,
                end_col_offset=55),
              lineno=48,
              col_offset=26,
              end_lineno=48,
              end_col_offset=55),
            Mult(),
            Constant(
              100,
              lineno=48,
              col_offset=59,
              end_lineno=48,
              end_col_offset=62),
            lineno=48,
            col_offset=25,
            end_lineno=48,
            end_col_offset=62),
          lineno=48),
        If(
          Compare(
            Name(
              'placeholder_8',
              Load(),
              lineno=50,
              col_offset=7,
              end_lineno=50,
              end_col_offset=17),
            [
              GtE()],
            [
              Constant(
                80,
                lineno=50,
                col_offset=21,
                end_lineno=50,
                end_col_offset=23)],
            lineno=50,
            col_offset=7,
            end_lineno=50,
            end_col_offset=23),
          [
            Return(
              Constant(
                'green',
                lineno=51,
                col_offset=15,
                end_lineno=51,
                end_col_offset=22),
              lineno=51,
              col_offset=8,
              end_lineno=51,
              end_col_offset=22)],
          [],
          lineno=50,
          col_offset=4,
          end_lineno=51,
          end_col_offset=22),
        If(
          Compare(
            Name(
              'placeholder_8',
              Load(),
              lineno=52,
              col_offset=7,
              end_lineno=52,
              end_col_offset=17),
            [
              GtE()],
            [
              Constant(
                60,
                lineno=52,
                col_offset=21,
                end_lineno=52,
                end_col_offset=23)],
            lineno=52,
            col_offset=7,
            end_lineno=52,
            end_col_offset=23),
          [
            Return(
              Constant(
                'orange',
                lineno=53,
                col_offset=15,
                end_lineno=53,
                end_col_offset=23),
              lineno=53,
              col_offset=8,
              end_lineno=53,
              end_col_offset=23)],
          [],
          lineno=52,
          col_offset=4,
          end_lineno=53,
          end_col_offset=23),
        If(
          Compare(
            Name(
              'placeholder_8',
              Load(),
              lineno=54,
              col_offset=7,
              end_lineno=54,
              end_col_offset=17),
            [
              GtE()],
            [
              Constant(
                30,
                lineno=54,
                col_offset=21,
                end_lineno=54,
                end_col_offset=23)],
            lineno=54,
            col_offset=7,
            end_lineno=54,
            end_col_offset=23),
          [
            Return(
              Constant(
                'red',
                lineno=56,
                col_offset=15,
                end_lineno=56,
                end_col_offset=20),
              lineno=56,
              col_offset=8,
              end_lineno=56,
              end_col_offset=20)],
          [],
          lineno=54,
          col_offset=4,
          end_lineno=56,
          end_col_offset=20),
        Return(
          Constant(
            'black',
            lineno=57,
            col_offset=11,
            end_lineno=57,
            end_col_offset=18),
          lineno=57,
          col_offset=4,
          end_lineno=57,
          end_col_offset=18)],
      [],
      lineno=23,
      col_offset=0,
      end_lineno=57,
      end_col_offset=18),
    FunctionDef(
      'placeholder_9',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=61,
            col_offset=8,
            end_lineno=61,
            end_col_offset=32),
          arg(
            'placeholder_10',
            lineno=62,
            col_offset=8,
            end_lineno=62,
            end_col_offset=49),
          arg(
            'placeholder_11',
            lineno=63,
            col_offset=8,
            end_lineno=63,
            end_col_offset=30)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'placeholder_12',
              Store(),
              lineno=76,
              col_offset=4,
              end_lineno=76,
              end_col_offset=15)],
          BinOp(
            Name(
              'placeholder_1',
              Load(),
              lineno=76,
              col_offset=32,
              end_lineno=76,
              end_col_offset=43),
            Mult(),
            Name(
              'placeholder_10',
              Load(),
              lineno=76,
              col_offset=46,
              end_lineno=76,
              end_col_offset=74),
            lineno=76,
            col_offset=32,
            end_lineno=76,
            end_col_offset=74),
          lineno=76),
        Match(
          Name(
            'placeholder_12',
            Load(),
            lineno=78,
            col_offset=10,
            end_lineno=78,
            end_col_offset=21),
          [
            match_case(
              MatchAs(
                name='n',
                lineno=79,
                col_offset=13,
                end_lineno=79,
                end_col_offset=14),
              Compare(
                Name(
                  'n',
                  Load(),
                  lineno=79,
                  col_offset=18,
                  end_lineno=79,
                  end_col_offset=19),
                [
                  Lt()],
                [
                  BinOp(
                    Name(
                      'placeholder_11',
                      Load(),
                      lineno=79,
                      col_offset=22,
                      end_lineno=79,
                      end_col_offset=31),
                    Mult(),
                    Constant(
                      0.9,
                      lineno=79,
                      col_offset=34,
                      end_lineno=79,
                      end_col_offset=37),
                    lineno=79,
                    col_offset=22,
                    end_lineno=79,
                    end_col_offset=37)],
                lineno=79,
                col_offset=18,
                end_lineno=79,
                end_col_offset=37),
              [
                Return(
                  Constant(
                    'LOW',
                    lineno=80,
                    col_offset=19,
                    end_lineno=80,
                    end_col_offset=24),
                  lineno=80,
                  col_offset=12,
                  end_lineno=80,
                  end_col_offset=24)]),
            match_case(
              MatchAs(
                name='n',
                lineno=81,
                col_offset=13,
                end_lineno=81,
                end_col_offset=14),
              Compare(
                Name(
                  'n',
                  Load(),
                  lineno=81,
                  col_offset=18,
                  end_lineno=81,
                  end_col_offset=19),
                [
                  Gt()],
                [
                  BinOp(
                    Name(
                      'placeholder_11',
                      Load(),
                      lineno=81,
                      col_offset=22,
                      end_lineno=81,
                      end_col_offset=31),
                    Mult(),
                    Constant(
                      1.1,
                      lineno=81,
                      col_offset=34,
                      end_lineno=81,
                      end_col_offset=37),
                    lineno=81,
                    col_offset=22,
                    end_lineno=81,
                    end_col_offset=37)],
                lineno=81,
                col_offset=18,
                end_lineno=81,
                end_col_offset=37),
              [
                Return(
                  Constant(
                    'DANGER',
                    lineno=82,
                    col_offset=19,
                    end_lineno=82,
                    end_col_offset=27),
                  lineno=82,
                  col_offset=12,
                  end_lineno=82,
                  end_col_offset=27)]),
            match_case(
              MatchAs(
                lineno=83,
                col_offset=13,
                end_lineno=83,
                end_col_offset=14),
              body=[
                Return(
                  Constant(
                    'NORMAL',
                    lineno=84,
                    col_offset=19,
                    end_lineno=84,
                    end_col_offset=27),
                  lineno=84,
                  col_offset=12,
                  end_lineno=84,
                  end_col_offset=27)])],
          lineno=78,
          col_offset=4,
          end_lineno=84,
          end_col_offset=27)],
      [],
      lineno=60,
      col_offset=0,
      end_lineno=84,
      end_col_offset=27)],
  [])

# BEGIN NORMALIZED CODE AFTER
def placeholder_0(placeholder_1, placeholder_2):
    return (
        placeholder_1 < 800
        and placeholder_2 > 500
        and (placeholder_1 * placeholder_2 < 500000)
    )


def placeholder_3(placeholder_4, placeholder_5, placeholder_6):
    placeholder_7 = placeholder_4 * placeholder_5
    placeholder_8 = placeholder_7 / placeholder_6 * 100
    if placeholder_8 >= 80:
        return "green"
    if placeholder_8 >= 60:
        return "orange"
    if placeholder_8 >= 30:
        return "red"
    return "black"


def placeholder_9(placeholder_1, placeholder_10, placeholder_11):
    placeholder_12 = placeholder_1 * placeholder_10
    match placeholder_12:
        case n if n < placeholder_11 * 0.9:
            return "LOW"
        case n if n > placeholder_11 * 1.1:
            return "DANGER"
        case _:
            return "NORMAL"
