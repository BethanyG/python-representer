# BEGIN TREE BEFORE
Module(
  [
    Expr(
      Constant(
        'Functions to help edit essay homework using string manipulation.',
        lineno=1,
        col_offset=0,
        end_lineno=1,
        end_col_offset=70),
      lineno=1,
      col_offset=0,
      end_lineno=1,
      end_col_offset=70),
    FunctionDef(
      'capitalize_title',
      arguments(
        [],
        [
          arg(
            'essay_title',
            lineno=4,
            col_offset=21,
            end_lineno=4,
            end_col_offset=32)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Convert the first letter of each word in the title to uppercase if needed.\n\n    :param title: str - title string that needs title casing.\n    :return: str - title string in title case (first letters capitalized).\n    ',
            lineno=5,
            col_offset=4,
            end_lineno=9,
            end_col_offset=7),
          lineno=5,
          col_offset=4,
          end_lineno=9,
          end_col_offset=7),
        Return(
          Call(
            Attribute(
              Name(
                'essay_title',
                Load(),
                lineno=11,
                col_offset=11,
                end_lineno=11,
                end_col_offset=22),
              'title',
              Load(),
              lineno=11,
              col_offset=11,
              end_lineno=11,
              end_col_offset=28),
            [],
            [],
            lineno=11,
            col_offset=11,
            end_lineno=11,
            end_col_offset=30),
          lineno=11,
          col_offset=4,
          end_lineno=11,
          end_col_offset=30)],
      [],
      lineno=4,
      col_offset=0,
      end_lineno=11,
      end_col_offset=30),
    FunctionDef(
      'check_sentence_ending',
      arguments(
        [],
        [
          arg(
            'sentence',
            lineno=14,
            col_offset=26,
            end_lineno=14,
            end_col_offset=34)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Check the ending of the sentence to verify that a period is present.\n\n    :param sentence: str - a sentence to check.\n    :return: bool - is the sentence punctuated correctly?\n    ',
            lineno=15,
            col_offset=4,
            end_lineno=19,
            end_col_offset=7),
          lineno=15,
          col_offset=4,
          end_lineno=19,
          end_col_offset=7),
        Return(
          Call(
            Attribute(
              Name(
                'sentence',
                Load(),
                lineno=21,
                col_offset=11,
                end_lineno=21,
                end_col_offset=19),
              'endswith',
              Load(),
              lineno=21,
              col_offset=11,
              end_lineno=21,
              end_col_offset=28),
            [
              Constant(
                '.',
                lineno=21,
                col_offset=29,
                end_lineno=21,
                end_col_offset=32)],
            [],
            lineno=21,
            col_offset=11,
            end_lineno=21,
            end_col_offset=33),
          lineno=21,
          col_offset=4,
          end_lineno=21,
          end_col_offset=33)],
      [],
      lineno=14,
      col_offset=0,
      end_lineno=21,
      end_col_offset=33),
    FunctionDef(
      'clean_up_spacing',
      arguments(
        [],
        [
          arg(
            'sentence',
            lineno=24,
            col_offset=21,
            end_lineno=24,
            end_col_offset=29)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Trim any leading or trailing whitespace from the sentence.\n\n    :param sentence: str - a sentence to clean of leading and trailing space characters.\n    :return: str - a sentence that has been cleaned of leading and trailing space characters.\n    ',
            lineno=25,
            col_offset=4,
            end_lineno=29,
            end_col_offset=7),
          lineno=25,
          col_offset=4,
          end_lineno=29,
          end_col_offset=7),
        Assign(
          [
            Name(
              'clean_sentence',
              Store(),
              lineno=31,
              col_offset=4,
              end_lineno=31,
              end_col_offset=18)],
          Call(
            Attribute(
              Name(
                'sentence',
                Load(),
                lineno=31,
                col_offset=21,
                end_lineno=31,
                end_col_offset=29),
              'strip',
              Load(),
              lineno=31,
              col_offset=21,
              end_lineno=31,
              end_col_offset=35),
            [],
            [],
            lineno=31,
            col_offset=21,
            end_lineno=31,
            end_col_offset=37),
          lineno=31,
          col_offset=4,
          end_lineno=31,
          end_col_offset=37),
        Return(
          Name(
            'clean_sentence',
            Load(),
            lineno=32,
            col_offset=11,
            end_lineno=32,
            end_col_offset=25),
          lineno=32,
          col_offset=4,
          end_lineno=32,
          end_col_offset=25)],
      [],
      lineno=24,
      col_offset=0,
      end_lineno=32,
      end_col_offset=25),
    FunctionDef(
      'replace_word_choice',
      arguments(
        [],
        [
          arg(
            'sentence',
            lineno=35,
            col_offset=24,
            end_lineno=35,
            end_col_offset=32),
          arg(
            'old_word',
            lineno=35,
            col_offset=34,
            end_lineno=35,
            end_col_offset=42),
          arg(
            'new_word',
            lineno=35,
            col_offset=44,
            end_lineno=35,
            end_col_offset=52)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Replace a word in the provided sentence with a new one.\n\n    :param sentence: str - a sentence to replace words in.\n    :param old_word: str - word to replace.\n    :param new_word: str - replacement word.\n    :return: str - input sentence with new words in place of old words.\n    ',
            lineno=36,
            col_offset=4,
            end_lineno=42,
            end_col_offset=7),
          lineno=36,
          col_offset=4,
          end_lineno=42,
          end_col_offset=7),
        Assign(
          [
            Name(
              'better_sentence',
              Store(),
              lineno=44,
              col_offset=4,
              end_lineno=44,
              end_col_offset=19)],
          Call(
            Attribute(
              Name(
                'sentence',
                Load(),
                lineno=44,
                col_offset=22,
                end_lineno=44,
                end_col_offset=30),
              'replace',
              Load(),
              lineno=44,
              col_offset=22,
              end_lineno=44,
              end_col_offset=38),
            [
              Name(
                'old_word',
                Load(),
                lineno=44,
                col_offset=39,
                end_lineno=44,
                end_col_offset=47),
              Name(
                'new_word',
                Load(),
                lineno=44,
                col_offset=49,
                end_lineno=44,
                end_col_offset=57)],
            [],
            lineno=44,
            col_offset=22,
            end_lineno=44,
            end_col_offset=58),
          lineno=44,
          col_offset=4,
          end_lineno=44,
          end_col_offset=58),
        Return(
          Name(
            'better_sentence',
            Load(),
            lineno=45,
            col_offset=11,
            end_lineno=45,
            end_col_offset=26),
          lineno=45,
          col_offset=4,
          end_lineno=45,
          end_col_offset=26)],
      [],
      lineno=35,
      col_offset=0,
      end_lineno=45,
      end_col_offset=26)],
  [])

# BEGIN TREE AFTER
Module(
  [
    FunctionDef(
      'placeholder_0',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=4,
            col_offset=21,
            end_lineno=4,
            end_col_offset=32)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          Call(
            Attribute(
              Name(
                'placeholder_1',
                Load(),
                lineno=11,
                col_offset=11,
                end_lineno=11,
                end_col_offset=22),
              'title',
              Load(),
              lineno=11,
              col_offset=11,
              end_lineno=11,
              end_col_offset=28),
            [],
            [],
            lineno=11,
            col_offset=11,
            end_lineno=11,
            end_col_offset=30),
          lineno=11,
          col_offset=4,
          end_lineno=11,
          end_col_offset=30)],
      [],
      lineno=4,
      col_offset=0,
      end_lineno=11,
      end_col_offset=30),
    FunctionDef(
      'placeholder_2',
      arguments(
        [],
        [
          arg(
            'placeholder_3',
            lineno=14,
            col_offset=26,
            end_lineno=14,
            end_col_offset=34)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          Call(
            Attribute(
              Name(
                'placeholder_3',
                Load(),
                lineno=21,
                col_offset=11,
                end_lineno=21,
                end_col_offset=19),
              'endswith',
              Load(),
              lineno=21,
              col_offset=11,
              end_lineno=21,
              end_col_offset=28),
            [
              Constant(
                '.',
                lineno=21,
                col_offset=29,
                end_lineno=21,
                end_col_offset=32)],
            [],
            lineno=21,
            col_offset=11,
            end_lineno=21,
            end_col_offset=33),
          lineno=21,
          col_offset=4,
          end_lineno=21,
          end_col_offset=33)],
      [],
      lineno=14,
      col_offset=0,
      end_lineno=21,
      end_col_offset=33),
    FunctionDef(
      'placeholder_4',
      arguments(
        [],
        [
          arg(
            'placeholder_3',
            lineno=24,
            col_offset=21,
            end_lineno=24,
            end_col_offset=29)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'placeholder_5',
              Store(),
              lineno=31,
              col_offset=4,
              end_lineno=31,
              end_col_offset=18)],
          Call(
            Attribute(
              Name(
                'placeholder_3',
                Load(),
                lineno=31,
                col_offset=21,
                end_lineno=31,
                end_col_offset=29),
              'strip',
              Load(),
              lineno=31,
              col_offset=21,
              end_lineno=31,
              end_col_offset=35),
            [],
            [],
            lineno=31,
            col_offset=21,
            end_lineno=31,
            end_col_offset=37),
          lineno=31,
          col_offset=4,
          end_lineno=31,
          end_col_offset=37),
        Return(
          Name(
            'placeholder_5',
            Load(),
            lineno=32,
            col_offset=11,
            end_lineno=32,
            end_col_offset=25),
          lineno=32,
          col_offset=4,
          end_lineno=32,
          end_col_offset=25)],
      [],
      lineno=24,
      col_offset=0,
      end_lineno=32,
      end_col_offset=25),
    FunctionDef(
      'placeholder_6',
      arguments(
        [],
        [
          arg(
            'placeholder_3',
            lineno=35,
            col_offset=24,
            end_lineno=35,
            end_col_offset=32),
          arg(
            'placeholder_7',
            lineno=35,
            col_offset=34,
            end_lineno=35,
            end_col_offset=42),
          arg(
            'placeholder_8',
            lineno=35,
            col_offset=44,
            end_lineno=35,
            end_col_offset=52)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'placeholder_9',
              Store(),
              lineno=44,
              col_offset=4,
              end_lineno=44,
              end_col_offset=19)],
          Call(
            Attribute(
              Name(
                'placeholder_3',
                Load(),
                lineno=44,
                col_offset=22,
                end_lineno=44,
                end_col_offset=30),
              'replace',
              Load(),
              lineno=44,
              col_offset=22,
              end_lineno=44,
              end_col_offset=38),
            [
              Name(
                'placeholder_7',
                Load(),
                lineno=44,
                col_offset=39,
                end_lineno=44,
                end_col_offset=47),
              Name(
                'placeholder_8',
                Load(),
                lineno=44,
                col_offset=49,
                end_lineno=44,
                end_col_offset=57)],
            [],
            lineno=44,
            col_offset=22,
            end_lineno=44,
            end_col_offset=58),
          lineno=44,
          col_offset=4,
          end_lineno=44,
          end_col_offset=58),
        Return(
          Name(
            'placeholder_9',
            Load(),
            lineno=45,
            col_offset=11,
            end_lineno=45,
            end_col_offset=26),
          lineno=45,
          col_offset=4,
          end_lineno=45,
          end_col_offset=26)],
      [],
      lineno=35,
      col_offset=0,
      end_lineno=45,
      end_col_offset=26)],
  [])

# BEGIN NORMALIZED CODE AFTER
def placeholder_0(placeholder_1):
    return placeholder_1.title()


def placeholder_2(placeholder_3):
    return placeholder_3.endswith(".")


def placeholder_4(placeholder_3):
    placeholder_5 = placeholder_3.strip()
    return placeholder_5


def placeholder_6(placeholder_3, placeholder_7, placeholder_8):
    placeholder_9 = placeholder_3.replace(placeholder_7, placeholder_8)
    return placeholder_9
