# BEGIN TREE BEFORE
Module(
  [
    Expr(
      Constant(
        ' This module helps little sister with her vocabulary homework.\n\n    And this is a multi-line module level docstring. It should be\n    removed when the representation is processed.\n ',
        lineno=1,
        col_offset=0,
        end_lineno=5,
        end_col_offset=4),
      lineno=1,
      col_offset=0,
      end_lineno=5,
      end_col_offset=4),
    FunctionDef(
      'add_prefix_un',
      arguments(
        [],
        [
          arg(
            'word',
            lineno=8,
            col_offset=18,
            end_lineno=8,
            end_col_offset=22)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            "\n\n    :param word: str of a root word\n    :return:  str of root word with un prefix\n\n    This function takes `word` as a parameter and\n    returns a new word with an 'un' prefix.\n    ",
            lineno=9,
            col_offset=4,
            end_lineno=16,
            end_col_offset=7),
          lineno=9,
          col_offset=4,
          end_lineno=16,
          end_col_offset=7),
        Return(
          BinOp(
            Constant(
              'un',
              lineno=17,
              col_offset=11,
              end_lineno=17,
              end_col_offset=15),
            Add(),
            Name(
              'word',
              Load(),
              lineno=17,
              col_offset=18,
              end_lineno=17,
              end_col_offset=22),
            lineno=17,
            col_offset=11,
            end_lineno=17,
            end_col_offset=22),
          lineno=17,
          col_offset=4,
          end_lineno=17,
          end_col_offset=22)],
      [],
      lineno=8,
      col_offset=0,
      end_lineno=17,
      end_col_offset=22),
    FunctionDef(
      'make_word_groups',
      arguments(
        [],
        [
          arg(
            'vocab_words',
            lineno=20,
            col_offset=21,
            end_lineno=20,
            end_col_offset=32)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            "\n\n    :param vocab_words: list of vocabulary words with a prefix.\n    :return: str of prefix followed by vocabulary words with\n             prefix applied, separated by ' :: '.\n\n    This function takes a `vocab_words` list and returns a string\n    with the prefix  and the words with prefix applied, separated\n     by ' :: '.\n    ",
            lineno=21,
            col_offset=4,
            end_lineno=30,
            end_col_offset=7),
          lineno=21,
          col_offset=4,
          end_lineno=30,
          end_col_offset=7),
        Assign(
          [
            Name(
              'multi_line_string',
              Store(),
              lineno=32,
              col_offset=4,
              end_lineno=32,
              end_col_offset=21)],
          Constant(
            'This is a multi-line string.\n    This should NOT get cleaned as a docstring, but retained, because it is assigned\n    a name, and is therefore a plain string, and not a docstring.',
            lineno=32,
            col_offset=24,
            end_lineno=34,
            end_col_offset=68),
          lineno=32,
          col_offset=4,
          end_lineno=34,
          end_col_offset=68),
        Return(
          Call(
            Attribute(
              BinOp(
                Constant(
                  ' :: ',
                  lineno=36,
                  col_offset=12,
                  end_lineno=36,
                  end_col_offset=18),
                Add(),
                Subscript(
                  Name(
                    'vocab_words',
                    Load(),
                    lineno=36,
                    col_offset=21,
                    end_lineno=36,
                    end_col_offset=32),
                  Constant(
                    0,
                    lineno=36,
                    col_offset=33,
                    end_lineno=36,
                    end_col_offset=34),
                  Load(),
                  lineno=36,
                  col_offset=21,
                  end_lineno=36,
                  end_col_offset=35),
                lineno=36,
                col_offset=12,
                end_lineno=36,
                end_col_offset=35),
              'join',
              Load(),
              lineno=36,
              col_offset=11,
              end_lineno=36,
              end_col_offset=41),
            [
              Name(
                'vocab_words',
                Load(),
                lineno=36,
                col_offset=42,
                end_lineno=36,
                end_col_offset=53)],
            [],
            lineno=36,
            col_offset=11,
            end_lineno=36,
            end_col_offset=54),
          lineno=36,
          col_offset=4,
          end_lineno=36,
          end_col_offset=54)],
      [],
      lineno=20,
      col_offset=0,
      end_lineno=36,
      end_col_offset=54),
    FunctionDef(
      'remove_suffix_ness',
      arguments(
        [],
        [
          arg(
            'word',
            lineno=39,
            col_offset=23,
            end_lineno=39,
            end_col_offset=27)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            '\n\n    :param word: str of word to remove suffix from.\n    :return: str of word with suffix removed & spelling adjusted.\n\n    This function takes in a word and returns the base word with `ness` removed.\n    ',
            lineno=40,
            col_offset=4,
            end_lineno=46,
            end_col_offset=7),
          lineno=40,
          col_offset=4,
          end_lineno=46,
          end_col_offset=7),
        Assign(
          [
            Name(
              'MULTI_LINE_CONSTANT',
              Store(),
              lineno=48,
              col_offset=4,
              end_lineno=48,
              end_col_offset=23)],
          Constant(
            'This is a multi-line string constant.\n       This should NOT get cleaned as a docstring, but retained, because it is assigned\n       a name, and is therefore a plain string, and not a docstring.',
            lineno=48,
            col_offset=26,
            end_lineno=50,
            end_col_offset=71),
          lineno=48,
          col_offset=4,
          end_lineno=50,
          end_col_offset=71),
        Return(
          IfExp(
            Compare(
              Subscript(
                Name(
                  'word',
                  Load(),
                  lineno=52,
                  col_offset=24,
                  end_lineno=52,
                  end_col_offset=28),
                UnaryOp(
                  USub(),
                  Constant(
                    5,
                    lineno=52,
                    col_offset=30,
                    end_lineno=52,
                    end_col_offset=31),
                  lineno=52,
                  col_offset=29,
                  end_lineno=52,
                  end_col_offset=31),
                Load(),
                lineno=52,
                col_offset=24,
                end_lineno=52,
                end_col_offset=32),
              [
                NotEq()],
              [
                Constant(
                  'i',
                  lineno=52,
                  col_offset=36,
                  end_lineno=52,
                  end_col_offset=39)],
              lineno=52,
              col_offset=24,
              end_lineno=52,
              end_col_offset=39),
            Subscript(
              Name(
                'word',
                Load(),
                lineno=52,
                col_offset=11,
                end_lineno=52,
                end_col_offset=15),
              Slice(
                upper=UnaryOp(
                  USub(),
                  Constant(
                    4,
                    lineno=52,
                    col_offset=18,
                    end_lineno=52,
                    end_col_offset=19),
                  lineno=52,
                  col_offset=17,
                  end_lineno=52,
                  end_col_offset=19),
                lineno=52,
                col_offset=16,
                end_lineno=52,
                end_col_offset=19),
              Load(),
              lineno=52,
              col_offset=11,
              end_lineno=52,
              end_col_offset=20),
            BinOp(
              Subscript(
                Name(
                  'word',
                  Load(),
                  lineno=52,
                  col_offset=45,
                  end_lineno=52,
                  end_col_offset=49),
                Slice(
                  upper=UnaryOp(
                    USub(),
                    Constant(
                      5,
                      lineno=52,
                      col_offset=52,
                      end_lineno=52,
                      end_col_offset=53),
                    lineno=52,
                    col_offset=51,
                    end_lineno=52,
                    end_col_offset=53),
                  lineno=52,
                  col_offset=50,
                  end_lineno=52,
                  end_col_offset=53),
                Load(),
                lineno=52,
                col_offset=45,
                end_lineno=52,
                end_col_offset=54),
              Add(),
              Constant(
                'y',
                lineno=52,
                col_offset=57,
                end_lineno=52,
                end_col_offset=60),
              lineno=52,
              col_offset=45,
              end_lineno=52,
              end_col_offset=60),
            lineno=52,
            col_offset=11,
            end_lineno=52,
            end_col_offset=60),
          lineno=52,
          col_offset=4,
          end_lineno=52,
          end_col_offset=60)],
      [],
      lineno=39,
      col_offset=0,
      end_lineno=52,
      end_col_offset=60),
    FunctionDef(
      'adjective_to_verb',
      arguments(
        [],
        [
          arg(
            'sentence',
            lineno=55,
            col_offset=22,
            end_lineno=55,
            end_col_offset=30),
          arg(
            'index',
            lineno=55,
            col_offset=32,
            end_lineno=55,
            end_col_offset=37)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            '\n\n    :param sentence: str that uses the word in sentence\n    :param index:  index of the word to remove and transform\n    :return:  str word that changes the extracted adjective to a verb.\n\n    A function takes a `sentence` using the\n    vocabulary word, and the `index` of the word once that sentence\n    is split apart.  The function should return the extracted\n    adjective as a verb.\n    ',
            lineno=56,
            col_offset=4,
            end_lineno=66,
            end_col_offset=7),
          lineno=56,
          col_offset=4,
          end_lineno=66,
          end_col_offset=7),
        Return(
          BinOp(
            Call(
              Attribute(
                Subscript(
                  Call(
                    Attribute(
                      Name(
                        'sentence',
                        Load(),
                        lineno=67,
                        col_offset=11,
                        end_lineno=67,
                        end_col_offset=19),
                      'split',
                      Load(),
                      lineno=67,
                      col_offset=11,
                      end_lineno=67,
                      end_col_offset=25),
                    [],
                    [],
                    lineno=67,
                    col_offset=11,
                    end_lineno=67,
                    end_col_offset=27),
                  Name(
                    'index',
                    Load(),
                    lineno=67,
                    col_offset=28,
                    end_lineno=67,
                    end_col_offset=33),
                  Load(),
                  lineno=67,
                  col_offset=11,
                  end_lineno=67,
                  end_col_offset=34),
                'strip',
                Load(),
                lineno=67,
                col_offset=11,
                end_lineno=67,
                end_col_offset=40),
              [
                Constant(
                  '.',
                  lineno=67,
                  col_offset=41,
                  end_lineno=67,
                  end_col_offset=44)],
              [],
              lineno=67,
              col_offset=11,
              end_lineno=67,
              end_col_offset=45),
            Add(),
            Constant(
              'en',
              lineno=67,
              col_offset=48,
              end_lineno=67,
              end_col_offset=52),
            lineno=67,
            col_offset=11,
            end_lineno=67,
            end_col_offset=52),
          lineno=67,
          col_offset=4,
          end_lineno=67,
          end_col_offset=52)],
      [],
      lineno=55,
      col_offset=0,
      end_lineno=67,
      end_col_offset=52)],
  [])

# BEGIN TREE AFTER
Module(
  [
    FunctionDef(
      'placeholder_0',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=8,
            col_offset=18,
            end_lineno=8,
            end_col_offset=22)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BinOp(
            Constant(
              'un',
              lineno=17,
              col_offset=11,
              end_lineno=17,
              end_col_offset=15),
            Add(),
            Name(
              'placeholder_1',
              Load(),
              lineno=17,
              col_offset=18,
              end_lineno=17,
              end_col_offset=22),
            lineno=17,
            col_offset=11,
            end_lineno=17,
            end_col_offset=22),
          lineno=17,
          col_offset=4,
          end_lineno=17,
          end_col_offset=22)],
      [],
      lineno=8,
      col_offset=0,
      end_lineno=17,
      end_col_offset=22),
    FunctionDef(
      'placeholder_2',
      arguments(
        [],
        [
          arg(
            'placeholder_3',
            lineno=20,
            col_offset=21,
            end_lineno=20,
            end_col_offset=32)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'placeholder_4',
              Store(),
              lineno=32,
              col_offset=4,
              end_lineno=32,
              end_col_offset=21)],
          Constant(
            'This is a multi-line string.\n    This should NOT get cleaned as a docstring, but retained, because it is assigned\n    a name, and is therefore a plain string, and not a docstring.',
            lineno=32,
            col_offset=24,
            end_lineno=34,
            end_col_offset=68),
          lineno=32,
          col_offset=4,
          end_lineno=34,
          end_col_offset=68),
        Return(
          Call(
            Attribute(
              BinOp(
                Constant(
                  ' :: ',
                  lineno=36,
                  col_offset=12,
                  end_lineno=36,
                  end_col_offset=18),
                Add(),
                Subscript(
                  Name(
                    'placeholder_3',
                    Load(),
                    lineno=36,
                    col_offset=21,
                    end_lineno=36,
                    end_col_offset=32),
                  Constant(
                    0,
                    lineno=36,
                    col_offset=33,
                    end_lineno=36,
                    end_col_offset=34),
                  Load(),
                  lineno=36,
                  col_offset=21,
                  end_lineno=36,
                  end_col_offset=35),
                lineno=36,
                col_offset=12,
                end_lineno=36,
                end_col_offset=35),
              'join',
              Load(),
              lineno=36,
              col_offset=11,
              end_lineno=36,
              end_col_offset=41),
            [
              Name(
                'placeholder_3',
                Load(),
                lineno=36,
                col_offset=42,
                end_lineno=36,
                end_col_offset=53)],
            [],
            lineno=36,
            col_offset=11,
            end_lineno=36,
            end_col_offset=54),
          lineno=36,
          col_offset=4,
          end_lineno=36,
          end_col_offset=54)],
      [],
      lineno=20,
      col_offset=0,
      end_lineno=36,
      end_col_offset=54),
    FunctionDef(
      'placeholder_5',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=39,
            col_offset=23,
            end_lineno=39,
            end_col_offset=27)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'placeholder_6',
              Store(),
              lineno=48,
              col_offset=4,
              end_lineno=48,
              end_col_offset=23)],
          Constant(
            'This is a multi-line string constant.\n       This should NOT get cleaned as a docstring, but retained, because it is assigned\n       a name, and is therefore a plain string, and not a docstring.',
            lineno=48,
            col_offset=26,
            end_lineno=50,
            end_col_offset=71),
          lineno=48,
          col_offset=4,
          end_lineno=50,
          end_col_offset=71),
        Return(
          IfExp(
            Compare(
              Subscript(
                Name(
                  'placeholder_1',
                  Load(),
                  lineno=52,
                  col_offset=24,
                  end_lineno=52,
                  end_col_offset=28),
                UnaryOp(
                  USub(),
                  Constant(
                    5,
                    lineno=52,
                    col_offset=30,
                    end_lineno=52,
                    end_col_offset=31),
                  lineno=52,
                  col_offset=29,
                  end_lineno=52,
                  end_col_offset=31),
                Load(),
                lineno=52,
                col_offset=24,
                end_lineno=52,
                end_col_offset=32),
              [
                NotEq()],
              [
                Constant(
                  'i',
                  lineno=52,
                  col_offset=36,
                  end_lineno=52,
                  end_col_offset=39)],
              lineno=52,
              col_offset=24,
              end_lineno=52,
              end_col_offset=39),
            Subscript(
              Name(
                'placeholder_1',
                Load(),
                lineno=52,
                col_offset=11,
                end_lineno=52,
                end_col_offset=15),
              Slice(
                upper=UnaryOp(
                  USub(),
                  Constant(
                    4,
                    lineno=52,
                    col_offset=18,
                    end_lineno=52,
                    end_col_offset=19),
                  lineno=52,
                  col_offset=17,
                  end_lineno=52,
                  end_col_offset=19),
                lineno=52,
                col_offset=16,
                end_lineno=52,
                end_col_offset=19),
              Load(),
              lineno=52,
              col_offset=11,
              end_lineno=52,
              end_col_offset=20),
            BinOp(
              Subscript(
                Name(
                  'placeholder_1',
                  Load(),
                  lineno=52,
                  col_offset=45,
                  end_lineno=52,
                  end_col_offset=49),
                Slice(
                  upper=UnaryOp(
                    USub(),
                    Constant(
                      5,
                      lineno=52,
                      col_offset=52,
                      end_lineno=52,
                      end_col_offset=53),
                    lineno=52,
                    col_offset=51,
                    end_lineno=52,
                    end_col_offset=53),
                  lineno=52,
                  col_offset=50,
                  end_lineno=52,
                  end_col_offset=53),
                Load(),
                lineno=52,
                col_offset=45,
                end_lineno=52,
                end_col_offset=54),
              Add(),
              Constant(
                'y',
                lineno=52,
                col_offset=57,
                end_lineno=52,
                end_col_offset=60),
              lineno=52,
              col_offset=45,
              end_lineno=52,
              end_col_offset=60),
            lineno=52,
            col_offset=11,
            end_lineno=52,
            end_col_offset=60),
          lineno=52,
          col_offset=4,
          end_lineno=52,
          end_col_offset=60)],
      [],
      lineno=39,
      col_offset=0,
      end_lineno=52,
      end_col_offset=60),
    FunctionDef(
      'placeholder_7',
      arguments(
        [],
        [
          arg(
            'placeholder_8',
            lineno=55,
            col_offset=22,
            end_lineno=55,
            end_col_offset=30),
          arg(
            'placeholder_9',
            lineno=55,
            col_offset=32,
            end_lineno=55,
            end_col_offset=37)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BinOp(
            Call(
              Attribute(
                Subscript(
                  Call(
                    Attribute(
                      Name(
                        'placeholder_8',
                        Load(),
                        lineno=67,
                        col_offset=11,
                        end_lineno=67,
                        end_col_offset=19),
                      'split',
                      Load(),
                      lineno=67,
                      col_offset=11,
                      end_lineno=67,
                      end_col_offset=25),
                    [],
                    [],
                    lineno=67,
                    col_offset=11,
                    end_lineno=67,
                    end_col_offset=27),
                  Name(
                    'placeholder_9',
                    Load(),
                    lineno=67,
                    col_offset=28,
                    end_lineno=67,
                    end_col_offset=33),
                  Load(),
                  lineno=67,
                  col_offset=11,
                  end_lineno=67,
                  end_col_offset=34),
                'strip',
                Load(),
                lineno=67,
                col_offset=11,
                end_lineno=67,
                end_col_offset=40),
              [
                Constant(
                  '.',
                  lineno=67,
                  col_offset=41,
                  end_lineno=67,
                  end_col_offset=44)],
              [],
              lineno=67,
              col_offset=11,
              end_lineno=67,
              end_col_offset=45),
            Add(),
            Constant(
              'en',
              lineno=67,
              col_offset=48,
              end_lineno=67,
              end_col_offset=52),
            lineno=67,
            col_offset=11,
            end_lineno=67,
            end_col_offset=52),
          lineno=67,
          col_offset=4,
          end_lineno=67,
          end_col_offset=52)],
      [],
      lineno=55,
      col_offset=0,
      end_lineno=67,
      end_col_offset=52)],
  [])

# BEGIN NORMALIZED CODE AFTER
def placeholder_0(placeholder_1):
    return "un" + placeholder_1


def placeholder_2(placeholder_3):
    placeholder_4 = "This is a multi-line string.\n    This should NOT get cleaned as a docstring, but retained, because it is assigned\n    a name, and is therefore a plain string, and not a docstring."
    return (" :: " + placeholder_3[0]).join(placeholder_3)


def placeholder_5(placeholder_1):
    placeholder_6 = "This is a multi-line string constant.\n       This should NOT get cleaned as a docstring, but retained, because it is assigned\n       a name, and is therefore a plain string, and not a docstring."
    return placeholder_1[:-4] if placeholder_1[-5] != "i" else placeholder_1[:-5] + "y"


def placeholder_7(placeholder_8, placeholder_9):
    return placeholder_8.split()[placeholder_9].strip(".") + "en"
