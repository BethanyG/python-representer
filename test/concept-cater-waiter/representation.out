## BEGIN NORMALIZED CODE ##
from sets_categories_data import (
    VEGAN,
    VEGETARIAN,
    KETO,
    PALEO,
    OMNIVORE,
    ALCOHOLS,
    SPECIAL_INGREDIENTS,
)


def placeholder_0(placeholder_1, placeholder_2):
    return (placeholder_1, set(placeholder_2))


def placeholder_3(placeholder_4, placeholder_5):
    if not ALCOHOLS.isdisjoint(placeholder_5):
        return placeholder_4 + " Cocktail"
    return placeholder_4 + " Mocktail"


def placeholder_6(placeholder_1, placeholder_2):
    placeholder_7 = (
        (VEGAN, "VEGAN"),
        (VEGETARIAN, "VEGETARIAN"),
        (KETO, "KETO"),
        (PALEO, "PALEO"),
        (OMNIVORE, "OMNIVORE"),
    )
    for placeholder_8 in placeholder_7:
        if set(placeholder_2) <= placeholder_8[0]:
            return placeholder_1 + ": " + placeholder_8[1]
    return None


def placeholder_9(placeholder_10):
    return (placeholder_10[0], SPECIAL_INGREDIENTS & set(placeholder_10[1]))


def placeholder_11(placeholder_12):
    placeholder_13 = set()
    for placeholder_14 in placeholder_12:
        placeholder_13 = placeholder_13.union(placeholder_14)
    return placeholder_13


def placeholder_15(placeholder_12, placeholder_16):
    return list(set(placeholder_12) - set(placeholder_16))


def placeholder_17(placeholder_12, placeholder_18):
    placeholder_19 = set()
    for placeholder_14 in placeholder_12:
        placeholder_19 = placeholder_19 ^ placeholder_14
    return placeholder_19 - placeholder_18

## END NORMALIZED CODE ##

## BEGIN TREE BEFORE ##
Module(
  [
    Expr(
      Constant(
        'Functions for compiling dishes and ingredients for a catering company.',
        lineno=1,
        col_offset=0,
        end_lineno=1,
        end_col_offset=76),
      lineno=1,
      col_offset=0,
      end_lineno=1,
      end_col_offset=76),
    ImportFrom(
      'sets_categories_data',
      [
        alias(
          'VEGAN',
          lineno=4,
          col_offset=34,
          end_lineno=4,
          end_col_offset=39),
        alias(
          'VEGETARIAN',
          lineno=5,
          col_offset=34,
          end_lineno=5,
          end_col_offset=44),
        alias(
          'KETO',
          lineno=6,
          col_offset=34,
          end_lineno=6,
          end_col_offset=38),
        alias(
          'PALEO',
          lineno=7,
          col_offset=34,
          end_lineno=7,
          end_col_offset=39),
        alias(
          'OMNIVORE',
          lineno=8,
          col_offset=34,
          end_lineno=8,
          end_col_offset=42),
        alias(
          'ALCOHOLS',
          lineno=9,
          col_offset=34,
          end_lineno=9,
          end_col_offset=42),
        alias(
          'SPECIAL_INGREDIENTS',
          lineno=10,
          col_offset=34,
          end_lineno=10,
          end_col_offset=53)],
      0,
      lineno=4,
      col_offset=0,
      end_lineno=10,
      end_col_offset=54),
    FunctionDef(
      'clean_ingredients',
      arguments(
        [],
        [
          arg(
            'dish_name',
            lineno=13,
            col_offset=22,
            end_lineno=13,
            end_col_offset=31),
          arg(
            'dish_ingredients',
            lineno=13,
            col_offset=33,
            end_lineno=13,
            end_col_offset=49)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Remove duplicates from `dish_ingredients`.\n\n    :param dish_name: str - containing the dish name.\n    :param dish_ingredients: list - dish ingredients.\n    :return: tuple - containing (dish_name, ingredient set).\n\n    This function should return a `tuple` with the name of the dish as the first item,\n    followed by the de-duped `set` of ingredients as the second item.\n    ',
            lineno=14,
            col_offset=4,
            end_lineno=22,
            end_col_offset=7),
          lineno=14,
          col_offset=4,
          end_lineno=22,
          end_col_offset=7),
        Return(
          Tuple(
            [
              Name(
                'dish_name',
                Load(),
                lineno=24,
                col_offset=11,
                end_lineno=24,
                end_col_offset=20),
              Call(
                Name(
                  'set',
                  Load(),
                  lineno=24,
                  col_offset=22,
                  end_lineno=24,
                  end_col_offset=25),
                [
                  Name(
                    'dish_ingredients',
                    Load(),
                    lineno=24,
                    col_offset=26,
                    end_lineno=24,
                    end_col_offset=42)],
                [],
                lineno=24,
                col_offset=22,
                end_lineno=24,
                end_col_offset=43)],
            Load(),
            lineno=24,
            col_offset=11,
            end_lineno=24,
            end_col_offset=43),
          lineno=24,
          col_offset=4,
          end_lineno=24,
          end_col_offset=43)],
      [],
      lineno=13,
      col_offset=0,
      end_lineno=24,
      end_col_offset=43),
    FunctionDef(
      'check_drinks',
      arguments(
        [],
        [
          arg(
            'drink_name',
            lineno=27,
            col_offset=17,
            end_lineno=27,
            end_col_offset=27),
          arg(
            'drink_ingredients',
            lineno=27,
            col_offset=29,
            end_lineno=27,
            end_col_offset=46)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Append "Cocktail" (alcohol)  or "Mocktail" (no alcohol) to `drink_name`, based on `drink_ingredients`.\n\n    :param drink_name: str - name of the drink.\n    :param drink_ingredients: list - ingredients in the drink.\n    :return: str - drink_name appended with "Mocktail" or "Cocktail".\n\n    The function should return the name of the drink followed by "Mocktail" (non-alcoholic) and drink\n    name followed by "Cocktail" (includes alcohol).\n    ',
            lineno=28,
            col_offset=4,
            end_lineno=36,
            end_col_offset=7),
          lineno=28,
          col_offset=4,
          end_lineno=36,
          end_col_offset=7),
        If(
          UnaryOp(
            Not(),
            Call(
              Attribute(
                Name(
                  'ALCOHOLS',
                  Load(),
                  lineno=38,
                  col_offset=11,
                  end_lineno=38,
                  end_col_offset=19),
                'isdisjoint',
                Load(),
                lineno=38,
                col_offset=11,
                end_lineno=38,
                end_col_offset=30),
              [
                Name(
                  'drink_ingredients',
                  Load(),
                  lineno=38,
                  col_offset=31,
                  end_lineno=38,
                  end_col_offset=48)],
              [],
              lineno=38,
              col_offset=11,
              end_lineno=38,
              end_col_offset=49),
            lineno=38,
            col_offset=7,
            end_lineno=38,
            end_col_offset=49),
          [
            Return(
              BinOp(
                Name(
                  'drink_name',
                  Load(),
                  lineno=39,
                  col_offset=15,
                  end_lineno=39,
                  end_col_offset=25),
                Add(),
                Constant(
                  ' Cocktail',
                  lineno=39,
                  col_offset=28,
                  end_lineno=39,
                  end_col_offset=39),
                lineno=39,
                col_offset=15,
                end_lineno=39,
                end_col_offset=39),
              lineno=39,
              col_offset=8,
              end_lineno=39,
              end_col_offset=39)],
          [],
          lineno=38,
          col_offset=4,
          end_lineno=39,
          end_col_offset=39),
        Return(
          BinOp(
            Name(
              'drink_name',
              Load(),
              lineno=41,
              col_offset=11,
              end_lineno=41,
              end_col_offset=21),
            Add(),
            Constant(
              ' Mocktail',
              lineno=41,
              col_offset=24,
              end_lineno=41,
              end_col_offset=35),
            lineno=41,
            col_offset=11,
            end_lineno=41,
            end_col_offset=35),
          lineno=41,
          col_offset=4,
          end_lineno=41,
          end_col_offset=35)],
      [],
      lineno=27,
      col_offset=0,
      end_lineno=41,
      end_col_offset=35),
    FunctionDef(
      'categorize_dish',
      arguments(
        [],
        [
          arg(
            'dish_name',
            lineno=44,
            col_offset=20,
            end_lineno=44,
            end_col_offset=29),
          arg(
            'dish_ingredients',
            lineno=44,
            col_offset=31,
            end_lineno=44,
            end_col_offset=47)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Categorize `dish_name` based on `dish_ingredients`.\n\n    :param dish_name: str - dish to be categorized.\n    :param dish_ingredients: list - ingredients for the dish.\n    :return: str - the dish name appended with ": <CATEGORY>".\n\n    This function should return a string with the `dish name: <CATEGORY>` (which meal category the dish belongs to).\n    `<CATEGORY>` can be any one of  (VEGAN, VEGETARIAN, PALEO, KETO, or OMNIVORE).\n    All dishes will "fit" into one of the categories imported from `sets_categories_data.py`\n\n    ',
            lineno=45,
            col_offset=4,
            end_lineno=55,
            end_col_offset=7),
          lineno=45,
          col_offset=4,
          end_lineno=55,
          end_col_offset=7),
        Assign(
          [
            Name(
              'categories',
              Store(),
              lineno=57,
              col_offset=4,
              end_lineno=57,
              end_col_offset=14)],
          Tuple(
            [
              Tuple(
                [
                  Name(
                    'VEGAN',
                    Load(),
                    lineno=57,
                    col_offset=19,
                    end_lineno=57,
                    end_col_offset=24),
                  Constant(
                    'VEGAN',
                    lineno=57,
                    col_offset=26,
                    end_lineno=57,
                    end_col_offset=33)],
                Load(),
                lineno=57,
                col_offset=18,
                end_lineno=57,
                end_col_offset=34),
              Tuple(
                [
                  Name(
                    'VEGETARIAN',
                    Load(),
                    lineno=58,
                    col_offset=19,
                    end_lineno=58,
                    end_col_offset=29),
                  Constant(
                    'VEGETARIAN',
                    lineno=58,
                    col_offset=31,
                    end_lineno=58,
                    end_col_offset=43)],
                Load(),
                lineno=58,
                col_offset=18,
                end_lineno=58,
                end_col_offset=44),
              Tuple(
                [
                  Name(
                    'KETO',
                    Load(),
                    lineno=59,
                    col_offset=19,
                    end_lineno=59,
                    end_col_offset=23),
                  Constant(
                    'KETO',
                    lineno=59,
                    col_offset=25,
                    end_lineno=59,
                    end_col_offset=31)],
                Load(),
                lineno=59,
                col_offset=18,
                end_lineno=59,
                end_col_offset=32),
              Tuple(
                [
                  Name(
                    'PALEO',
                    Load(),
                    lineno=60,
                    col_offset=19,
                    end_lineno=60,
                    end_col_offset=24),
                  Constant(
                    'PALEO',
                    lineno=60,
                    col_offset=26,
                    end_lineno=60,
                    end_col_offset=33)],
                Load(),
                lineno=60,
                col_offset=18,
                end_lineno=60,
                end_col_offset=34),
              Tuple(
                [
                  Name(
                    'OMNIVORE',
                    Load(),
                    lineno=61,
                    col_offset=19,
                    end_lineno=61,
                    end_col_offset=27),
                  Constant(
                    'OMNIVORE',
                    lineno=61,
                    col_offset=29,
                    end_lineno=61,
                    end_col_offset=39)],
                Load(),
                lineno=61,
                col_offset=18,
                end_lineno=61,
                end_col_offset=40)],
            Load(),
            lineno=57,
            col_offset=17,
            end_lineno=61,
            end_col_offset=41),
          lineno=57,
          col_offset=4,
          end_lineno=61,
          end_col_offset=41),
        For(
          Name(
            'category',
            Store(),
            lineno=63,
            col_offset=8,
            end_lineno=63,
            end_col_offset=16),
          Name(
            'categories',
            Load(),
            lineno=63,
            col_offset=20,
            end_lineno=63,
            end_col_offset=30),
          [
            If(
              Compare(
                Call(
                  Name(
                    'set',
                    Load(),
                    lineno=64,
                    col_offset=11,
                    end_lineno=64,
                    end_col_offset=14),
                  [
                    Name(
                      'dish_ingredients',
                      Load(),
                      lineno=64,
                      col_offset=15,
                      end_lineno=64,
                      end_col_offset=31)],
                  [],
                  lineno=64,
                  col_offset=11,
                  end_lineno=64,
                  end_col_offset=32),
                [
                  LtE()],
                [
                  Subscript(
                    Name(
                      'category',
                      Load(),
                      lineno=64,
                      col_offset=36,
                      end_lineno=64,
                      end_col_offset=44),
                    Constant(
                      0,
                      lineno=64,
                      col_offset=45,
                      end_lineno=64,
                      end_col_offset=46),
                    Load(),
                    lineno=64,
                    col_offset=36,
                    end_lineno=64,
                    end_col_offset=47)],
                lineno=64,
                col_offset=11,
                end_lineno=64,
                end_col_offset=47),
              [
                Return(
                  BinOp(
                    BinOp(
                      Name(
                        'dish_name',
                        Load(),
                        lineno=65,
                        col_offset=19,
                        end_lineno=65,
                        end_col_offset=28),
                      Add(),
                      Constant(
                        ': ',
                        lineno=65,
                        col_offset=31,
                        end_lineno=65,
                        end_col_offset=35),
                      lineno=65,
                      col_offset=19,
                      end_lineno=65,
                      end_col_offset=35),
                    Add(),
                    Subscript(
                      Name(
                        'category',
                        Load(),
                        lineno=65,
                        col_offset=38,
                        end_lineno=65,
                        end_col_offset=46),
                      Constant(
                        1,
                        lineno=65,
                        col_offset=47,
                        end_lineno=65,
                        end_col_offset=48),
                      Load(),
                      lineno=65,
                      col_offset=38,
                      end_lineno=65,
                      end_col_offset=49),
                    lineno=65,
                    col_offset=19,
                    end_lineno=65,
                    end_col_offset=49),
                  lineno=65,
                  col_offset=12,
                  end_lineno=65,
                  end_col_offset=49)],
              [],
              lineno=64,
              col_offset=8,
              end_lineno=65,
              end_col_offset=49)],
          [],
          lineno=63,
          col_offset=4,
          end_lineno=65,
          end_col_offset=49),
        Return(
          Constant(
            None,
            lineno=66,
            col_offset=11,
            end_lineno=66,
            end_col_offset=15),
          lineno=66,
          col_offset=4,
          end_lineno=66,
          end_col_offset=15)],
      [],
      lineno=44,
      col_offset=0,
      end_lineno=66,
      end_col_offset=15),
    FunctionDef(
      'tag_special_ingredients',
      arguments(
        [],
        [
          arg(
            'dish',
            lineno=69,
            col_offset=28,
            end_lineno=69,
            end_col_offset=32)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Compare `dish` ingredients to `SPECIAL_INGREDIENTS`.\n\n    :param dish: tuple - of (dish name, list of dish ingredients).\n    :return: tuple - containing (dish name, dish special ingredients).\n\n    Return the dish name followed by the `set` of ingredients that require a special note on the dish description.\n    For the purposes of this exercise, all allergens or special ingredients that need to be tracked are in the\n    SPECIAL_INGREDIENTS constant imported from `sets_categories_data.py`.\n    ',
            lineno=70,
            col_offset=4,
            end_lineno=78,
            end_col_offset=7),
          lineno=70,
          col_offset=4,
          end_lineno=78,
          end_col_offset=7),
        Return(
          Tuple(
            [
              Subscript(
                Name(
                  'dish',
                  Load(),
                  lineno=80,
                  col_offset=11,
                  end_lineno=80,
                  end_col_offset=15),
                Constant(
                  0,
                  lineno=80,
                  col_offset=16,
                  end_lineno=80,
                  end_col_offset=17),
                Load(),
                lineno=80,
                col_offset=11,
                end_lineno=80,
                end_col_offset=18),
              BinOp(
                Name(
                  'SPECIAL_INGREDIENTS',
                  Load(),
                  lineno=80,
                  col_offset=21,
                  end_lineno=80,
                  end_col_offset=40),
                BitAnd(),
                Call(
                  Name(
                    'set',
                    Load(),
                    lineno=80,
                    col_offset=43,
                    end_lineno=80,
                    end_col_offset=46),
                  [
                    Subscript(
                      Name(
                        'dish',
                        Load(),
                        lineno=80,
                        col_offset=47,
                        end_lineno=80,
                        end_col_offset=51),
                      Constant(
                        1,
                        lineno=80,
                        col_offset=52,
                        end_lineno=80,
                        end_col_offset=53),
                      Load(),
                      lineno=80,
                      col_offset=47,
                      end_lineno=80,
                      end_col_offset=54)],
                  [],
                  lineno=80,
                  col_offset=43,
                  end_lineno=80,
                  end_col_offset=55),
                lineno=80,
                col_offset=21,
                end_lineno=80,
                end_col_offset=55)],
            Load(),
            lineno=80,
            col_offset=11,
            end_lineno=80,
            end_col_offset=56),
          lineno=80,
          col_offset=4,
          end_lineno=80,
          end_col_offset=56)],
      [],
      lineno=69,
      col_offset=0,
      end_lineno=80,
      end_col_offset=56),
    FunctionDef(
      'compile_ingredients',
      arguments(
        [],
        [
          arg(
            'dishes',
            lineno=83,
            col_offset=24,
            end_lineno=83,
            end_col_offset=30)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Create a master list of ingredients.\n\n    :param dishes: list - of dish ingredient sets.\n    :return: set - of ingredients compiled from `dishes`.\n\n    This function should return a `set` of all ingredients from all listed dishes.\n    ',
            lineno=84,
            col_offset=4,
            end_lineno=90,
            end_col_offset=7),
          lineno=84,
          col_offset=4,
          end_lineno=90,
          end_col_offset=7),
        Assign(
          [
            Name(
              'combined_ingredients',
              Store(),
              lineno=92,
              col_offset=4,
              end_lineno=92,
              end_col_offset=24)],
          Call(
            Name(
              'set',
              Load(),
              lineno=92,
              col_offset=27,
              end_lineno=92,
              end_col_offset=30),
            [],
            [],
            lineno=92,
            col_offset=27,
            end_lineno=92,
            end_col_offset=32),
          lineno=92,
          col_offset=4,
          end_lineno=92,
          end_col_offset=32),
        For(
          Name(
            'ingredients',
            Store(),
            lineno=94,
            col_offset=8,
            end_lineno=94,
            end_col_offset=19),
          Name(
            'dishes',
            Load(),
            lineno=94,
            col_offset=23,
            end_lineno=94,
            end_col_offset=29),
          [
            Assign(
              [
                Name(
                  'combined_ingredients',
                  Store(),
                  lineno=95,
                  col_offset=8,
                  end_lineno=95,
                  end_col_offset=28)],
              Call(
                Attribute(
                  Name(
                    'combined_ingredients',
                    Load(),
                    lineno=95,
                    col_offset=31,
                    end_lineno=95,
                    end_col_offset=51),
                  'union',
                  Load(),
                  lineno=95,
                  col_offset=31,
                  end_lineno=95,
                  end_col_offset=57),
                [
                  Name(
                    'ingredients',
                    Load(),
                    lineno=95,
                    col_offset=58,
                    end_lineno=95,
                    end_col_offset=69)],
                [],
                lineno=95,
                col_offset=31,
                end_lineno=95,
                end_col_offset=70),
              lineno=95,
              col_offset=8,
              end_lineno=95,
              end_col_offset=70)],
          [],
          lineno=94,
          col_offset=4,
          end_lineno=95,
          end_col_offset=70),
        Return(
          Name(
            'combined_ingredients',
            Load(),
            lineno=97,
            col_offset=11,
            end_lineno=97,
            end_col_offset=31),
          lineno=97,
          col_offset=4,
          end_lineno=97,
          end_col_offset=31)],
      [],
      lineno=83,
      col_offset=0,
      end_lineno=97,
      end_col_offset=31),
    FunctionDef(
      'separate_appetizers',
      arguments(
        [],
        [
          arg(
            'dishes',
            lineno=100,
            col_offset=24,
            end_lineno=100,
            end_col_offset=30),
          arg(
            'appetizers',
            lineno=100,
            col_offset=32,
            end_lineno=100,
            end_col_offset=42)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Determine which `dishes` are designated `appetizers` and remove them.\n\n    :param dishes: list - of dish names.\n    :param appetizers: list - of appetizer names.\n    :return: list - of dish names that do not appear on appetizer list.\n\n    The function should return the list of dish names with appetizer names removed.\n    Either list could contain duplicates and may require de-duping.\n    ',
            lineno=101,
            col_offset=4,
            end_lineno=109,
            end_col_offset=7),
          lineno=101,
          col_offset=4,
          end_lineno=109,
          end_col_offset=7),
        Return(
          Call(
            Name(
              'list',
              Load(),
              lineno=111,
              col_offset=11,
              end_lineno=111,
              end_col_offset=15),
            [
              BinOp(
                Call(
                  Name(
                    'set',
                    Load(),
                    lineno=111,
                    col_offset=16,
                    end_lineno=111,
                    end_col_offset=19),
                  [
                    Name(
                      'dishes',
                      Load(),
                      lineno=111,
                      col_offset=20,
                      end_lineno=111,
                      end_col_offset=26)],
                  [],
                  lineno=111,
                  col_offset=16,
                  end_lineno=111,
                  end_col_offset=27),
                Sub(),
                Call(
                  Name(
                    'set',
                    Load(),
                    lineno=111,
                    col_offset=30,
                    end_lineno=111,
                    end_col_offset=33),
                  [
                    Name(
                      'appetizers',
                      Load(),
                      lineno=111,
                      col_offset=34,
                      end_lineno=111,
                      end_col_offset=44)],
                  [],
                  lineno=111,
                  col_offset=30,
                  end_lineno=111,
                  end_col_offset=45),
                lineno=111,
                col_offset=16,
                end_lineno=111,
                end_col_offset=45)],
            [],
            lineno=111,
            col_offset=11,
            end_lineno=111,
            end_col_offset=46),
          lineno=111,
          col_offset=4,
          end_lineno=111,
          end_col_offset=46)],
      [],
      lineno=100,
      col_offset=0,
      end_lineno=111,
      end_col_offset=46),
    FunctionDef(
      'singleton_ingredients',
      arguments(
        [],
        [
          arg(
            'dishes',
            lineno=114,
            col_offset=26,
            end_lineno=114,
            end_col_offset=32),
          arg(
            'intersection',
            lineno=114,
            col_offset=34,
            end_lineno=114,
            end_col_offset=46)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Determine which `dishes` have a singleton ingredient (an ingredient that only appears once across dishes).\n\n    :param dishes: list - of ingredient sets.\n    :param intersection: constant - can be one of `<CATEGORY>_INTERSECTION` constants imported from `sets_categories_data.py`.\n    :return: set - containing singleton ingredients.\n\n    Each dish is represented by a `set` of its ingredients.\n\n    Each `<CATEGORY>_INTERSECTION` is an `intersection` of all dishes in the category. `<CATEGORY>` can be any one of:\n        (VEGAN, VEGETARIAN, PALEO, KETO, or OMNIVORE).\n\n    The function should return a `set` of ingredients that only appear in a single dish.\n    ',
            lineno=115,
            col_offset=4,
            end_lineno=127,
            end_col_offset=7),
          lineno=115,
          col_offset=4,
          end_lineno=127,
          end_col_offset=7),
        Assign(
          [
            Name(
              'all_ingredients',
              Store(),
              lineno=129,
              col_offset=4,
              end_lineno=129,
              end_col_offset=19)],
          Call(
            Name(
              'set',
              Load(),
              lineno=129,
              col_offset=22,
              end_lineno=129,
              end_col_offset=25),
            [],
            [],
            lineno=129,
            col_offset=22,
            end_lineno=129,
            end_col_offset=27),
          lineno=129,
          col_offset=4,
          end_lineno=129,
          end_col_offset=27),
        For(
          Name(
            'ingredients',
            Store(),
            lineno=131,
            col_offset=8,
            end_lineno=131,
            end_col_offset=19),
          Name(
            'dishes',
            Load(),
            lineno=131,
            col_offset=23,
            end_lineno=131,
            end_col_offset=29),
          [
            Assign(
              [
                Name(
                  'all_ingredients',
                  Store(),
                  lineno=132,
                  col_offset=8,
                  end_lineno=132,
                  end_col_offset=23)],
              BinOp(
                Name(
                  'all_ingredients',
                  Load(),
                  lineno=132,
                  col_offset=26,
                  end_lineno=132,
                  end_col_offset=41),
                BitXor(),
                Name(
                  'ingredients',
                  Load(),
                  lineno=132,
                  col_offset=44,
                  end_lineno=132,
                  end_col_offset=55),
                lineno=132,
                col_offset=26,
                end_lineno=132,
                end_col_offset=55),
              lineno=132,
              col_offset=8,
              end_lineno=132,
              end_col_offset=55)],
          [],
          lineno=131,
          col_offset=4,
          end_lineno=132,
          end_col_offset=55),
        Return(
          BinOp(
            Name(
              'all_ingredients',
              Load(),
              lineno=134,
              col_offset=11,
              end_lineno=134,
              end_col_offset=26),
            Sub(),
            Name(
              'intersection',
              Load(),
              lineno=134,
              col_offset=29,
              end_lineno=134,
              end_col_offset=41),
            lineno=134,
            col_offset=11,
            end_lineno=134,
            end_col_offset=41),
          lineno=134,
          col_offset=4,
          end_lineno=134,
          end_col_offset=41)],
      [],
      lineno=114,
      col_offset=0,
      end_lineno=134,
      end_col_offset=41)],
  [])
## END TREE BEFORE ##

## BEGIN NORMALIZED TREE ##
Module(
  [
    ImportFrom(
      'sets_categories_data',
      [
        alias(
          'VEGAN',
          lineno=4,
          col_offset=34,
          end_lineno=4,
          end_col_offset=39),
        alias(
          'VEGETARIAN',
          lineno=5,
          col_offset=34,
          end_lineno=5,
          end_col_offset=44),
        alias(
          'KETO',
          lineno=6,
          col_offset=34,
          end_lineno=6,
          end_col_offset=38),
        alias(
          'PALEO',
          lineno=7,
          col_offset=34,
          end_lineno=7,
          end_col_offset=39),
        alias(
          'OMNIVORE',
          lineno=8,
          col_offset=34,
          end_lineno=8,
          end_col_offset=42),
        alias(
          'ALCOHOLS',
          lineno=9,
          col_offset=34,
          end_lineno=9,
          end_col_offset=42),
        alias(
          'SPECIAL_INGREDIENTS',
          lineno=10,
          col_offset=34,
          end_lineno=10,
          end_col_offset=53)],
      0,
      lineno=4,
      col_offset=0,
      end_lineno=10,
      end_col_offset=54),
    FunctionDef(
      'placeholder_0',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=13,
            col_offset=22,
            end_lineno=13,
            end_col_offset=31),
          arg(
            'placeholder_2',
            lineno=13,
            col_offset=33,
            end_lineno=13,
            end_col_offset=49)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          Tuple(
            [
              Name(
                'placeholder_1',
                Load(),
                lineno=24,
                col_offset=11,
                end_lineno=24,
                end_col_offset=20),
              Call(
                Name(
                  'set',
                  Load(),
                  lineno=24,
                  col_offset=22,
                  end_lineno=24,
                  end_col_offset=25),
                [
                  Name(
                    'placeholder_2',
                    Load(),
                    lineno=24,
                    col_offset=26,
                    end_lineno=24,
                    end_col_offset=42)],
                [],
                lineno=24,
                col_offset=22,
                end_lineno=24,
                end_col_offset=43)],
            Load(),
            lineno=24,
            col_offset=11,
            end_lineno=24,
            end_col_offset=43),
          lineno=24,
          col_offset=4,
          end_lineno=24,
          end_col_offset=43)],
      [],
      lineno=13,
      col_offset=0,
      end_lineno=24,
      end_col_offset=43),
    FunctionDef(
      'placeholder_3',
      arguments(
        [],
        [
          arg(
            'placeholder_4',
            lineno=27,
            col_offset=17,
            end_lineno=27,
            end_col_offset=27),
          arg(
            'placeholder_5',
            lineno=27,
            col_offset=29,
            end_lineno=27,
            end_col_offset=46)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        If(
          UnaryOp(
            Not(),
            Call(
              Attribute(
                Name(
                  'ALCOHOLS',
                  Load(),
                  lineno=38,
                  col_offset=11,
                  end_lineno=38,
                  end_col_offset=19),
                'isdisjoint',
                Load(),
                lineno=38,
                col_offset=11,
                end_lineno=38,
                end_col_offset=30),
              [
                Name(
                  'placeholder_5',
                  Load(),
                  lineno=38,
                  col_offset=31,
                  end_lineno=38,
                  end_col_offset=48)],
              [],
              lineno=38,
              col_offset=11,
              end_lineno=38,
              end_col_offset=49),
            lineno=38,
            col_offset=7,
            end_lineno=38,
            end_col_offset=49),
          [
            Return(
              BinOp(
                Name(
                  'placeholder_4',
                  Load(),
                  lineno=39,
                  col_offset=15,
                  end_lineno=39,
                  end_col_offset=25),
                Add(),
                Constant(
                  ' Cocktail',
                  lineno=39,
                  col_offset=28,
                  end_lineno=39,
                  end_col_offset=39),
                lineno=39,
                col_offset=15,
                end_lineno=39,
                end_col_offset=39),
              lineno=39,
              col_offset=8,
              end_lineno=39,
              end_col_offset=39)],
          [],
          lineno=38,
          col_offset=4,
          end_lineno=39,
          end_col_offset=39),
        Return(
          BinOp(
            Name(
              'placeholder_4',
              Load(),
              lineno=41,
              col_offset=11,
              end_lineno=41,
              end_col_offset=21),
            Add(),
            Constant(
              ' Mocktail',
              lineno=41,
              col_offset=24,
              end_lineno=41,
              end_col_offset=35),
            lineno=41,
            col_offset=11,
            end_lineno=41,
            end_col_offset=35),
          lineno=41,
          col_offset=4,
          end_lineno=41,
          end_col_offset=35)],
      [],
      lineno=27,
      col_offset=0,
      end_lineno=41,
      end_col_offset=35),
    FunctionDef(
      'placeholder_6',
      arguments(
        [],
        [
          arg(
            'placeholder_1',
            lineno=44,
            col_offset=20,
            end_lineno=44,
            end_col_offset=29),
          arg(
            'placeholder_2',
            lineno=44,
            col_offset=31,
            end_lineno=44,
            end_col_offset=47)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'placeholder_7',
              Store(),
              lineno=57,
              col_offset=4,
              end_lineno=57,
              end_col_offset=14)],
          Tuple(
            [
              Tuple(
                [
                  Name(
                    'VEGAN',
                    Load(),
                    lineno=57,
                    col_offset=19,
                    end_lineno=57,
                    end_col_offset=24),
                  Constant(
                    'VEGAN',
                    lineno=57,
                    col_offset=26,
                    end_lineno=57,
                    end_col_offset=33)],
                Load(),
                lineno=57,
                col_offset=18,
                end_lineno=57,
                end_col_offset=34),
              Tuple(
                [
                  Name(
                    'VEGETARIAN',
                    Load(),
                    lineno=58,
                    col_offset=19,
                    end_lineno=58,
                    end_col_offset=29),
                  Constant(
                    'VEGETARIAN',
                    lineno=58,
                    col_offset=31,
                    end_lineno=58,
                    end_col_offset=43)],
                Load(),
                lineno=58,
                col_offset=18,
                end_lineno=58,
                end_col_offset=44),
              Tuple(
                [
                  Name(
                    'KETO',
                    Load(),
                    lineno=59,
                    col_offset=19,
                    end_lineno=59,
                    end_col_offset=23),
                  Constant(
                    'KETO',
                    lineno=59,
                    col_offset=25,
                    end_lineno=59,
                    end_col_offset=31)],
                Load(),
                lineno=59,
                col_offset=18,
                end_lineno=59,
                end_col_offset=32),
              Tuple(
                [
                  Name(
                    'PALEO',
                    Load(),
                    lineno=60,
                    col_offset=19,
                    end_lineno=60,
                    end_col_offset=24),
                  Constant(
                    'PALEO',
                    lineno=60,
                    col_offset=26,
                    end_lineno=60,
                    end_col_offset=33)],
                Load(),
                lineno=60,
                col_offset=18,
                end_lineno=60,
                end_col_offset=34),
              Tuple(
                [
                  Name(
                    'OMNIVORE',
                    Load(),
                    lineno=61,
                    col_offset=19,
                    end_lineno=61,
                    end_col_offset=27),
                  Constant(
                    'OMNIVORE',
                    lineno=61,
                    col_offset=29,
                    end_lineno=61,
                    end_col_offset=39)],
                Load(),
                lineno=61,
                col_offset=18,
                end_lineno=61,
                end_col_offset=40)],
            Load(),
            lineno=57,
            col_offset=17,
            end_lineno=61,
            end_col_offset=41),
          lineno=57,
          col_offset=4,
          end_lineno=61,
          end_col_offset=41),
        For(
          Name(
            'placeholder_8',
            Store(),
            lineno=63,
            col_offset=8,
            end_lineno=63,
            end_col_offset=16),
          Name(
            'placeholder_7',
            Load(),
            lineno=63,
            col_offset=20,
            end_lineno=63,
            end_col_offset=30),
          [
            If(
              Compare(
                Call(
                  Name(
                    'set',
                    Load(),
                    lineno=64,
                    col_offset=11,
                    end_lineno=64,
                    end_col_offset=14),
                  [
                    Name(
                      'placeholder_2',
                      Load(),
                      lineno=64,
                      col_offset=15,
                      end_lineno=64,
                      end_col_offset=31)],
                  [],
                  lineno=64,
                  col_offset=11,
                  end_lineno=64,
                  end_col_offset=32),
                [
                  LtE()],
                [
                  Subscript(
                    Name(
                      'placeholder_8',
                      Load(),
                      lineno=64,
                      col_offset=36,
                      end_lineno=64,
                      end_col_offset=44),
                    Constant(
                      0,
                      lineno=64,
                      col_offset=45,
                      end_lineno=64,
                      end_col_offset=46),
                    Load(),
                    lineno=64,
                    col_offset=36,
                    end_lineno=64,
                    end_col_offset=47)],
                lineno=64,
                col_offset=11,
                end_lineno=64,
                end_col_offset=47),
              [
                Return(
                  BinOp(
                    BinOp(
                      Name(
                        'placeholder_1',
                        Load(),
                        lineno=65,
                        col_offset=19,
                        end_lineno=65,
                        end_col_offset=28),
                      Add(),
                      Constant(
                        ': ',
                        lineno=65,
                        col_offset=31,
                        end_lineno=65,
                        end_col_offset=35),
                      lineno=65,
                      col_offset=19,
                      end_lineno=65,
                      end_col_offset=35),
                    Add(),
                    Subscript(
                      Name(
                        'placeholder_8',
                        Load(),
                        lineno=65,
                        col_offset=38,
                        end_lineno=65,
                        end_col_offset=46),
                      Constant(
                        1,
                        lineno=65,
                        col_offset=47,
                        end_lineno=65,
                        end_col_offset=48),
                      Load(),
                      lineno=65,
                      col_offset=38,
                      end_lineno=65,
                      end_col_offset=49),
                    lineno=65,
                    col_offset=19,
                    end_lineno=65,
                    end_col_offset=49),
                  lineno=65,
                  col_offset=12,
                  end_lineno=65,
                  end_col_offset=49)],
              [],
              lineno=64,
              col_offset=8,
              end_lineno=65,
              end_col_offset=49)],
          [],
          lineno=63,
          col_offset=4,
          end_lineno=65,
          end_col_offset=49),
        Return(
          Constant(
            None,
            lineno=66,
            col_offset=11,
            end_lineno=66,
            end_col_offset=15),
          lineno=66,
          col_offset=4,
          end_lineno=66,
          end_col_offset=15)],
      [],
      lineno=44,
      col_offset=0,
      end_lineno=66,
      end_col_offset=15),
    FunctionDef(
      'placeholder_9',
      arguments(
        [],
        [
          arg(
            'placeholder_10',
            lineno=69,
            col_offset=28,
            end_lineno=69,
            end_col_offset=32)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          Tuple(
            [
              Subscript(
                Name(
                  'placeholder_10',
                  Load(),
                  lineno=80,
                  col_offset=11,
                  end_lineno=80,
                  end_col_offset=15),
                Constant(
                  0,
                  lineno=80,
                  col_offset=16,
                  end_lineno=80,
                  end_col_offset=17),
                Load(),
                lineno=80,
                col_offset=11,
                end_lineno=80,
                end_col_offset=18),
              BinOp(
                Name(
                  'SPECIAL_INGREDIENTS',
                  Load(),
                  lineno=80,
                  col_offset=21,
                  end_lineno=80,
                  end_col_offset=40),
                BitAnd(),
                Call(
                  Name(
                    'set',
                    Load(),
                    lineno=80,
                    col_offset=43,
                    end_lineno=80,
                    end_col_offset=46),
                  [
                    Subscript(
                      Name(
                        'placeholder_10',
                        Load(),
                        lineno=80,
                        col_offset=47,
                        end_lineno=80,
                        end_col_offset=51),
                      Constant(
                        1,
                        lineno=80,
                        col_offset=52,
                        end_lineno=80,
                        end_col_offset=53),
                      Load(),
                      lineno=80,
                      col_offset=47,
                      end_lineno=80,
                      end_col_offset=54)],
                  [],
                  lineno=80,
                  col_offset=43,
                  end_lineno=80,
                  end_col_offset=55),
                lineno=80,
                col_offset=21,
                end_lineno=80,
                end_col_offset=55)],
            Load(),
            lineno=80,
            col_offset=11,
            end_lineno=80,
            end_col_offset=56),
          lineno=80,
          col_offset=4,
          end_lineno=80,
          end_col_offset=56)],
      [],
      lineno=69,
      col_offset=0,
      end_lineno=80,
      end_col_offset=56),
    FunctionDef(
      'placeholder_11',
      arguments(
        [],
        [
          arg(
            'placeholder_12',
            lineno=83,
            col_offset=24,
            end_lineno=83,
            end_col_offset=30)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'placeholder_13',
              Store(),
              lineno=92,
              col_offset=4,
              end_lineno=92,
              end_col_offset=24)],
          Call(
            Name(
              'set',
              Load(),
              lineno=92,
              col_offset=27,
              end_lineno=92,
              end_col_offset=30),
            [],
            [],
            lineno=92,
            col_offset=27,
            end_lineno=92,
            end_col_offset=32),
          lineno=92,
          col_offset=4,
          end_lineno=92,
          end_col_offset=32),
        For(
          Name(
            'placeholder_14',
            Store(),
            lineno=94,
            col_offset=8,
            end_lineno=94,
            end_col_offset=19),
          Name(
            'placeholder_12',
            Load(),
            lineno=94,
            col_offset=23,
            end_lineno=94,
            end_col_offset=29),
          [
            Assign(
              [
                Name(
                  'placeholder_13',
                  Store(),
                  lineno=95,
                  col_offset=8,
                  end_lineno=95,
                  end_col_offset=28)],
              Call(
                Attribute(
                  Name(
                    'placeholder_13',
                    Load(),
                    lineno=95,
                    col_offset=31,
                    end_lineno=95,
                    end_col_offset=51),
                  'union',
                  Load(),
                  lineno=95,
                  col_offset=31,
                  end_lineno=95,
                  end_col_offset=57),
                [
                  Name(
                    'placeholder_14',
                    Load(),
                    lineno=95,
                    col_offset=58,
                    end_lineno=95,
                    end_col_offset=69)],
                [],
                lineno=95,
                col_offset=31,
                end_lineno=95,
                end_col_offset=70),
              lineno=95,
              col_offset=8,
              end_lineno=95,
              end_col_offset=70)],
          [],
          lineno=94,
          col_offset=4,
          end_lineno=95,
          end_col_offset=70),
        Return(
          Name(
            'placeholder_13',
            Load(),
            lineno=97,
            col_offset=11,
            end_lineno=97,
            end_col_offset=31),
          lineno=97,
          col_offset=4,
          end_lineno=97,
          end_col_offset=31)],
      [],
      lineno=83,
      col_offset=0,
      end_lineno=97,
      end_col_offset=31),
    FunctionDef(
      'placeholder_15',
      arguments(
        [],
        [
          arg(
            'placeholder_12',
            lineno=100,
            col_offset=24,
            end_lineno=100,
            end_col_offset=30),
          arg(
            'placeholder_16',
            lineno=100,
            col_offset=32,
            end_lineno=100,
            end_col_offset=42)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          Call(
            Name(
              'list',
              Load(),
              lineno=111,
              col_offset=11,
              end_lineno=111,
              end_col_offset=15),
            [
              BinOp(
                Call(
                  Name(
                    'set',
                    Load(),
                    lineno=111,
                    col_offset=16,
                    end_lineno=111,
                    end_col_offset=19),
                  [
                    Name(
                      'placeholder_12',
                      Load(),
                      lineno=111,
                      col_offset=20,
                      end_lineno=111,
                      end_col_offset=26)],
                  [],
                  lineno=111,
                  col_offset=16,
                  end_lineno=111,
                  end_col_offset=27),
                Sub(),
                Call(
                  Name(
                    'set',
                    Load(),
                    lineno=111,
                    col_offset=30,
                    end_lineno=111,
                    end_col_offset=33),
                  [
                    Name(
                      'placeholder_16',
                      Load(),
                      lineno=111,
                      col_offset=34,
                      end_lineno=111,
                      end_col_offset=44)],
                  [],
                  lineno=111,
                  col_offset=30,
                  end_lineno=111,
                  end_col_offset=45),
                lineno=111,
                col_offset=16,
                end_lineno=111,
                end_col_offset=45)],
            [],
            lineno=111,
            col_offset=11,
            end_lineno=111,
            end_col_offset=46),
          lineno=111,
          col_offset=4,
          end_lineno=111,
          end_col_offset=46)],
      [],
      lineno=100,
      col_offset=0,
      end_lineno=111,
      end_col_offset=46),
    FunctionDef(
      'placeholder_17',
      arguments(
        [],
        [
          arg(
            'placeholder_12',
            lineno=114,
            col_offset=26,
            end_lineno=114,
            end_col_offset=32),
          arg(
            'placeholder_18',
            lineno=114,
            col_offset=34,
            end_lineno=114,
            end_col_offset=46)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Assign(
          [
            Name(
              'placeholder_19',
              Store(),
              lineno=129,
              col_offset=4,
              end_lineno=129,
              end_col_offset=19)],
          Call(
            Name(
              'set',
              Load(),
              lineno=129,
              col_offset=22,
              end_lineno=129,
              end_col_offset=25),
            [],
            [],
            lineno=129,
            col_offset=22,
            end_lineno=129,
            end_col_offset=27),
          lineno=129,
          col_offset=4,
          end_lineno=129,
          end_col_offset=27),
        For(
          Name(
            'placeholder_14',
            Store(),
            lineno=131,
            col_offset=8,
            end_lineno=131,
            end_col_offset=19),
          Name(
            'placeholder_12',
            Load(),
            lineno=131,
            col_offset=23,
            end_lineno=131,
            end_col_offset=29),
          [
            Assign(
              [
                Name(
                  'placeholder_19',
                  Store(),
                  lineno=132,
                  col_offset=8,
                  end_lineno=132,
                  end_col_offset=23)],
              BinOp(
                Name(
                  'placeholder_19',
                  Load(),
                  lineno=132,
                  col_offset=26,
                  end_lineno=132,
                  end_col_offset=41),
                BitXor(),
                Name(
                  'placeholder_14',
                  Load(),
                  lineno=132,
                  col_offset=44,
                  end_lineno=132,
                  end_col_offset=55),
                lineno=132,
                col_offset=26,
                end_lineno=132,
                end_col_offset=55),
              lineno=132,
              col_offset=8,
              end_lineno=132,
              end_col_offset=55)],
          [],
          lineno=131,
          col_offset=4,
          end_lineno=132,
          end_col_offset=55),
        Return(
          BinOp(
            Name(
              'placeholder_19',
              Load(),
              lineno=134,
              col_offset=11,
              end_lineno=134,
              end_col_offset=26),
            Sub(),
            Name(
              'placeholder_18',
              Load(),
              lineno=134,
              col_offset=29,
              end_lineno=134,
              end_col_offset=41),
            lineno=134,
            col_offset=11,
            end_lineno=134,
            end_col_offset=41),
          lineno=134,
          col_offset=4,
          end_lineno=134,
          end_col_offset=41)],
      [],
      lineno=114,
      col_offset=0,
      end_lineno=134,
      end_col_offset=41)],
  [])
## END NORMALIZED TREE ##