## BEGIN NORMALIZED CODE ##
placeholder_0 = 40
placeholder_1 = 2


def placeholder_2(placeholder_3):
    return placeholder_0 - placeholder_3


def placeholder_4(placeholder_5):
    return placeholder_5 * placeholder_1


def placeholder_6(placeholder_5, placeholder_3):
    return placeholder_4(placeholder_5) + placeholder_3

## END NORMALIZED CODE ##

## BEGIN TREE BEFORE ##
Module(
  [
    Expr(
      Constant(
        "Functions used in preparing Guido's gorgeous lasagna.\n\nLearn about Guido, the creator of the Python language: https://en.wikipedia.org/wiki/Guido_van_Rossum\n",
        lineno=1,
        col_offset=0,
        end_lineno=4,
        end_col_offset=3),
      lineno=1,
      col_offset=0,
      end_lineno=4,
      end_col_offset=3),
    Assign(
      [
        Name(
          'EXPECTED_BAKE_TIME',
          Store(),
          lineno=7,
          col_offset=0,
          end_lineno=7,
          end_col_offset=18)],
      Constant(
        40,
        lineno=7,
        col_offset=21,
        end_lineno=7,
        end_col_offset=23),
      lineno=7,
      col_offset=0,
      end_lineno=7,
      end_col_offset=23),
    Assign(
      [
        Name(
          'PREPARATION_TIME',
          Store(),
          lineno=8,
          col_offset=0,
          end_lineno=8,
          end_col_offset=16)],
      Constant(
        2,
        lineno=8,
        col_offset=19,
        end_lineno=8,
        end_col_offset=20),
      lineno=8,
      col_offset=0,
      end_lineno=8,
      end_col_offset=20),
    FunctionDef(
      'bake_time_remaining',
      arguments(
        [],
        [
          arg(
            'elapsed_bake_time',
            lineno=11,
            col_offset=24,
            end_lineno=11,
            end_col_offset=41)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            "Calculate the bake time remaining.\n\n    :param elapsed_bake_time: int - baking time already elapsed.\n    :return: int - remaining bake time (in minutes) derived from 'EXPECTED_BAKE_TIME'.\n\n    Function that takes the actual minutes the lasagna has been in the oven as\n    an argument and returns how many minutes the lasagna still needs to bake\n    based on the `EXPECTED_BAKE_TIME`.\n    ",
            lineno=12,
            col_offset=4,
            end_lineno=20,
            end_col_offset=7),
          lineno=12,
          col_offset=4,
          end_lineno=20,
          end_col_offset=7),
        Return(
          BinOp(
            Name(
              'EXPECTED_BAKE_TIME',
              Load(),
              lineno=22,
              col_offset=11,
              end_lineno=22,
              end_col_offset=29),
            Sub(),
            Name(
              'elapsed_bake_time',
              Load(),
              lineno=22,
              col_offset=32,
              end_lineno=22,
              end_col_offset=49),
            lineno=22,
            col_offset=11,
            end_lineno=22,
            end_col_offset=49),
          lineno=22,
          col_offset=4,
          end_lineno=22,
          end_col_offset=49)],
      [],
      lineno=11,
      col_offset=0,
      end_lineno=22,
      end_col_offset=49),
    FunctionDef(
      'preparation_time_in_minutes',
      arguments(
        [],
        [
          arg(
            'number_of_layers',
            lineno=25,
            col_offset=32,
            end_lineno=25,
            end_col_offset=48)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Calculate the preparation time.\n\n    :param number_of_layers: int - the number of lasagna layers made.\n    :return: int - amount of prep time (in minutes), based on 2 minutes per layer added.\n\n    This function takes an integer representing the number of layers added to the dish,\n    calculating preparation time using a time of 2 minutes per layer added.\n    ',
            lineno=26,
            col_offset=4,
            end_lineno=33,
            end_col_offset=7),
          lineno=26,
          col_offset=4,
          end_lineno=33,
          end_col_offset=7),
        Return(
          BinOp(
            Name(
              'number_of_layers',
              Load(),
              lineno=35,
              col_offset=11,
              end_lineno=35,
              end_col_offset=27),
            Mult(),
            Name(
              'PREPARATION_TIME',
              Load(),
              lineno=35,
              col_offset=30,
              end_lineno=35,
              end_col_offset=46),
            lineno=35,
            col_offset=11,
            end_lineno=35,
            end_col_offset=46),
          lineno=35,
          col_offset=4,
          end_lineno=35,
          end_col_offset=46)],
      [],
      lineno=25,
      col_offset=0,
      end_lineno=35,
      end_col_offset=46),
    FunctionDef(
      'elapsed_time_in_minutes',
      arguments(
        [],
        [
          arg(
            'number_of_layers',
            lineno=38,
            col_offset=28,
            end_lineno=38,
            end_col_offset=44),
          arg(
            'elapsed_bake_time',
            lineno=38,
            col_offset=46,
            end_lineno=38,
            end_col_offset=63)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Expr(
          Constant(
            'Calculate the elapsed time.\n\n    :param number_of_layers: int - the number of layers in the lasagna.\n    :param elapsed_bake_time: int - elapsed cooking time.\n    :return: int - total time elapsed (in in minutes) preparing and cooking.\n\n    This function takes two integers representing the number of lasagna layers and the\n    time already spent baking and calculates the total elapsed minutes spent cooking the\n    lasagna.\n    ',
            lineno=39,
            col_offset=4,
            end_lineno=48,
            end_col_offset=7),
          lineno=39,
          col_offset=4,
          end_lineno=48,
          end_col_offset=7),
        Return(
          BinOp(
            Call(
              Name(
                'preparation_time_in_minutes',
                Load(),
                lineno=50,
                col_offset=11,
                end_lineno=50,
                end_col_offset=38),
              [
                Name(
                  'number_of_layers',
                  Load(),
                  lineno=50,
                  col_offset=39,
                  end_lineno=50,
                  end_col_offset=55)],
              [],
              lineno=50,
              col_offset=11,
              end_lineno=50,
              end_col_offset=56),
            Add(),
            Name(
              'elapsed_bake_time',
              Load(),
              lineno=50,
              col_offset=59,
              end_lineno=50,
              end_col_offset=76),
            lineno=50,
            col_offset=11,
            end_lineno=50,
            end_col_offset=76),
          lineno=50,
          col_offset=4,
          end_lineno=50,
          end_col_offset=76)],
      [],
      lineno=38,
      col_offset=0,
      end_lineno=50,
      end_col_offset=76)],
  [])
## END TREE BEFORE ##

## BEGIN NORMALIZED TREE ##
Module(
  [
    Assign(
      [
        Name(
          'placeholder_0',
          Store(),
          lineno=7,
          col_offset=0,
          end_lineno=7,
          end_col_offset=18)],
      Constant(
        40,
        lineno=7,
        col_offset=21,
        end_lineno=7,
        end_col_offset=23),
      lineno=7,
      col_offset=0,
      end_lineno=7,
      end_col_offset=23),
    Assign(
      [
        Name(
          'placeholder_1',
          Store(),
          lineno=8,
          col_offset=0,
          end_lineno=8,
          end_col_offset=16)],
      Constant(
        2,
        lineno=8,
        col_offset=19,
        end_lineno=8,
        end_col_offset=20),
      lineno=8,
      col_offset=0,
      end_lineno=8,
      end_col_offset=20),
    FunctionDef(
      'placeholder_2',
      arguments(
        [],
        [
          arg(
            'placeholder_3',
            lineno=11,
            col_offset=24,
            end_lineno=11,
            end_col_offset=41)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BinOp(
            Name(
              'placeholder_0',
              Load(),
              lineno=22,
              col_offset=11,
              end_lineno=22,
              end_col_offset=29),
            Sub(),
            Name(
              'placeholder_3',
              Load(),
              lineno=22,
              col_offset=32,
              end_lineno=22,
              end_col_offset=49),
            lineno=22,
            col_offset=11,
            end_lineno=22,
            end_col_offset=49),
          lineno=22,
          col_offset=4,
          end_lineno=22,
          end_col_offset=49)],
      [],
      lineno=11,
      col_offset=0,
      end_lineno=22,
      end_col_offset=49),
    FunctionDef(
      'placeholder_4',
      arguments(
        [],
        [
          arg(
            'placeholder_5',
            lineno=25,
            col_offset=32,
            end_lineno=25,
            end_col_offset=48)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BinOp(
            Name(
              'placeholder_5',
              Load(),
              lineno=35,
              col_offset=11,
              end_lineno=35,
              end_col_offset=27),
            Mult(),
            Name(
              'placeholder_1',
              Load(),
              lineno=35,
              col_offset=30,
              end_lineno=35,
              end_col_offset=46),
            lineno=35,
            col_offset=11,
            end_lineno=35,
            end_col_offset=46),
          lineno=35,
          col_offset=4,
          end_lineno=35,
          end_col_offset=46)],
      [],
      lineno=25,
      col_offset=0,
      end_lineno=35,
      end_col_offset=46),
    FunctionDef(
      'placeholder_6',
      arguments(
        [],
        [
          arg(
            'placeholder_5',
            lineno=38,
            col_offset=28,
            end_lineno=38,
            end_col_offset=44),
          arg(
            'placeholder_3',
            lineno=38,
            col_offset=46,
            end_lineno=38,
            end_col_offset=63)],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      [
        Return(
          BinOp(
            Call(
              Name(
                'placeholder_4',
                Load(),
                lineno=50,
                col_offset=11,
                end_lineno=50,
                end_col_offset=38),
              [
                Name(
                  'placeholder_5',
                  Load(),
                  lineno=50,
                  col_offset=39,
                  end_lineno=50,
                  end_col_offset=55)],
              [],
              lineno=50,
              col_offset=11,
              end_lineno=50,
              end_col_offset=56),
            Add(),
            Name(
              'placeholder_3',
              Load(),
              lineno=50,
              col_offset=59,
              end_lineno=50,
              end_col_offset=76),
            lineno=50,
            col_offset=11,
            end_lineno=50,
            end_col_offset=76),
          lineno=50,
          col_offset=4,
          end_lineno=50,
          end_col_offset=76)],
      [],
      lineno=38,
      col_offset=0,
      end_lineno=50,
      end_col_offset=76)],
  [])
## END NORMALIZED TREE ##